webpackJsonp([8],{0:function(t,e,n){n("sStE"),t.exports=n("2I+f")},"2I+f":function(t,e){},"8zc/":function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bg-white container mx-4 md:mx-auto shadow-lg mt-32 flex flex-row md:w-3/5 xxl:w-2/5 justify-between"},[t._m(0),t._v(" "),n("div",{}),t._v(" "),n("div",{staticClass:"w-full md:w-1/2 p-8"},[n("form",{attrs:{role:"form",method:"POST",action:t.url}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:t.token}}),t._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"email",type:"text",name:"email",placeholder:"E-mail"}}),t._v(" "),t.errors?n("span",{staticClass:"text-red-light block pt-2"},[t._v(t._s(t.errors.email))]):t._e()]),t._v(" "),n("p",{staticClass:"py-4"},[n("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"password",type:"password",name:"password",placeholder:"Password"}}),t._v(" "),t.errors?n("span",{staticClass:"text-red-light block pt-2"},[t._v(t._s(t.errors.password))]):t._e()]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("a",{staticClass:"no-underline text-teal text-sm",attrs:{href:"password/reset"}},[t._v("Forgot Your Password?")])])])])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"w-1/2 text-center bg-teal-light p-4 hidden md:block"},[e("p",{staticClass:"text-white font-bold text-4xl pt-8 mt-8"},[this._v("GOODWORK")]),this._v(" "),e("p",{staticClass:"text-white text-xl pt-4"},[this._v("Sane way to manage work")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"py-4 text-grey"},[e("input",{attrs:{type:"checkbox",name:"remember"}}),this._v("\n                Remember Me\n            ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",{staticClass:"py-4"},[e("button",{staticClass:"btn",attrs:{type:"submit"}},[this._v("LOGIN")])])}]}},"C/JF":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n.d(e,"icon",function(){return le}),n.d(e,"noAuto",function(){return oe}),n.d(e,"config",function(){return I}),n.d(e,"toHtml",function(){return kt}),n.d(e,"layer",function(){return he}),n.d(e,"text",function(){return fe}),n.d(e,"counter",function(){return pe}),n.d(e,"library",function(){return ae}),n.d(e,"dom",function(){return ce}),n.d(e,"parse",function(){return ue}),n.d(e,"findIconDefinition",function(){return re});var r=function(){},i={},a={},o=null,s={mark:r,measure:r};try{"undefined"!=typeof window&&(i=window),"undefined"!=typeof document&&(a=document),"undefined"!=typeof MutationObserver&&(o=MutationObserver),"undefined"!=typeof performance&&(s=performance)}catch(t){}var c=(i.navigator||{}).userAgent,u=void 0===c?"":c,l=i,f=a,p=o,h=s,d=!!f.documentElement&&!!f.head&&"function"==typeof f.addEventListener&&"function"==typeof f.createElement,m=~u.indexOf("MSIE")||~u.indexOf("Trident/"),v=16,g="data-fa-i2svg",y="data-fa-pseudo-element",b="data-prefix",w="data-icon",k="fontawesome-i2svg",x=["HTML","HEAD","STYLE","SCRIPT"],_=function(){try{return!0}catch(t){return!1}}(),O=[1,2,3,4,5,6,7,8,9,10],C=O.concat([11,12,13,14,15,16,17,18,19,20]),A=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],S=["xs","sm","lg","fw","ul","li","border","pull-left","pull-right","spin","pulse","rotate-90","rotate-180","rotate-270","flip-horizontal","flip-vertical","stack","stack-1x","stack-2x","inverse","layers","layers-text","layers-counter"].concat(O.map(function(t){return t+"x"})).concat(C.map(function(t){return"w-"+t})),j=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},E=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),z=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},N=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,s=t[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&s.return&&s.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),M=function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)},P=l.FontAwesomeConfig||{};if(f&&"function"==typeof f.querySelector){[["data-family-prefix","familyPrefix"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach(function(t){var e=N(t,2),n=e[0],r=e[1],i=function(t){return""===t||"false"!==t&&("true"===t||t)}(function(t){var e=f.querySelector("script["+t+"]");if(e)return e.getAttribute(t)}(n));null!=i&&(P[r]=i)})}var T=z({familyPrefix:"fa",replacementClass:"svg-inline--fa",autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0},P);T.autoReplaceSvg||(T.observeMutations=!1);var I=z({},T);l.FontAwesomeConfig=I;var L=l||{};L.___FONT_AWESOME___||(L.___FONT_AWESOME___={}),L.___FONT_AWESOME___.styles||(L.___FONT_AWESOME___.styles={}),L.___FONT_AWESOME___.hooks||(L.___FONT_AWESOME___.hooks={}),L.___FONT_AWESOME___.shims||(L.___FONT_AWESOME___.shims=[]);var R=L.___FONT_AWESOME___,F=[],X=!1;d&&((X=(f.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(f.readyState))||f.addEventListener("DOMContentLoaded",function t(){f.removeEventListener("DOMContentLoaded",t),X=1,F.map(function(t){return t()})}));var W=v,B={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function V(t){if(t&&d){var e=f.createElement("style");e.setAttribute("type","text/css"),e.innerHTML=t;for(var n=f.head.childNodes,r=null,i=n.length-1;i>-1;i--){var a=n[i],o=(a.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(o)>-1&&(r=a)}return f.head.insertBefore(e,r),t}}var D="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";function H(){for(var t=12,e="";t-- >0;)e+=D[62*Math.random()|0];return e}function q(t){for(var e=[],n=(t||[]).length>>>0;n--;)e[n]=t[n];return e}function U(t){return t.classList?q(t.classList):(t.getAttribute("class")||"").split(" ").filter(function(t){return t})}function K(t,e){var n,r=e.split("-"),i=r[0],a=r.slice(1).join("-");return i!==t||""===a||(n=a,~S.indexOf(n))?null:a}function Y(t){return(""+t).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function G(t){return Object.keys(t||{}).reduce(function(e,n){return e+(n+": ")+t[n]+";"},"")}function $(t){return t.size!==B.size||t.x!==B.x||t.y!==B.y||t.rotate!==B.rotate||t.flipX||t.flipY}function Q(t){var e=t.transform,n=t.containerWidth,r=t.iconWidth;return{outer:{transform:"translate("+n/2+" 256)"},inner:{transform:"translate("+32*e.x+", "+32*e.y+") "+" "+("scale("+e.size/16*(e.flipX?-1:1)+", "+e.size/16*(e.flipY?-1:1)+") ")+" "+("rotate("+e.rotate+" 0 0)")},path:{transform:"translate("+r/2*-1+" -256)"}}}var J={x:0,y:0,width:"100%",height:"100%"},Z=function(t){var e=t.children,n=t.attributes,r=t.main,i=t.mask,a=t.transform,o=r.width,s=r.icon,c=i.width,u=i.icon,l=Q({transform:a,containerWidth:c,iconWidth:o}),f={tag:"rect",attributes:z({},J,{fill:"white"})},p={tag:"g",attributes:z({},l.inner),children:[{tag:"path",attributes:z({},s.attributes,l.path,{fill:"black"})}]},h={tag:"g",attributes:z({},l.outer),children:[p]},d="mask-"+H(),m="clip-"+H(),v={tag:"defs",children:[{tag:"clipPath",attributes:{id:m},children:[u]},{tag:"mask",attributes:z({},J,{id:d,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[f,h]}]};return e.push(v,{tag:"rect",attributes:z({fill:"currentColor","clip-path":"url(#"+m+")",mask:"url(#"+d+")"},J)}),{children:e,attributes:n}},tt=function(t){var e=t.children,n=t.attributes,r=t.main,i=t.transform,a=G(t.styles);if(a.length>0&&(n.style=a),$(i)){var o=Q({transform:i,containerWidth:r.width,iconWidth:r.width});e.push({tag:"g",attributes:z({},o.outer),children:[{tag:"g",attributes:z({},o.inner),children:[{tag:r.icon.tag,children:r.icon.children,attributes:z({},r.icon.attributes,o.path)}]}]})}else e.push(r.icon);return{children:e,attributes:n}},et=function(t){var e=t.children,n=t.main,r=t.mask,i=t.attributes,a=t.styles,o=t.transform;if($(o)&&n.found&&!r.found){var s={x:n.width/n.height/2,y:.5};i.style=G(z({},a,{"transform-origin":s.x+o.x/16+"em "+(s.y+o.y/16)+"em"}))}return[{tag:"svg",attributes:i,children:e}]},nt=function(t){var e=t.prefix,n=t.iconName,r=t.children,i=t.attributes,a=t.symbol,o=!0===a?e+"-"+I.familyPrefix+"-"+n:a;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:z({},i,{id:o}),children:r}]}]};function rt(t){var e=t.icons,n=e.main,r=e.mask,i=t.prefix,a=t.iconName,o=t.transform,s=t.symbol,c=t.title,u=t.extra,l=t.watchable,f=void 0!==l&&l,p=r.found?r:n,h=p.width,d=p.height,m="fa-w-"+Math.ceil(h/d*16),v=[I.replacementClass,a?I.familyPrefix+"-"+a:"",m].filter(function(t){return-1===u.classes.indexOf(t)}).concat(u.classes).join(" "),y={children:[],attributes:z({},u.attributes,{"data-prefix":i,"data-icon":a,class:v,role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 "+h+" "+d})};f&&(y.attributes[g]=""),c&&y.children.push({tag:"title",attributes:{id:y.attributes["aria-labelledby"]||"title-"+H()},children:[c]});var b=z({},y,{prefix:i,iconName:a,main:n,mask:r,transform:o,symbol:s,styles:u.styles}),w=r.found&&n.found?Z(b):tt(b),k=w.children,x=w.attributes;return b.children=k,b.attributes=x,s?nt(b):et(b)}function it(t){var e=t.content,n=t.width,r=t.height,i=t.transform,a=t.title,o=t.extra,s=t.watchable,c=void 0!==s&&s,u=z({},o.attributes,a?{title:a}:{},{class:o.classes.join(" ")});c&&(u[g]="");var l=z({},o.styles);$(i)&&(l.transform=function(t){var e=t.transform,n=t.width,r=void 0===n?v:n,i=t.height,a=void 0===i?v:i,o=t.startCentered,s=void 0!==o&&o,c="";return c+=s&&m?"translate("+(e.x/W-r/2)+"em, "+(e.y/W-a/2)+"em) ":s?"translate(calc(-50% + "+e.x/W+"em), calc(-50% + "+e.y/W+"em)) ":"translate("+e.x/W+"em, "+e.y/W+"em) ",c+="scale("+e.size/W*(e.flipX?-1:1)+", "+e.size/W*(e.flipY?-1:1)+") ",c+="rotate("+e.rotate+"deg) "}({transform:i,startCentered:!0,width:n,height:r}),l["-webkit-transform"]=l.transform);var f=G(l);f.length>0&&(u.style=f);var p=[];return p.push({tag:"span",attributes:u,children:[e]}),a&&p.push({tag:"span",attributes:{class:"sr-only"},children:[a]}),p}var at=function(){},ot=I.measurePerformance&&h&&h.mark&&h.measure?h:{mark:at,measure:at},st=function(t){ot.mark('FA "5.4.1" '+t+" ends"),ot.measure('FA "5.4.1" '+t,'FA "5.4.1" '+t+" begins",'FA "5.4.1" '+t+" ends")},ct={begin:function(t){return ot.mark('FA "5.4.1" '+t+" begins"),function(){return st(t)}},end:st},ut=function(t,e,n,r){var i,a,o,s=Object.keys(t),c=s.length,u=void 0!==r?function(t,e){return function(n,r,i,a){return t.call(e,n,r,i,a)}}(e,r):e;for(void 0===n?(i=1,o=t[s[0]]):(i=0,o=n);i<c;i++)o=u(o,t[a=s[i]],a,t);return o},lt=R.styles,ft=R.shims,pt={},ht={},dt={},mt=function(){var t=function(t){return ut(lt,function(e,n,r){return e[r]=ut(n,t,{}),e},{})};pt=t(function(t,e,n){return t[e[3]]=n,t}),ht=t(function(t,e,n){var r=e[2];return t[n]=n,r.forEach(function(e){t[e]=n}),t});var e="far"in lt;dt=ut(ft,function(t,n){var r=n[0],i=n[1],a=n[2];return"far"!==i||e||(i="fas"),t[r]={prefix:i,iconName:a},t},{})};function vt(t,e){return pt[t][e]}mt();var gt=R.styles,yt=function(){return{prefix:null,iconName:null,rest:[]}};function bt(t){return t.reduce(function(t,e){var n=K(I.familyPrefix,e);if(gt[e])t.prefix=e;else if(n){var r="fa"===t.prefix?dt[n]||{prefix:null,iconName:null}:{};t.iconName=r.iconName||n,t.prefix=r.prefix||t.prefix}else e!==I.replacementClass&&0!==e.indexOf("fa-w-")&&t.rest.push(e);return t},yt())}function wt(t,e,n){if(t&&t[e]&&t[e][n])return{prefix:e,iconName:n,icon:t[e][n]}}function kt(t){var e=t.tag,n=t.attributes,r=void 0===n?{}:n,i=t.children,a=void 0===i?[]:i;return"string"==typeof t?Y(t):"<"+e+" "+function(t){return Object.keys(t||{}).reduce(function(e,n){return e+(n+'="')+Y(t[n])+'" '},"").trim()}(r)+">"+a.map(kt).join("")+"</"+e+">"}var xt=function(){};function _t(t){return"string"==typeof(t.getAttribute?t.getAttribute(g):null)}var Ot={replace:function(t){var e=t[0],n=t[1].map(function(t){return kt(t)}).join("\n");if(e.parentNode&&e.outerHTML)e.outerHTML=n+(I.keepOriginalSource&&"svg"!==e.tagName.toLowerCase()?"\x3c!-- "+e.outerHTML+" --\x3e":"");else if(e.parentNode){var r=document.createElement("span");e.parentNode.replaceChild(r,e),r.outerHTML=n}},nest:function(t){var e=t[0],n=t[1];if(~U(e).indexOf(I.replacementClass))return Ot.replace(t);var r=new RegExp(I.familyPrefix+"-.*");delete n[0].attributes.style;var i=n[0].attributes.class.split(" ").reduce(function(t,e){return e===I.replacementClass||e.match(r)?t.toSvg.push(e):t.toNode.push(e),t},{toNode:[],toSvg:[]});n[0].attributes.class=i.toSvg.join(" ");var a=n.map(function(t){return kt(t)}).join("\n");e.setAttribute("class",i.toNode.join(" ")),e.setAttribute(g,""),e.innerHTML=a}};function Ct(t,e){var n="function"==typeof e?e:xt;0===t.length?n():(l.requestAnimationFrame||function(t){return t()})(function(){var e=!0===I.autoReplaceSvg?Ot.replace:Ot[I.autoReplaceSvg]||Ot.replace,r=ct.begin("mutate");t.map(e),r(),n()})}var At=!1;var St=null;var jt=function(t){var e=t.getAttribute("style"),n=[];return e&&(n=e.split(";").reduce(function(t,e){var n=e.split(":"),r=n[0],i=n.slice(1);return r&&i.length>0&&(t[r]=i.join(":").trim()),t},{})),n};function Et(t){for(var e="",n=0;n<t.length;n++){e+=("000"+t.charCodeAt(n).toString(16)).slice(-4)}return e}var zt=function(t){var e,n,r=t.getAttribute("data-prefix"),i=t.getAttribute("data-icon"),a=void 0!==t.innerText?t.innerText.trim():"",o=bt(U(t));return r&&i&&(o.prefix=r,o.iconName=i),o.prefix&&a.length>1?o.iconName=(e=o.prefix,n=t.innerText,ht[e][n]):o.prefix&&1===a.length&&(o.iconName=vt(o.prefix,Et(t.innerText))),o},Nt=function(t){var e={size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0};return t?t.toLowerCase().split(" ").reduce(function(t,e){var n=e.toLowerCase().split("-"),r=n[0],i=n.slice(1).join("-");if(r&&"h"===i)return t.flipX=!0,t;if(r&&"v"===i)return t.flipY=!0,t;if(i=parseFloat(i),isNaN(i))return t;switch(r){case"grow":t.size=t.size+i;break;case"shrink":t.size=t.size-i;break;case"left":t.x=t.x-i;break;case"right":t.x=t.x+i;break;case"up":t.y=t.y-i;break;case"down":t.y=t.y+i;break;case"rotate":t.rotate=t.rotate+i}return t},e):e},Mt=function(t){return Nt(t.getAttribute("data-fa-transform"))},Pt=function(t){var e=t.getAttribute("data-fa-symbol");return null!==e&&(""===e||e)},Tt=function(t){var e=q(t.attributes).reduce(function(t,e){return"class"!==t.name&&"style"!==t.name&&(t[e.name]=e.value),t},{}),n=t.getAttribute("title");return I.autoA11y&&(n?e["aria-labelledby"]=I.replacementClass+"-title-"+H():e["aria-hidden"]="true"),e},It=function(t){var e=t.getAttribute("data-fa-mask");return e?bt(e.split(" ").map(function(t){return t.trim()})):yt()},Lt={iconName:null,title:null,prefix:null,transform:B,symbol:!1,mask:null,extra:{classes:[],styles:{},attributes:{}}};function Rt(t){this.name="MissingIcon",this.message=t||"Icon unavailable",this.stack=(new Error).stack}Rt.prototype=Object.create(Error.prototype),Rt.prototype.constructor=Rt;var Ft={fill:"currentColor"},Xt={attributeType:"XML",repeatCount:"indefinite",dur:"2s"},Wt={tag:"path",attributes:z({},Ft,{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})},Bt=z({},Xt,{attributeName:"opacity"}),Vt={tag:"g",children:[Wt,{tag:"circle",attributes:z({},Ft,{cx:"256",cy:"364",r:"28"}),children:[{tag:"animate",attributes:z({},Xt,{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:z({},Bt,{values:"1;0;1;1;0;1;"})}]},{tag:"path",attributes:z({},Ft,{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:[{tag:"animate",attributes:z({},Bt,{values:"1;0;0;0;0;1;"})}]},{tag:"path",attributes:z({},Ft,{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:z({},Bt,{values:"0;0;1;1;0;0;"})}]}]},Dt=R.styles,Ht="fa-layers-text",qt=/Font Awesome 5 (Solid|Regular|Light|Brands|Free|Pro)/,Ut={Solid:"fas",Regular:"far",Light:"fal",Brands:"fab"},Kt={900:"fas",400:"far",300:"fal"};function Yt(t,e){var n={found:!1,width:512,height:512,icon:Vt};if(t&&e&&Dt[e]&&Dt[e][t]){var r=Dt[e][t];n={found:!0,width:r[0],height:r[1],icon:{tag:"path",attributes:{fill:"currentColor",d:r.slice(4)[0]}}}}else if(t&&e&&!I.showMissingIcons)throw new Rt("Icon is missing for prefix "+e+" with icon name "+t);return n}function Gt(t){var e=function(t){var e=zt(t),n=e.iconName,r=e.prefix,i=e.rest,a=jt(t),o=Mt(t),s=Pt(t),c=Tt(t),u=It(t);return{iconName:n,title:t.getAttribute("title"),prefix:r,transform:o,symbol:s,mask:u,extra:{classes:i,styles:a,attributes:c}}}(t);return~e.extra.classes.indexOf(Ht)?function(t,e){var n=e.title,r=e.transform,i=e.extra,a=null,o=null;if(m){var s=parseInt(getComputedStyle(t).fontSize,10),c=t.getBoundingClientRect();a=c.width/s,o=c.height/s}return I.autoA11y&&!n&&(i.attributes["aria-hidden"]="true"),[t,it({content:t.innerHTML,width:a,height:o,transform:r,title:n,extra:i,watchable:!0})]}(t,e):function(t,e){var n=e.iconName,r=e.title,i=e.prefix,a=e.transform,o=e.symbol,s=e.mask,c=e.extra;return[t,rt({icons:{main:Yt(n,i),mask:Yt(s.iconName,s.prefix)},prefix:i,iconName:n,transform:a,symbol:o,mask:s,title:r,extra:c,watchable:!0})]}(t,e)}function $t(t){if(d){var e=ct.begin("searchPseudoElements");At=!0,function(){q(t.querySelectorAll("*")).filter(function(t){return!(t.parentNode===document.head||~x.indexOf(t.tagName.toUpperCase())||t.getAttribute(y)||t.parentNode&&"svg"===t.parentNode.tagName)}).forEach(function(t){[":before",":after"].forEach(function(e){var n=q(t.children).filter(function(t){return t.getAttribute(y)===e})[0],r=l.getComputedStyle(t,e),i=r.getPropertyValue("font-family").match(qt),a=r.getPropertyValue("font-weight");if(n&&!i)t.removeChild(n);else if(i){var o=r.getPropertyValue("content"),s=~["Light","Regular","Solid","Brands"].indexOf(i[1])?Ut[i[1]]:Kt[a],c=vt(s,Et(3===o.length?o.substr(1,1):o));if(!n||n.getAttribute(b)!==s||n.getAttribute(w)!==c){n&&t.removeChild(n);var u=Lt.extra;u.attributes[y]=e;var p=rt(z({},Lt,{icons:{main:Yt(c,s),mask:yt()},prefix:s,iconName:c,extra:u,watchable:!0})),h=f.createElement("svg");":before"===e?t.insertBefore(h,t.firstChild):t.appendChild(h),h.outerHTML=p.map(function(t){return kt(t)}).join("\n")}}})})}(),At=!1,e()}}function Qt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(d){var n=f.documentElement.classList,r=function(t){return n.add(k+"-"+t)},i=function(t){return n.remove(k+"-"+t)},a=Object.keys(Dt),o=["."+Ht+":not(["+g+"])"].concat(a.map(function(t){return"."+t+":not(["+g+"])"})).join(", ");if(0!==o.length){var s=q(t.querySelectorAll(o));if(s.length>0){r("pending"),i("complete");var c=ct.begin("onTree"),u=s.reduce(function(t,e){try{var n=Gt(e);n&&t.push(n)}catch(t){_||t instanceof Rt&&console.error(t)}return t},[]);c(),Ct(u,function(){r("active"),r("complete"),i("pending"),"function"==typeof e&&e()})}}}}function Jt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=Gt(t);n&&Ct([n],e)}var Zt=function(){var t="svg-inline--fa",e=I.familyPrefix,n=I.replacementClass,r='svg:not(:root).svg-inline--fa {\n  overflow: visible; }\n\n.svg-inline--fa {\n  display: inline-block;\n  font-size: inherit;\n  height: 1em;\n  overflow: visible;\n  vertical-align: -.125em; }\n  .svg-inline--fa.fa-lg {\n    vertical-align: -.225em; }\n  .svg-inline--fa.fa-w-1 {\n    width: 0.0625em; }\n  .svg-inline--fa.fa-w-2 {\n    width: 0.125em; }\n  .svg-inline--fa.fa-w-3 {\n    width: 0.1875em; }\n  .svg-inline--fa.fa-w-4 {\n    width: 0.25em; }\n  .svg-inline--fa.fa-w-5 {\n    width: 0.3125em; }\n  .svg-inline--fa.fa-w-6 {\n    width: 0.375em; }\n  .svg-inline--fa.fa-w-7 {\n    width: 0.4375em; }\n  .svg-inline--fa.fa-w-8 {\n    width: 0.5em; }\n  .svg-inline--fa.fa-w-9 {\n    width: 0.5625em; }\n  .svg-inline--fa.fa-w-10 {\n    width: 0.625em; }\n  .svg-inline--fa.fa-w-11 {\n    width: 0.6875em; }\n  .svg-inline--fa.fa-w-12 {\n    width: 0.75em; }\n  .svg-inline--fa.fa-w-13 {\n    width: 0.8125em; }\n  .svg-inline--fa.fa-w-14 {\n    width: 0.875em; }\n  .svg-inline--fa.fa-w-15 {\n    width: 0.9375em; }\n  .svg-inline--fa.fa-w-16 {\n    width: 1em; }\n  .svg-inline--fa.fa-w-17 {\n    width: 1.0625em; }\n  .svg-inline--fa.fa-w-18 {\n    width: 1.125em; }\n  .svg-inline--fa.fa-w-19 {\n    width: 1.1875em; }\n  .svg-inline--fa.fa-w-20 {\n    width: 1.25em; }\n  .svg-inline--fa.fa-pull-left {\n    margin-right: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-pull-right {\n    margin-left: .3em;\n    width: auto; }\n  .svg-inline--fa.fa-border {\n    height: 1.5em; }\n  .svg-inline--fa.fa-li {\n    width: 2em; }\n  .svg-inline--fa.fa-fw {\n    width: 1.25em; }\n\n.fa-layers svg.svg-inline--fa {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.fa-layers {\n  display: inline-block;\n  height: 1em;\n  position: relative;\n  text-align: center;\n  vertical-align: -.125em;\n  width: 1em; }\n  .fa-layers svg.svg-inline--fa {\n    -webkit-transform-origin: center center;\n            transform-origin: center center; }\n\n.fa-layers-text, .fa-layers-counter {\n  display: inline-block;\n  position: absolute;\n  text-align: center; }\n\n.fa-layers-text {\n  left: 50%;\n  top: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n  -webkit-transform-origin: center center;\n          transform-origin: center center; }\n\n.fa-layers-counter {\n  background-color: #ff253a;\n  border-radius: 1em;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  color: #fff;\n  height: 1.5em;\n  line-height: 1;\n  max-width: 5em;\n  min-width: 1.5em;\n  overflow: hidden;\n  padding: .25em;\n  right: 0;\n  text-overflow: ellipsis;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-bottom-right {\n  bottom: 0;\n  right: 0;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom right;\n          transform-origin: bottom right; }\n\n.fa-layers-bottom-left {\n  bottom: 0;\n  left: 0;\n  right: auto;\n  top: auto;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: bottom left;\n          transform-origin: bottom left; }\n\n.fa-layers-top-right {\n  right: 0;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top right;\n          transform-origin: top right; }\n\n.fa-layers-top-left {\n  left: 0;\n  right: auto;\n  top: 0;\n  -webkit-transform: scale(0.25);\n          transform: scale(0.25);\n  -webkit-transform-origin: top left;\n          transform-origin: top left; }\n\n.fa-lg {\n  font-size: 1.33333em;\n  line-height: 0.75em;\n  vertical-align: -.0667em; }\n\n.fa-xs {\n  font-size: .75em; }\n\n.fa-sm {\n  font-size: .875em; }\n\n.fa-1x {\n  font-size: 1em; }\n\n.fa-2x {\n  font-size: 2em; }\n\n.fa-3x {\n  font-size: 3em; }\n\n.fa-4x {\n  font-size: 4em; }\n\n.fa-5x {\n  font-size: 5em; }\n\n.fa-6x {\n  font-size: 6em; }\n\n.fa-7x {\n  font-size: 7em; }\n\n.fa-8x {\n  font-size: 8em; }\n\n.fa-9x {\n  font-size: 9em; }\n\n.fa-10x {\n  font-size: 10em; }\n\n.fa-fw {\n  text-align: center;\n  width: 1.25em; }\n\n.fa-ul {\n  list-style-type: none;\n  margin-left: 2.5em;\n  padding-left: 0; }\n  .fa-ul > li {\n    position: relative; }\n\n.fa-li {\n  left: -2em;\n  position: absolute;\n  text-align: center;\n  width: 2em;\n  line-height: inherit; }\n\n.fa-border {\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n  padding: .2em .25em .15em; }\n\n.fa-pull-left {\n  float: left; }\n\n.fa-pull-right {\n  float: right; }\n\n.fa.fa-pull-left,\n.fas.fa-pull-left,\n.far.fa-pull-left,\n.fal.fa-pull-left,\n.fab.fa-pull-left {\n  margin-right: .3em; }\n\n.fa.fa-pull-right,\n.fas.fa-pull-right,\n.far.fa-pull-right,\n.fal.fa-pull-right,\n.fab.fa-pull-right {\n  margin-left: .3em; }\n\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n          animation: fa-spin 2s infinite linear; }\n\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n          animation: fa-spin 1s infinite steps(8); }\n\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n          transform: rotate(90deg); }\n\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n          transform: rotate(270deg); }\n\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n          transform: scale(-1, 1); }\n\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n          transform: scale(1, -1); }\n\n.fa-flip-horizontal.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(-1, -1);\n          transform: scale(-1, -1); }\n\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  -webkit-filter: none;\n          filter: none; }\n\n.fa-stack {\n  display: inline-block;\n  height: 2em;\n  position: relative;\n  width: 2em; }\n\n.fa-stack-1x,\n.fa-stack-2x {\n  bottom: 0;\n  left: 0;\n  margin: auto;\n  position: absolute;\n  right: 0;\n  top: 0; }\n\n.svg-inline--fa.fa-stack-1x {\n  height: 1em;\n  width: 1em; }\n\n.svg-inline--fa.fa-stack-2x {\n  height: 2em;\n  width: 2em; }\n\n.fa-inverse {\n  color: #fff; }\n\n.sr-only {\n  border: 0;\n  clip: rect(0, 0, 0, 0);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px; }\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  clip: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  position: static;\n  width: auto; }\n';if("fa"!==e||n!==t){var i=new RegExp("\\.fa\\-","g"),a=new RegExp("\\."+t,"g");r=r.replace(i,"."+e+"-").replace(a,"."+n)}return r};function te(t){return{found:!0,width:t[0],height:t[1],icon:{tag:"path",attributes:{fill:"currentColor",d:t.slice(4)[0]}}}}function ee(){I.autoAddCss&&!se&&(V(Zt()),se=!0)}function ne(t,e){return Object.defineProperty(t,"abstract",{get:e}),Object.defineProperty(t,"html",{get:function(){return t.abstract.map(function(t){return kt(t)})}}),Object.defineProperty(t,"node",{get:function(){if(d){var e=f.createElement("div");return e.innerHTML=t.html,e.children}}}),t}function re(t){var e=t.prefix,n=void 0===e?"fa":e,r=t.iconName;if(r)return wt(ae.definitions,n,r)||wt(R.styles,n,r)}var ie,ae=new(function(){function t(){j(this,t),this.definitions={}}return E(t,[{key:"add",value:function(){for(var t=this,e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];var i=n.reduce(this._pullDefinitions,{});Object.keys(i).forEach(function(e){t.definitions[e]=z({},t.definitions[e]||{},i[e]),function t(e,n){var r=Object.keys(n).reduce(function(t,e){var r=n[e];return r.icon?t[r.iconName]=r.icon:t[e]=r,t},{});"function"==typeof R.hooks.addPack?R.hooks.addPack(e,r):R.styles[e]=z({},R.styles[e]||{},r),"fas"===e&&t("fa",n)}(e,i[e]),mt()})}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(t,e){var n=e.prefix&&e.iconName&&e.icon?{0:e}:e;return Object.keys(n).map(function(e){var r=n[e],i=r.prefix,a=r.iconName,o=r.icon;t[i]||(t[i]={}),t[i][a]=o}),t}}]),t}()),oe=function(){I.autoReplaceSvg=!1,I.observeMutations=!1,St&&St.disconnect()},se=!1,ce={i2svg:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(d){ee();var e=t.node,n=void 0===e?f:e,r=t.callback,i=void 0===r?function(){}:r;I.searchPseudoElements&&$t(n),Qt(n,i)}},css:Zt,insertCss:function(){se||(V(Zt()),se=!0)},watch:function(){var t,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.autoReplaceSvgRoot,r=e.observeMutationsRoot;!1===I.autoReplaceSvg&&(I.autoReplaceSvg=!0),I.observeMutations=!0,t=function(){me({autoReplaceSvgRoot:n}),function(t){if(p&&I.observeMutations){var e=t.treeCallback,n=t.nodeCallback,r=t.pseudoElementsCallback,i=t.observeMutationsRoot,a=void 0===i?f.body:i;St=new p(function(t){At||q(t).forEach(function(t){if("childList"===t.type&&t.addedNodes.length>0&&!_t(t.addedNodes[0])&&(I.searchPseudoElements&&r(t.target),e(t.target)),"attributes"===t.type&&t.target.parentNode&&I.searchPseudoElements&&r(t.target.parentNode),"attributes"===t.type&&_t(t.target)&&~A.indexOf(t.attributeName))if("class"===t.attributeName){var i=bt(U(t.target)),a=i.prefix,o=i.iconName;a&&t.target.setAttribute("data-prefix",a),o&&t.target.setAttribute("data-icon",o)}else n(t.target)})}),d&&St.observe(a,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}({treeCallback:Qt,nodeCallback:Jt,pseudoElementsCallback:$t,observeMutationsRoot:r})},d&&(X?setTimeout(t,0):F.push(t))}},ue={transform:function(t){return Nt(t)}},le=(ie=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.transform,r=void 0===n?B:n,i=e.symbol,a=void 0!==i&&i,o=e.mask,s=void 0===o?null:o,c=e.title,u=void 0===c?null:c,l=e.classes,f=void 0===l?[]:l,p=e.attributes,h=void 0===p?{}:p,d=e.styles,m=void 0===d?{}:d;if(t){var v=t.prefix,g=t.iconName,y=t.icon;return ne(z({type:"icon"},t),function(){return ee(),I.autoA11y&&(u?h["aria-labelledby"]=I.replacementClass+"-title-"+H():h["aria-hidden"]="true"),rt({icons:{main:te(y),mask:s?te(s.icon):{found:!1,width:null,height:null,icon:{}}},prefix:v,iconName:g,transform:z({},B,r),symbol:a,title:u,extra:{attributes:h,styles:m,classes:f}})})}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=(t||{}).icon?t:re(t||{}),r=e.mask;return r&&(r=(r||{}).icon?r:re(r||{})),ie(n,z({},e,{mask:r}))}),fe=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.transform,r=void 0===n?B:n,i=e.title,a=void 0===i?null:i,o=e.classes,s=void 0===o?[]:o,c=e.attributes,u=void 0===c?{}:c,l=e.styles,f=void 0===l?{}:l;return ne({type:"text",content:t},function(){return ee(),it({content:t,transform:z({},B,r),title:a,extra:{attributes:u,styles:f,classes:[I.familyPrefix+"-layers-text"].concat(M(s))}})})},pe=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.title,r=void 0===n?null:n,i=e.classes,a=void 0===i?[]:i,o=e.attributes,s=void 0===o?{}:o,c=e.styles,u=void 0===c?{}:c;return ne({type:"counter",content:t},function(){return ee(),function(t){var e=t.content,n=t.title,r=t.extra,i=z({},r.attributes,n?{title:n}:{},{class:r.classes.join(" ")}),a=G(r.styles);a.length>0&&(i.style=a);var o=[];return o.push({tag:"span",attributes:i,children:[e]}),n&&o.push({tag:"span",attributes:{class:"sr-only"},children:[n]}),o}({content:t.toString(),title:r,extra:{attributes:s,styles:u,classes:[I.familyPrefix+"-layers-counter"].concat(M(a))}})})},he=function(t){return ne({type:"layer"},function(){ee();var e=[];return t(function(t){Array.isArray(t)?t.map(function(t){e=e.concat(t.abstract)}):e=e.concat(t.abstract)}),[{tag:"span",attributes:{class:I.familyPrefix+"-layers"},children:e}]})},de={noAuto:oe,config:I,dom:ce,library:ae,parse:ue,findIconDefinition:re,icon:le,text:fe,counter:pe,layer:he,toHtml:kt},me=function(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{}).autoReplaceSvgRoot,e=void 0===t?f:t;Object.keys(R.styles).length>0&&d&&I.autoReplaceSvg&&de.dom.i2svg({node:e})}},DGaX:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{token:Laravel.csrfToken,errors:errors,url:url}}}},U0v6:function(t,e,n){(function(t){(function(e,n){"use strict";var r="undefined"!=typeof window?window:void 0!==t?t:"undefined"!=typeof self?self:{};var i,a=(function(t){var e,n,i,a,o,s,c,u,l,f,p,h,d,m,v;e=r,n=function(t,e,r){if(!u(e)||f(e)||p(e)||h(e)||c(e))return e;var i,a=0,o=0;if(l(e))for(i=[],o=e.length;a<o;a++)i.push(n(t,e[a],r));else for(var s in i={},e)Object.prototype.hasOwnProperty.call(e,s)&&(i[t(s,r)]=n(t,e[s],r));return i},i=function(t){return d(t)?t:(t=t.replace(/[\-_\s]+(.)?/g,function(t,e){return e?e.toUpperCase():""})).substr(0,1).toLowerCase()+t.substr(1)},a=function(t){var e=i(t);return e.substr(0,1).toUpperCase()+e.substr(1)},o=function(t,e){return function(t,e){var n=(e=e||{}).separator||"_",r=e.split||/(?=[A-Z])/;return t.split(r).join(n)}(t,e).toLowerCase()},s=Object.prototype.toString,c=function(t){return"function"==typeof t},u=function(t){return t===Object(t)},l=function(t){return"[object Array]"==s.call(t)},f=function(t){return"[object Date]"==s.call(t)},p=function(t){return"[object RegExp]"==s.call(t)},h=function(t){return"[object Boolean]"==s.call(t)},d=function(t){return(t-=0)==t},m=function(t,e){var n=e&&"process"in e?e.process:e;return"function"!=typeof n?t:function(e,r){return n(e,t,r)}},v={camelize:i,decamelize:o,pascalize:a,depascalize:o,camelizeKeys:function(t,e){return n(m(i,e),t)},decamelizeKeys:function(t,e){return n(m(o,e),t,e)},pascalizeKeys:function(t,e){return n(m(a,e),t)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}},t.exports?t.exports=v:e.humps=v}(i={exports:{}},i.exports),i.exports),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t},c=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},u=function(t,e){var n={};for(var r in t)e.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r]);return n};function l(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=(e.children||[]).map(l.bind(null,t)),o=Object.keys(e.attributes||{}).reduce(function(t,n){var r=e.attributes[n];switch(n){case"class":t.class=r.split(/\s+/).reduce(function(t,e){return t[e]=!0,t},{});break;case"style":t.style=r.split(";").map(function(t){return t.trim()}).filter(function(t){return t}).reduce(function(t,e){var n=e.indexOf(":"),r=a.camelize(e.slice(0,n)),i=e.slice(n+1).trim();return t[r]=i,t},{});break;default:t.attrs[n]=r}return t},{class:{},style:{},attrs:{}}),s=r.class,f=void 0===s?{}:s,p=r.style,h=void 0===p?{}:p,d=r.attrs,m=void 0===d?{}:d,v=u(r,["class","style","attrs"]);return"string"==typeof e?e:t(e.tag,c({class:function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return e.reduce(function(t,e){return Array.isArray(e)?t=t.concat(e):t.push(e),t},[])}(o.class,f),style:c({},o.style,h),attrs:c({},o.attrs,m)},v,{props:n}),i)}var f=!1;try{f=!0}catch(t){}function p(t,e){return Array.isArray(e)&&e.length>0||!Array.isArray(e)&&e?s({},t,e):{}}function h(t){return null===t?null:"object"===(void 0===t?"undefined":o(t))&&t.prefix&&t.iconName?t:Array.isArray(t)&&2===t.length?{prefix:t[0],iconName:t[1]}:"string"==typeof t?{prefix:"fas",iconName:t}:void 0}var d={name:"FontAwesomeIcon",functional:!0,props:{border:{type:Boolean,default:!1},fixedWidth:{type:Boolean,default:!1},flip:{type:String,default:null,validator:function(t){return["horizontal","vertical","both"].indexOf(t)>-1}},icon:{type:[Object,Array,String],required:!0},mask:{type:[Object,Array,String],default:null},listItem:{type:Boolean,default:!1},pull:{type:String,default:null,validator:function(t){return["right","left"].indexOf(t)>-1}},pulse:{type:Boolean,default:!1},rotation:{type:Number,default:null,validator:function(t){return[90,180,270].indexOf(t)>-1}},size:{type:String,default:null,validator:function(t){return["lg","xs","sm","1x","2x","3x","4x","5x","6x","7x","8x","9x","10x"].indexOf(t)>-1}},spin:{type:Boolean,default:!1},transform:{type:[String,Object],default:null},symbol:{type:[Boolean,String],default:!1}},render:function(t,e){var r=e.props,i=r.icon,a=r.mask,o=r.symbol,u=h(i),d=p("classes",function(t){var e,n=(e={"fa-spin":t.spin,"fa-pulse":t.pulse,"fa-fw":t.fixedWidth,"fa-border":t.border,"fa-li":t.listItem,"fa-flip-horizontal":"horizontal"===t.flip||"both"===t.flip,"fa-flip-vertical":"vertical"===t.flip||"both"===t.flip},s(e,"fa-"+t.size,null!==t.size),s(e,"fa-rotate-"+t.rotation,null!==t.rotation),s(e,"fa-pull-"+t.pull,null!==t.pull),e);return Object.keys(n).map(function(t){return n[t]?t:null}).filter(function(t){return t})}(r)),m=p("transform","string"==typeof r.transform?n.parse.transform(r.transform):r.transform),v=p("mask",h(a)),g=n.icon(u,c({},d,m,v,{symbol:o}));if(!g)return function(){var t;!f&&console&&"function"==typeof console.error&&(t=console).error.apply(t,arguments)}("Could not find one or more icon(s)",u,v);var y=g.abstract;return l.bind(null,t)(y[0],{},e.data)}},m={name:"FontAwesomeLayers",functional:!0,props:{fixedWidth:{type:Boolean,default:!1}},render:function(t,e){var r,i,a=n.config.familyPrefix,o=e.data.staticClass,s=[a+"-layers"].concat(function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(e.props.fixedWidth?[a+"-fw"]:[]));return t("div",c({},e.data,{staticClass:(r=o,i=s,(0===(r||"").length?[]:[r]).concat(i).join(" "))}),e.children)}},v={name:"FontAwesomeLayersText",functional:!0,props:{value:{type:[String,Number],default:""},transform:{type:[String,Object],default:null}},render:function(t,e){var r=e.props,i=p("transform","string"==typeof r.transform?n.parse.transform(r.transform):r.transform),a=n.text(r.value.toString(),c({},i)).abstract;return l.bind(null,t)(a[0],{},e.data)}};e.FontAwesomeIcon=d,e.FontAwesomeLayers=m,e.FontAwesomeLayersText=v,Object.defineProperty(e,"__esModule",{value:!0})})(e,n("C/JF"))}).call(e,n("DuR2"))},"VU/8":function(t,e){t.exports=function(t,e,n,r,i,a){var o,s=t=t||{},c=typeof t.default;"object"!==c&&"function"!==c||(o=t,s=t.default);var u,l="function"==typeof s?s.options:s;if(e&&(l.render=e.render,l.staticRenderFns=e.staticRenderFns,l._compiled=!0),n&&(l.functional=!0),i&&(l._scopeId=i),a?(u=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),r&&r.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},l._ssrRegister=u):r&&(u=r),u){var f=l.functional,p=f?l.render:l.beforeCreate;f?(l._injectStyles=u,l.render=function(t,e){return u.call(e),p(t,e)}):l.beforeCreate=p?[].concat(p,u):[u]}return{esModule:o,exports:s,options:l}}},WRGp:function(t,e,n){"use strict";var r=n("iuzX"),i=n.n(r),a=n("U0v6");n.n(a);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new i.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(t){return t?(t=t.toString(),window.location.protocol+"//"+window.location.host+"/"+t):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.Vue.filter("localize",function(t){return t?(t=t.toString(),window.lang[t]?window.lang[t]:t):""}),window.Vue.component("font-awesome-icon",a.FontAwesomeIcon),window.EventBus=new Vue},iuzX:function(t,e){!function(){function t(t){this.value=t}function e(e){var n,r;function i(n,r){try{var o=e[n](r),s=o.value;s instanceof t?Promise.resolve(s.value).then(function(t){i("next",t)},function(t){i("throw",t)}):a(o.done?"return":"normal",o.value)}catch(t){a("throw",t)}}function a(t,e){switch(t){case"return":n.resolve({value:e,done:!0});break;case"throw":n.reject(e);break;default:n.resolve({value:e,done:!1})}(n=n.next)?i(n.key,n.arg):r=null}this._invoke=function(t,e){return new Promise(function(a,o){var s={key:t,arg:e,resolve:a,reject:o,next:null};r?r=r.next=s:(n=r=s,i(t,e))})},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}();var n=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},a=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},s=function(){function t(e){n(this,t),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(e),this.connect()}return r(t,[{key:"setOptions",value:function(t){return this.options=i(this._defaultOptions,t),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),t}},{key:"csrfToken",value:function(){var t=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(t=document.querySelector('meta[name="csrf-token"]'))?t.getAttribute("content"):null}}]),t}(),c=function(){function t(){n(this,t)}return r(t,[{key:"notification",value:function(t){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",t)}},{key:"listenForWhisper",value:function(t,e){return this.listen(".client-"+t,e)}}]),t}(),u=function(){function t(e){n(this,t),this.setNamespace(e)}return r(t,[{key:"format",value:function(t){return"."===t.charAt(0)||"\\"===t.charAt(0)?t.substr(1):(this.namespace&&(t=this.namespace+"."+t),t.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(t){this.namespace=t}}]),t}(),l=function(t){function e(t,r,i){n(this,e);var a=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return a.name=r,a.pusher=t,a.options=i,a.eventFormatter=new u(a.options.namespace),a.subscribe(),a}return a(e,c),r(e,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"stopListening",value:function(t){return this.subscription.unbind(this.eventFormatter.format(t)),this}},{key:"on",value:function(t,e){return this.subscription.bind(t,e),this}}]),e}(),f=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,l),r(e,[{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,l),r(e,[{key:"here",value:function(t){return this.on("pusher:subscription_succeeded",function(e){t(Object.keys(e.members).map(function(t){return e.members[t]}))}),this}},{key:"joining",value:function(t){return this.on("pusher:member_added",function(e){t(e.info)}),this}},{key:"leaving",value:function(t){return this.on("pusher:member_removed",function(e){t(e.info)}),this}},{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),h=function(t){function e(t,r,i){n(this,e);var a=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return a.events={},a.name=r,a.socket=t,a.options=i,a.eventFormatter=new u(a.options.namespace),a.subscribe(),a.configureReconnector(),a}return a(e,c),r(e,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"on",value:function(t,e){var n=this,r=function(t,r){n.name==t&&e(r)};this.socket.on(t,r),this.bind(t,r)}},{key:"configureReconnector",value:function(){var t=this,e=function(){t.subscribe()};this.socket.on("reconnect",e),this.bind("reconnect",e)}},{key:"bind",value:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)}},{key:"unbind",value:function(){var t=this;Object.keys(this.events).forEach(function(e){t.events[e].forEach(function(n){t.socket.removeListener(e,n)}),delete t.events[e]})}}]),e}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,h),r(e,[{key:"whisper",value:function(t,e){return this.socket.emit("client event",{channel:this.name,event:"client-"+t,data:e}),this}}]),e}(),m=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return a(e,d),r(e,[{key:"here",value:function(t){return this.on("presence:subscribed",function(e){t(e.map(function(t){return t.user_info}))}),this}},{key:"joining",value:function(t){return this.on("presence:joining",function(e){return t(e.user_info)}),this}},{key:"leaving",value:function(t){return this.on("presence:leaving",function(e){return t(e.user_info)}),this}}]),e}(),v=function(t){function e(){var t;n(this,e);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];var s=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i)));return s.channels={},s}return a(e,s),r(e,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new l(this.pusher,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new f(this.pusher,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new p(this.pusher,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t,n){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),e}(),g=function(t){function e(){var t;n(this,e);for(var r=arguments.length,i=Array(r),a=0;a<r;a++)i[a]=arguments[a];var s=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(i)));return s.channels={},s}return a(e,s),r(e,[{key:"connect",value:function(){var t=this.getSocketIO();return this.socket=t(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new h(this.socket,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new d(this.socket,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new m(this.socket,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),e}(),y=function(){function t(e){n(this,t),this.options=e,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new v(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new g(this.options))}return r(t,[{key:"registerVueRequestInterceptor",value:function(){var t=this;Vue.http.interceptors.push(function(e,n){t.socketId()&&e.headers.set("X-Socket-ID",t.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var t=this;axios.interceptors.request.use(function(e){return t.socketId()&&(e.headers["X-Socket-Id"]=t.socketId()),e})}},{key:"registerjQueryAjaxSetup",value:function(){var t=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(e){t.socketId()&&e.setRequestHeader("X-Socket-Id",t.socketId())}})}},{key:"listen",value:function(t,e,n){return this.connector.listen(t,e,n)}},{key:"channel",value:function(t){return this.connector.channel(t)}},{key:"private",value:function(t){return this.connector.privateChannel(t)}},{key:"join",value:function(t){return this.connector.presenceChannel(t)}},{key:"leave",value:function(t){this.connector.leave(t)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),t}();t.exports=y},sStE:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});n("WRGp");var r=n("yzCX"),i=n.n(r);new Vue({el:"#app",components:{login:i.a}})},yzCX:function(t,e,n){var r=n("VU/8")(n("DGaX"),n("8zc/"),!1,null,null,null);t.exports=r.exports}},[0]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYXV0aC9sb2dpbi52dWU/OTEzMSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlL2luZGV4LmVzLmpzIiwid2VicGFjazovLy9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYXV0aC9sb2dpbi52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS92dWUtZm9udGF3ZXNvbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvYm9vdHN0cmFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sYXJhdmVsLWVjaG8vZGlzdC9lY2hvLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvYXV0aC9sb2dpbi5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYXV0aC9sb2dpbi52dWUiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlbmRlciIsIl92bSIsInRoaXMiLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiX20iLCJfdiIsImF0dHJzIiwicm9sZSIsIm1ldGhvZCIsImFjdGlvbiIsInVybCIsInR5cGUiLCJuYW1lIiwiZG9tUHJvcHMiLCJ2YWx1ZSIsInRva2VuIiwiaWQiLCJwbGFjZWhvbGRlciIsIl9zIiwiZXJyb3JzIiwiZW1haWwiLCJfZSIsInBhc3N3b3JkIiwiaHJlZiIsInN0YXRpY1JlbmRlckZucyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJkIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImZpbmRJY29uRGVmaW5pdGlvbiIsIm5vb3AiLCJfV0lORE9XIiwiX0RPQ1VNRU5UIiwiX01VVEFUSU9OX09CU0VSVkVSJDEiLCJfUEVSRk9STUFOQ0UiLCJtYXJrIiwibWVhc3VyZSIsIndpbmRvdyIsImRvY3VtZW50IiwiTXV0YXRpb25PYnNlcnZlciIsInBlcmZvcm1hbmNlIiwiZSIsIl9yZWYkdXNlckFnZW50IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidW5kZWZpbmVkIiwiV0lORE9XIiwiRE9DVU1FTlQiLCJNVVRBVElPTl9PQlNFUlZFUiIsIlBFUkZPUk1BTkNFIiwiSVNfRE9NIiwiZG9jdW1lbnRFbGVtZW50IiwiaGVhZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFbGVtZW50IiwiSVNfSUUiLCJpbmRleE9mIiwiVU5JVFNfSU5fR1JJRCIsIkRBVEFfRkFfSTJTVkciLCJEQVRBX0ZBX1BTRVVET19FTEVNRU5UIiwiREFUQV9QUkVGSVgiLCJEQVRBX0lDT04iLCJIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MiLCJUQUdOQU1FU19UT19TS0lQX0ZPUl9QU0VVRE9FTEVNRU5UUyIsIlBST0RVQ1RJT04iLCJvbmVUb1RlbiIsIm9uZVRvVHdlbnR5IiwiY29uY2F0IiwiQVRUUklCVVRFU19XQVRDSEVEX0ZPUl9NVVRBVElPTiIsIlJFU0VSVkVEX0NMQVNTRVMiLCJtYXAiLCJuIiwiY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiY3JlYXRlQ2xhc3MiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJzbGljZWRUb0FycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9pIiwibmV4dCIsImRvbmUiLCJwdXNoIiwiZXJyIiwic2xpY2VJdGVyYXRvciIsInRvQ29uc3VtYWJsZUFycmF5IiwiYXJyMiIsImZyb20iLCJpbml0aWFsIiwiRm9udEF3ZXNvbWVDb25maWciLCJxdWVyeVNlbGVjdG9yIiwiZm9yRWFjaCIsIl9yZWYiLCJfcmVmMiIsImF0dHIiLCJ2YWwiLCJjb2VyY2UiLCJlbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiZ2V0QXR0ckNvbmZpZyIsIl9kZWZhdWx0IiwiZmFtaWx5UHJlZml4IiwicmVwbGFjZW1lbnRDbGFzcyIsImF1dG9SZXBsYWNlU3ZnIiwiYXV0b0FkZENzcyIsImF1dG9BMTF5Iiwic2VhcmNoUHNldWRvRWxlbWVudHMiLCJvYnNlcnZlTXV0YXRpb25zIiwia2VlcE9yaWdpbmFsU291cmNlIiwibWVhc3VyZVBlcmZvcm1hbmNlIiwic2hvd01pc3NpbmdJY29ucyIsImNvbmZpZyIsInciLCJzdHlsZXMiLCJob29rcyIsInNoaW1zIiwibmFtZXNwYWNlIiwiZnVuY3Rpb25zIiwibG9hZGVkIiwiZG9TY3JvbGwiLCJ0ZXN0IiwicmVhZHlTdGF0ZSIsImxpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImZuIiwibWVhbmluZ2xlc3NUcmFuc2Zvcm0iLCJzaXplIiwieCIsInkiLCJyb3RhdGUiLCJmbGlwWCIsImZsaXBZIiwiaW5zZXJ0Q3NzIiwiY3NzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJpbm5lckhUTUwiLCJoZWFkQ2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwiYmVmb3JlQ2hpbGQiLCJjaGlsZCIsInRhZ05hbWUiLCJ0b1VwcGVyQ2FzZSIsImluc2VydEJlZm9yZSIsImlkUG9vbCIsIm5leHRVbmlxdWVJZCIsIk1hdGgiLCJyYW5kb20iLCJ0b0FycmF5Iiwib2JqIiwiYXJyYXkiLCJjbGFzc0FycmF5Iiwibm9kZSIsImNsYXNzTGlzdCIsInNwbGl0IiwiZmlsdGVyIiwiZ2V0SWNvbk5hbWUiLCJjbHMiLCJwYXJ0cyIsInByZWZpeCIsImljb25OYW1lIiwic2xpY2UiLCJqb2luIiwiaHRtbEVzY2FwZSIsInN0ciIsInJlcGxhY2UiLCJqb2luU3R5bGVzIiwia2V5cyIsInJlZHVjZSIsImFjYyIsInN0eWxlTmFtZSIsInRyYW5zZm9ybUlzTWVhbmluZ2Z1bCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybUZvclN2ZyIsImNvbnRhaW5lcldpZHRoIiwiaWNvbldpZHRoIiwib3V0ZXIiLCJpbm5lciIsInBhdGgiLCJBTExfU1BBQ0UiLCJ3aWR0aCIsImhlaWdodCIsIm1ha2VJY29uTWFza2luZyIsImNoaWxkcmVuIiwiYXR0cmlidXRlcyIsIm1haW4iLCJtYXNrIiwibWFpbldpZHRoIiwibWFpblBhdGgiLCJpY29uIiwibWFza1dpZHRoIiwibWFza1BhdGgiLCJ0cmFucyIsIm1hc2tSZWN0IiwidGFnIiwiZmlsbCIsIm1hc2tJbm5lckdyb3VwIiwibWFza091dGVyR3JvdXAiLCJtYXNrSWQiLCJjbGlwSWQiLCJkZWZzIiwibWFza1VuaXRzIiwibWFza0NvbnRlbnRVbml0cyIsImNsaXAtcGF0aCIsIm1ha2VJY29uU3RhbmRhcmQiLCJzdHlsZVN0cmluZyIsImFzSWNvbiIsImZvdW5kIiwib2Zmc2V0IiwidHJhbnNmb3JtLW9yaWdpbiIsImFzU3ltYm9sIiwic3ltYm9sIiwibWFrZUlubGluZVN2Z0Fic3RyYWN0IiwicGFyYW1zIiwiX3BhcmFtcyRpY29ucyIsImljb25zIiwidGl0bGUiLCJleHRyYSIsIl9wYXJhbXMkd2F0Y2hhYmxlIiwid2F0Y2hhYmxlIiwid2lkdGhDbGFzcyIsImNlaWwiLCJhdHRyQ2xhc3MiLCJjIiwiY2xhc3NlcyIsImNvbnRlbnQiLCJkYXRhLXByZWZpeCIsImRhdGEtaWNvbiIsImNsYXNzIiwieG1sbnMiLCJ2aWV3Qm94IiwiYXJncyIsIm1ha2VMYXllcnNUZXh0QWJzdHJhY3QiLCJfcGFyYW1zJHdhdGNoYWJsZTIiLCJfcmVmMiR3aWR0aCIsIl9yZWYyJGhlaWdodCIsIl9yZWYyJHN0YXJ0Q2VudGVyZWQiLCJzdGFydENlbnRlcmVkIiwidHJhbnNmb3JtRm9yQ3NzIiwibm9vcCQyIiwicCIsImVuZCIsInByZWFtYmxlIiwicGVyZiIsImJlZ2luIiwic3ViamVjdCIsImluaXRpYWxWYWx1ZSIsInRoaXNDb250ZXh0IiwicmVzdWx0IiwiZnVuYyIsImEiLCJiIiwiYmluZEludGVybmFsNCIsInN0eWxlcyQyIiwiX2J5VW5pY29kZSIsIl9ieUxpZ2F0dXJlIiwiX2J5T2xkTmFtZSIsImJ1aWxkIiwibG9va3VwIiwicmVkdWNlciIsIm8iLCJsaWdhdHVyZXMiLCJsaWdhdHVyZSIsImhhc1JlZ3VsYXIiLCJzaGltIiwib2xkTmFtZSIsImJ5VW5pY29kZSIsInVuaWNvZGUiLCJzdHlsZXMkMSIsImVtcHR5Q2Fub25pY2FsSWNvbiIsInJlc3QiLCJnZXRDYW5vbmljYWxJY29uIiwidmFsdWVzIiwiaWNvbkZyb21NYXBwaW5nIiwibWFwcGluZyIsInRvSHRtbCIsImFic3RyYWN0Tm9kZXMiLCJfYWJzdHJhY3ROb2RlcyRhdHRyaWIiLCJfYWJzdHJhY3ROb2RlcyRjaGlsZHIiLCJhdHRyaWJ1dGVOYW1lIiwidHJpbSIsImpvaW5BdHRyaWJ1dGVzIiwibm9vcCQxIiwiaXNXYXRjaGVkIiwibXV0YXRvcnMiLCJtdXRhdGlvbiIsIm5ld091dGVySFRNTCIsInBhcmVudE5vZGUiLCJvdXRlckhUTUwiLCJ0b0xvd2VyQ2FzZSIsIm5ld05vZGUiLCJyZXBsYWNlQ2hpbGQiLCJuZXN0IiwiYWJzdHJhY3QiLCJmb3JTdmciLCJSZWdFeHAiLCJzcGxpdENsYXNzZXMiLCJtYXRjaCIsInRvU3ZnIiwidG9Ob2RlIiwibmV3SW5uZXJIVE1MIiwicGVyZm9ybSIsIm11dGF0aW9ucyIsImNhbGxiYWNrIiwiY2FsbGJhY2tGdW5jdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9wIiwibXV0YXRvciIsImRpc2FibGVkIiwibW8iLCJzdHlsZVBhcnNlciIsInByb3AiLCJ0b0hleCIsImNoYXJDb2RlQXQiLCJ0b1N0cmluZyIsImNsYXNzUGFyc2VyIiwiZXhpc3RpbmdQcmVmaXgiLCJleGlzdGluZ0ljb25OYW1lIiwiaW5uZXJUZXh0IiwicGFyc2VUcmFuc2Zvcm1TdHJpbmciLCJ0cmFuc2Zvcm1TdHJpbmciLCJmaXJzdCIsInBhcnNlRmxvYXQiLCJpc05hTiIsInRyYW5zZm9ybVBhcnNlciIsInN5bWJvbFBhcnNlciIsImF0dHJpYnV0ZXNQYXJzZXIiLCJleHRyYUF0dHJpYnV0ZXMiLCJtYXNrUGFyc2VyIiwiYmxhbmtNZXRhIiwiTWlzc2luZ0ljb24iLCJlcnJvciIsIm1lc3NhZ2UiLCJzdGFjayIsIkVycm9yIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJGSUxMIiwiQU5JTUFUSU9OX0JBU0UiLCJhdHRyaWJ1dGVUeXBlIiwicmVwZWF0Q291bnQiLCJkdXIiLCJSSU5HIiwiT1BBQ0lUWV9BTklNQVRFIiwibWlzc2luZyIsImN4IiwiY3kiLCJyIiwib3BhY2l0eSIsIkxBWUVSU19URVhUX0NMQVNTTkFNRSIsIkZPTlRfRkFNSUxZX1BBVFRFUk4iLCJTVFlMRV9UT19QUkVGSVgiLCJTb2xpZCIsIlJlZ3VsYXIiLCJMaWdodCIsIkJyYW5kcyIsIkZPTlRfV0VJR0hUX1RPX1BSRUZJWCIsIjkwMCIsIjQwMCIsIjMwMCIsImZpbmRJY29uIiwiZ2VuZXJhdGVNdXRhdGlvbiIsIm5vZGVNZXRhIiwiX2NsYXNzUGFyc2VyIiwiZXh0cmFDbGFzc2VzIiwiZXh0cmFTdHlsZXMiLCJwYXJzZU1ldGEiLCJjb21wdXRlZEZvbnRTaXplIiwicGFyc2VJbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNpemUiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJnZW5lcmF0ZUxheWVyc1RleHQiLCJnZW5lcmF0ZVN2Z1JlcGxhY2VtZW50TXV0YXRpb24iLCJyb290IiwicXVlcnlTZWxlY3RvckFsbCIsInBvcyIsImFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50IiwiZm9udEZhbWlseSIsImdldFByb3BlcnR5VmFsdWUiLCJmb250V2VpZ2h0IiwicmVtb3ZlQ2hpbGQiLCJzdWJzdHIiLCJmaXJzdENoaWxkIiwiYXBwZW5kQ2hpbGQiLCJvcGVyYXRpb24iLCJvblRyZWUiLCJodG1sQ2xhc3NMaXN0IiwiaGNsQWRkIiwic3VmZml4IiwiYWRkIiwiaGNsUmVtb3ZlIiwicmVtb3ZlIiwicHJlZml4ZXMiLCJwcmVmaXhlc0RvbVF1ZXJ5IiwiY2FuZGlkYXRlcyIsImNvbnNvbGUiLCJvbk5vZGUiLCJkcmMiLCJmcCIsInJjIiwicyIsImRQYXR0IiwiclBhdHQiLCJwcmVwSWNvbiIsImVuc3VyZUNzcyIsIl9jc3NJbnNlcnRlZCIsImFwaU9iamVjdCIsImFic3RyYWN0Q3JlYXRvciIsImdldCIsImNvbnRhaW5lciIsImh0bWwiLCJfcGFyYW1zJHByZWZpeCIsImxpYnJhcnkiLCJkZWZpbml0aW9ucyIsIkxpYnJhcnkiLCJfdGhpcyIsIl9sZW4iLCJfa2V5IiwiYWRkaXRpb25zIiwiX3B1bGxEZWZpbml0aW9ucyIsImRlZmluZSIsIm5vcm1hbGl6ZWQiLCJhZGRQYWNrIiwiZGVmaW5pdGlvbiIsIjAiLCJfbm9ybWFsaXplZCRrZXkiLCJub0F1dG8iLCJkaXNjb25uZWN0IiwiZG9tIiwiaTJzdmciLCJfcGFyYW1zJG5vZGUiLCJfcGFyYW1zJGNhbGxiYWNrIiwid2F0Y2giLCJhdXRvUmVwbGFjZVN2Z1Jvb3QiLCJvYnNlcnZlTXV0YXRpb25zUm9vdCIsImF1dG9SZXBsYWNlIiwib3B0aW9ucyIsInRyZWVDYWxsYmFjayIsIm5vZGVDYWxsYmFjayIsInBzZXVkb0VsZW1lbnRzQ2FsbGJhY2siLCJfb3B0aW9ucyRvYnNlcnZlTXV0YXQiLCJib2R5Iiwib2JqZWN0cyIsIm11dGF0aW9uUmVjb3JkIiwiYWRkZWROb2RlcyIsIl9nZXRDYW5vbmljYWxJY29uIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwic2V0VGltZW91dCIsInBhcnNlIiwiaWNvbkRlZmluaXRpb24iLCJfcGFyYW1zJHRyYW5zZm9ybSIsIl9wYXJhbXMkc3ltYm9sIiwiX3BhcmFtcyRtYXNrIiwiX3BhcmFtcyR0aXRsZSIsIl9wYXJhbXMkY2xhc3NlcyIsIl9wYXJhbXMkYXR0cmlidXRlcyIsIl9wYXJhbXMkc3R5bGVzIiwibWF5YmVJY29uRGVmaW5pdGlvbiIsInRleHQiLCJfcGFyYW1zJHRyYW5zZm9ybTIiLCJfcGFyYW1zJHRpdGxlMiIsIl9wYXJhbXMkY2xhc3NlczIiLCJfcGFyYW1zJGF0dHJpYnV0ZXMyIiwiX3BhcmFtcyRzdHlsZXMyIiwiY291bnRlciIsIl9wYXJhbXMkdGl0bGUzIiwiX3BhcmFtcyRjbGFzc2VzMyIsIl9wYXJhbXMkYXR0cmlidXRlczMiLCJfcGFyYW1zJHN0eWxlczMiLCJtYWtlTGF5ZXJzQ291bnRlckFic3RyYWN0IiwibGF5ZXIiLCJhc3NlbWJsZXIiLCJhcGkiLCJfcGFyYW1zJGF1dG9SZXBsYWNlU3YiLCJjc3JmVG9rZW4iLCJnbG9iYWwiLCJmb250YXdlc29tZVN2Z0NvcmUiLCJjb21tb25qc0dsb2JhbCIsInNlbGYiLCJodW1wcyIsIl9wcm9jZXNzS2V5cyIsImNhbWVsaXplIiwicGFzY2FsaXplIiwiZGVjYW1lbGl6ZSIsIl9pc0Z1bmN0aW9uIiwiX2lzT2JqZWN0IiwiX2lzQXJyYXkiLCJfaXNEYXRlIiwiX2lzUmVnRXhwIiwiX2lzQm9vbGVhbiIsIl9pc051bWVyaWNhbCIsIl9wcm9jZXNzb3IiLCJjb252ZXJ0Iiwib3V0cHV0IiwibCIsInN0cmluZyIsImNociIsImNhbWVsaXplZCIsInNlcGFyYXRvciIsInNlcGFyYXRlV29yZHMiLCJwcm9jZXNzIiwiZGVwYXNjYWxpemUiLCJjYW1lbGl6ZUtleXMiLCJvYmplY3QiLCJkZWNhbWVsaXplS2V5cyIsInBhc2NhbGl6ZUtleXMiLCJkZXBhc2NhbGl6ZUtleXMiLCJhcHBseSIsIl90eXBlb2YiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsImgiLCJkYXRhIiwiYmluZCIsIm1peGlucyIsInBhaXIiLCJfZGF0YSRjbGFzcyIsImRDbGFzcyIsIl9kYXRhJHN0eWxlIiwiZFN0eWxlIiwiX2RhdGEkYXR0cnMiLCJkQXR0cnMiLCJyZW1haW5pbmdEYXRhIiwib2JqcyIsImNvbWJpbmVDbGFzc09iamVjdHMiLCJvYmplY3RXaXRoS2V5Iiwibm9ybWFsaXplSWNvbkFyZ3MiLCJGb250QXdlc29tZUljb24iLCJmdW5jdGlvbmFsIiwiYm9yZGVyIiwiQm9vbGVhbiIsImRlZmF1bHQiLCJmaXhlZFdpZHRoIiwiZmxpcCIsIlN0cmluZyIsInZhbGlkYXRvciIsInJlcXVpcmVkIiwibGlzdEl0ZW0iLCJwdWxsIiwicHVsc2UiLCJyb3RhdGlvbiIsIk51bWJlciIsInNwaW4iLCJjb250ZXh0IiwiaWNvbkFyZ3MiLCJtYXNrQXJncyIsIl9jbGFzc2VzIiwiZmEtc3BpbiIsImZhLXB1bHNlIiwiZmEtZnciLCJmYS1ib3JkZXIiLCJmYS1saSIsImZhLWZsaXAtaG9yaXpvbnRhbCIsImZhLWZsaXAtdmVydGljYWwiLCJyZW5kZXJlZEljb24iLCJfY29uc29sZSIsImxvZyIsImNvbnZlcnRDdXJyeSIsIkZvbnRBd2Vzb21lTGF5ZXJzIiwidG8iLCJ3aGF0IiwiRm9udEF3ZXNvbWVMYXllcnNUZXh0IiwiZmFjdG9yeSIsInJhd1NjcmlwdEV4cG9ydHMiLCJjb21waWxlZFRlbXBsYXRlIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJlc01vZHVsZSIsInNjcmlwdEV4cG9ydHMiLCJob29rIiwiX2NvbXBpbGVkIiwiX3Njb3BlSWQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiX2luamVjdFN0eWxlcyIsIlZ1ZSIsImF4aW9zIiwibHV4b24iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJYLUNTUkYtVE9LRU4iLCJMYXJhdmVsIiwiWC1SZXF1ZXN0ZWQtV2l0aCIsImlvIiwiRWNobyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9sYXJhdmVsX2VjaG9fX19kZWZhdWx0IiwiYnJvYWRjYXN0ZXIiLCJob3N0IiwibG9jYXRpb24iLCJob3N0bmFtZSIsIm1peGluIiwibWV0aG9kcyIsImdlbmVyYXRlVXJsIiwicHJvdG9jb2wiLCJsYW5nIiwiY29tcG9uZW50IiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19mb3J0YXdlc29tZV92dWVfZm9udGF3ZXNvbWVfXyIsIkV2ZW50QnVzIiwiQXdhaXRWYWx1ZSIsIkFzeW5jR2VuZXJhdG9yIiwiZ2VuIiwiZnJvbnQiLCJiYWNrIiwicmVzdW1lIiwiYXJnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwic2V0dGxlIiwicmVqZWN0IiwiX2ludm9rZSIsInJlcXVlc3QiLCJyZXR1cm4iLCJhc3luY0l0ZXJhdG9yIiwidGhyb3ciLCJpbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIlJlZmVyZW5jZUVycm9yIiwiQ29ubmVjdG9yIiwiX2RlZmF1bHRPcHRpb25zIiwiYXV0aCIsImF1dGhFbmRwb2ludCIsInNldE9wdGlvbnMiLCJjb25uZWN0Iiwic2VsZWN0b3IiLCJDaGFubmVsIiwibGlzdGVuIiwiZXZlbnQiLCJFdmVudEZvcm1hdHRlciIsInNldE5hbWVzcGFjZSIsImNoYXJBdCIsIlB1c2hlckNoYW5uZWwiLCJfQ2hhbm5lbCIsInB1c2hlciIsImdldFByb3RvdHlwZU9mIiwiZXZlbnRGb3JtYXR0ZXIiLCJzdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJ1bnN1YnNjcmliZSIsIm9uIiwiZm9ybWF0IiwidW5iaW5kIiwiUHVzaGVyUHJpdmF0ZUNoYW5uZWwiLCJfUHVzaGVyQ2hhbm5lbCIsImV2ZW50TmFtZSIsImNoYW5uZWxzIiwidHJpZ2dlciIsIlB1c2hlclByZXNlbmNlQ2hhbm5lbCIsIm1lbWJlcnMiLCJrIiwibWVtYmVyIiwiaW5mbyIsIlNvY2tldElvQ2hhbm5lbCIsInNvY2tldCIsImV2ZW50cyIsImNvbmZpZ3VyZVJlY29ubmVjdG9yIiwiZW1pdCIsImNoYW5uZWwiLCJfdGhpczIiLCJfdGhpczMiLCJfdGhpczQiLCJyZW1vdmVMaXN0ZW5lciIsIlNvY2tldElvUHJpdmF0ZUNoYW5uZWwiLCJfU29ja2V0SW9DaGFubmVsIiwiU29ja2V0SW9QcmVzZW5jZUNoYW5uZWwiLCJfU29ja2V0SW9Qcml2YXRlQ2hhbm4iLCJtIiwidXNlcl9pbmZvIiwiUHVzaGVyQ29ubmVjdG9yIiwiX0Nvbm5lY3RvciIsIlB1c2hlciIsImluZGV4IiwiY29ubmVjdGlvbiIsInNvY2tldF9pZCIsIlNvY2tldElvQ29ubmVjdG9yIiwiZ2V0U29ja2V0SU8iLCJjbGllbnQiLCJodHRwIiwicmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3IiLCJyZWdpc3RlckF4aW9zUmVxdWVzdEludGVyY2VwdG9yIiwialF1ZXJ5IiwicmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAiLCJjb25uZWN0b3IiLCJpbnRlcmNlcHRvcnMiLCJzb2NrZXRJZCIsInNldCIsInVzZSIsImFqYXgiLCJhamF4U2V0dXAiLCJiZWZvcmVTZW5kIiwieGhyIiwic2V0UmVxdWVzdEhlYWRlciIsIl9jaGFubmVsIiwicHJpdmF0ZUNoYW5uZWwiLCJwcmVzZW5jZUNoYW5uZWwiLCJsZWF2ZSIsImVsIiwiY29tcG9uZW50cyIsImxvZ2luIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19jb21wb25lbnRzX2F1dGhfbG9naW5fdnVlX19fZGVmYXVsdCIsIkNvbXBvbmVudCIsIm5vcm1hbGl6ZUNvbXBvbmVudCJdLCJtYXBw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Q0F6RSxNQUFBLFdBQ0EsSUFBQWlyQixFQUFBanNCLFVBRUEsSUFBQXN0QixPQUFBTyxNQUNBUCxPQUFBUSxXQUNBQyxXQUFBLFNBQUFDLEdBQ0EvQixFQUFBeUIsWUFDQU0sRUFBQUMsaUJBQUEsY0FBQWhDLEVBQUF5QixrQkFPQWpvQixJQUFBLFNBQ0F6RSxNQUFBLFNBQUErcUIsRUFBQTlCLEVBQUFyVixHQUNBLE9BQUE1VSxLQUFBd3RCLFVBQUF4RCxPQUFBK0IsRUFBQTlCLEVBQUFyVixNQUdBblAsSUFBQSxVQUNBekUsTUFBQSxTQUFBa3RCLEdBQ0EsT0FBQWx1QixLQUFBd3RCLFVBQUF6QixRQUFBbUMsTUFHQXpvQixJQUFBLFVBQ0F6RSxNQUFBLFNBQUErcUIsR0FDQSxPQUFBL3JCLEtBQUF3dEIsVUFBQVcsZUFBQXBDLE1BR0F0bUIsSUFBQSxPQUNBekUsTUFBQSxTQUFBK3FCLEdBQ0EsT0FBQS9yQixLQUFBd3RCLFVBQUFZLGdCQUFBckMsTUFHQXRtQixJQUFBLFFBQ0F6RSxNQUFBLFNBQUErcUIsR0FDQS9yQixLQUFBd3RCLFVBQUFhLE1BQUF0QyxNQUdBdG1CLElBQUEsV0FDQXpFLE1BQUEsV0FDQSxPQUFBaEIsS0FBQXd0QixVQUFBRSxjQUdBam9CLElBQUEsYUFDQXpFLE1BQUEsV0FDQWhCLEtBQUF3dEIsVUFBQTlRLGlCQUdBd0ssRUFoR0EsR0FtR0F0bkIsRUFBQUMsUUFBQXFuQix5SENweEJZLElBQUlWLEtBQ2Q4SCxHQUFJLE9BQ0pDLFlBQ0VDLE1BQUFDLEVBQUFsZCwyQkNQSixJQWFBbWQsRUFiQS9zQixFQUFBLE9BYUFndEIsQ0FYQWh0QixFQUFBLFFBRUFBLEVBQUEsU0FFQSxFQUVBLEtBRUEsS0FFQSxNQVVBL0IsRUFBQUMsUUFBQTZ1QixFQUFBN3VCIiwiZmlsZSI6Ii9qcy9hdXRoL2xvZ2luLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwiYmctd2hpdGUgY29udGFpbmVyIG14LTQgbWQ6bXgtYXV0byBzaGFkb3ctbGcgbXQtMzIgZmxleCBmbGV4LXJvdyBtZDp3LTMvNSB4eGw6dy0yLzUganVzdGlmeS1iZXR3ZWVuXCJ9LFtfdm0uX20oMCksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7fSksX3ZtLl92KFwiIFwiKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6XCJ3LWZ1bGwgbWQ6dy0xLzIgcC04XCJ9LFtfYygnZm9ybScse2F0dHJzOntcInJvbGVcIjpcImZvcm1cIixcIm1ldGhvZFwiOlwiUE9TVFwiLFwiYWN0aW9uXCI6X3ZtLnVybH19LFtfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJoaWRkZW5cIixcIm5hbWVcIjpcIl90b2tlblwifSxkb21Qcm9wczp7XCJ2YWx1ZVwiOl92bS50b2tlbn19KSxfdm0uX3YoXCIgXCIpLF9jKCdwJyx7c3RhdGljQ2xhc3M6XCJweS00XCJ9LFtfYygnaW5wdXQnLHtzdGF0aWNDbGFzczpcInNoYWRvdyBhcHBlYXJhbmNlLW5vbmUgYm9yZGVyIHJvdW5kZWQgdy1mdWxsIHB5LTIgcHgtMyB0ZXh0LWdyZXktZGFya2VyXCIsYXR0cnM6e1wiaWRcIjpcImVtYWlsXCIsXCJ0eXBlXCI6XCJ0ZXh0XCIsXCJuYW1lXCI6XCJlbWFpbFwiLFwicGxhY2Vob2xkZXJcIjpcIkUtbWFpbFwifX0pLF92bS5fdihcIiBcIiksKF92bS5lcnJvcnMpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6XCJ0ZXh0LXJlZC1saWdodCBibG9jayBwdC0yXCJ9LFtfdm0uX3YoX3ZtLl9zKF92bS5lcnJvcnMuZW1haWwpKV0pOl92bS5fZSgpXSksX3ZtLl92KFwiIFwiKSxfYygncCcse3N0YXRpY0NsYXNzOlwicHktNFwifSxbX2MoJ2lucHV0Jyx7c3RhdGljQ2xhc3M6XCJzaGFkb3cgYXBwZWFyYW5jZS1ub25lIGJvcmRlciByb3VuZGVkIHctZnVsbCBweS0yIHB4LTMgdGV4dC1ncmV5LWRhcmtlclwiLGF0dHJzOntcImlkXCI6XCJwYXNzd29yZFwiLFwidHlwZVwiOlwicGFzc3dvcmRcIixcIm5hbWVcIjpcInBhc3N3b3JkXCIsXCJwbGFjZWhvbGRlclwiOlwiUGFzc3dvcmRcIn19KSxfdm0uX3YoXCIgXCIpLChfdm0uZXJyb3JzKT9fYygnc3Bhbicse3N0YXRpY0NsYXNzOlwidGV4dC1yZWQtbGlnaHQgYmxvY2sgcHQtMlwifSxbX3ZtLl92KF92bS5fcyhfdm0uZXJyb3JzLnBhc3N3b3JkKSldKTpfdm0uX2UoKV0pLF92bS5fdihcIiBcIiksX3ZtLl9tKDEpLF92bS5fdihcIiBcIiksX3ZtLl9tKDIpLF92bS5fdihcIiBcIiksX2MoJ2EnLHtzdGF0aWNDbGFzczpcIm5vLXVuZGVybGluZSB0ZXh0LXRlYWwgdGV4dC1zbVwiLGF0dHJzOntcImhyZWZcIjpcInBhc3N3b3JkL3Jlc2V0XCJ9fSxbX3ZtLl92KFwiRm9yZ290IFlvdXIgUGFzc3dvcmQ/XCIpXSldKV0pXSl9XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW2Z1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ2Rpdicse3N0YXRpY0NsYXNzOlwidy0xLzIgdGV4dC1jZW50ZXIgYmctdGVhbC1saWdodCBwLTQgaGlkZGVuIG1kOmJsb2NrXCJ9LFtfYygncCcse3N0YXRpY0NsYXNzOlwidGV4dC13aGl0ZSBmb250LWJvbGQgdGV4dC00eGwgcHQtOCBtdC04XCJ9LFtfdm0uX3YoXCJHT09EV09SS1wiKV0pLF92bS5fdihcIiBcIiksX2MoJ3AnLHtzdGF0aWNDbGFzczpcInRleHQtd2hpdGUgdGV4dC14bCBwdC00XCJ9LFtfdm0uX3YoXCJTYW5lIHdheSB0byBtYW5hZ2Ugd29ya1wiKV0pXSl9LGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ3AnLHtzdGF0aWNDbGFzczpcInB5LTQgdGV4dC1ncmV5XCJ9LFtfYygnaW5wdXQnLHthdHRyczp7XCJ0eXBlXCI6XCJjaGVja2JveFwiLFwibmFtZVwiOlwicmVtZW1iZXJcIn19KSxfdm0uX3YoXCJcXG4gICAgICAgICAgICAgICAgUmVtZW1iZXIgTWVcXG4gICAgICAgICAgICBcIildKX0sZnVuY3Rpb24gKCkge3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO3JldHVybiBfYygncCcse3N0YXRpY0NsYXNzOlwicHktNFwifSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOlwiYnRuXCIsYXR0cnM6e1widHlwZVwiOlwic3VibWl0XCJ9fSxbX3ZtLl92KFwiTE9HSU5cIildKV0pfV1cbm1vZHVsZS5leHBvcnRzID0geyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyP3tcImlkXCI6XCJkYXRhLXYtODU5YzY3NThcIixcImhhc1Njb3BlZFwiOmZhbHNlLFwiYnVibGVcIjp7XCJ0cmFuc2Zvcm1zXCI6e319fSEuL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYXV0aC9sb2dpbi52dWVcbi8vIG1vZHVsZSBpZCA9IDh6Yy9cbi8vIG1vZHVsZSBjaHVua3MgPSA4IiwiLyohXG4gKiBGb250IEF3ZXNvbWUgRnJlZSA1LjQuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbVxuICogTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UvZnJlZSAoSWNvbnM6IENDIEJZIDQuMCwgRm9udHM6IFNJTCBPRkwgMS4xLCBDb2RlOiBNSVQgTGljZW5zZSlcbiAqL1xudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbnZhciBfV0lORE9XID0ge307XG52YXIgX0RPQ1VNRU5UID0ge307XG52YXIgX01VVEFUSU9OX09CU0VSVkVSJDEgPSBudWxsO1xudmFyIF9QRVJGT1JNQU5DRSA9IHsgbWFyazogbm9vcCwgbWVhc3VyZTogbm9vcCB9O1xuXG50cnkge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIF9XSU5ET1cgPSB3aW5kb3c7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSBfRE9DVU1FTlQgPSBkb2N1bWVudDtcbiAgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJykgX01VVEFUSU9OX09CU0VSVkVSJDEgPSBNdXRhdGlvbk9ic2VydmVyO1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJykgX1BFUkZPUk1BTkNFID0gcGVyZm9ybWFuY2U7XG59IGNhdGNoIChlKSB7fVxuXG52YXIgX3JlZiA9IF9XSU5ET1cubmF2aWdhdG9yIHx8IHt9O1xudmFyIF9yZWYkdXNlckFnZW50ID0gX3JlZi51c2VyQWdlbnQ7XG52YXIgdXNlckFnZW50ID0gX3JlZiR1c2VyQWdlbnQgPT09IHVuZGVmaW5lZCA/ICcnIDogX3JlZiR1c2VyQWdlbnQ7XG5cbnZhciBXSU5ET1cgPSBfV0lORE9XO1xudmFyIERPQ1VNRU5UID0gX0RPQ1VNRU5UO1xudmFyIE1VVEFUSU9OX09CU0VSVkVSID0gX01VVEFUSU9OX09CU0VSVkVSJDE7XG52YXIgUEVSRk9STUFOQ0UgPSBfUEVSRk9STUFOQ0U7XG5cbnZhciBJU19ET00gPSAhIURPQ1VNRU5ULmRvY3VtZW50RWxlbWVudCAmJiAhIURPQ1VNRU5ULmhlYWQgJiYgdHlwZW9mIERPQ1VNRU5ULmFkZEV2ZW50TGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQgPT09ICdmdW5jdGlvbic7XG52YXIgSVNfSUUgPSB+dXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSB8fCB+dXNlckFnZW50LmluZGV4T2YoJ1RyaWRlbnQvJyk7XG5cbnZhciBOQU1FU1BBQ0VfSURFTlRJRklFUiA9ICdfX19GT05UX0FXRVNPTUVfX18nO1xudmFyIFVOSVRTX0lOX0dSSUQgPSAxNjtcbnZhciBERUZBVUxUX0ZBTUlMWV9QUkVGSVggPSAnZmEnO1xudmFyIERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1MgPSAnc3ZnLWlubGluZS0tZmEnO1xudmFyIERBVEFfRkFfSTJTVkcgPSAnZGF0YS1mYS1pMnN2Zyc7XG52YXIgREFUQV9GQV9QU0VVRE9fRUxFTUVOVCA9ICdkYXRhLWZhLXBzZXVkby1lbGVtZW50JztcbnZhciBEQVRBX1BSRUZJWCA9ICdkYXRhLXByZWZpeCc7XG52YXIgREFUQV9JQ09OID0gJ2RhdGEtaWNvbic7XG52YXIgSFRNTF9DTEFTU19JMlNWR19CQVNFX0NMQVNTID0gJ2ZvbnRhd2Vzb21lLWkyc3ZnJztcbnZhciBUQUdOQU1FU19UT19TS0lQX0ZPUl9QU0VVRE9FTEVNRU5UUyA9IFsnSFRNTCcsICdIRUFEJywgJ1NUWUxFJywgJ1NDUklQVCddO1xudmFyIFBST0RVQ1RJT04gPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn0oKTtcblxudmFyIG9uZVRvVGVuID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbnZhciBvbmVUb1R3ZW50eSA9IG9uZVRvVGVuLmNvbmNhdChbMTEsIDEyLCAxMywgMTQsIDE1LCAxNiwgMTcsIDE4LCAxOSwgMjBdKTtcblxudmFyIEFUVFJJQlVURVNfV0FUQ0hFRF9GT1JfTVVUQVRJT04gPSBbJ2NsYXNzJywgJ2RhdGEtcHJlZml4JywgJ2RhdGEtaWNvbicsICdkYXRhLWZhLXRyYW5zZm9ybScsICdkYXRhLWZhLW1hc2snXTtcblxudmFyIFJFU0VSVkVEX0NMQVNTRVMgPSBbJ3hzJywgJ3NtJywgJ2xnJywgJ2Z3JywgJ3VsJywgJ2xpJywgJ2JvcmRlcicsICdwdWxsLWxlZnQnLCAncHVsbC1yaWdodCcsICdzcGluJywgJ3B1bHNlJywgJ3JvdGF0ZS05MCcsICdyb3RhdGUtMTgwJywgJ3JvdGF0ZS0yNzAnLCAnZmxpcC1ob3Jpem9udGFsJywgJ2ZsaXAtdmVydGljYWwnLCAnc3RhY2snLCAnc3RhY2stMXgnLCAnc3RhY2stMngnLCAnaW52ZXJzZScsICdsYXllcnMnLCAnbGF5ZXJzLXRleHQnLCAnbGF5ZXJzLWNvdW50ZXInXS5jb25jYXQob25lVG9UZW4ubWFwKGZ1bmN0aW9uIChuKSB7XG4gIHJldHVybiBuICsgJ3gnO1xufSkpLmNvbmNhdChvbmVUb1R3ZW50eS5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuICd3LScgKyBuO1xufSkpO1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cblxuXG52YXIgc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHtcbiAgICB2YXIgX2FyciA9IFtdO1xuICAgIHZhciBfbiA9IHRydWU7XG4gICAgdmFyIF9kID0gZmFsc2U7XG4gICAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcblxuICAgICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9IHRydWU7XG4gICAgICBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIHJldHVybiBhcnI7XG4gICAgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHtcbiAgICAgIHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xuICAgIH1cbiAgfTtcbn0oKTtcblxudmFyIHRvQ29uc3VtYWJsZUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGFycik7XG4gIH1cbn07XG5cbnZhciBpbml0aWFsID0gV0lORE9XLkZvbnRBd2Vzb21lQ29uZmlnIHx8IHt9O1xuXG5mdW5jdGlvbiBnZXRBdHRyQ29uZmlnKGF0dHIpIHtcbiAgdmFyIGVsZW1lbnQgPSBET0NVTUVOVC5xdWVyeVNlbGVjdG9yKCdzY3JpcHRbJyArIGF0dHIgKyAnXScpO1xuXG4gIGlmIChlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKGF0dHIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgLy8gR2V0dGluZyBhbiBlbXB0eSBzdHJpbmcgd2lsbCBvY2N1ciBpZiB0aGUgYXR0cmlidXRlIGlzIHNldCBvbiB0aGUgSFRNTCB0YWcgYnV0IHdpdGhvdXQgYSB2YWx1ZVxuICAvLyBXZSdsbCBhc3N1bWUgdGhhdCB0aGlzIGlzIGFuIGluZGljYXRpb24gdGhhdCBpdCBzaG91bGQgYmUgdG9nZ2xlZCB0byB0cnVlXG4gIC8vIEZvciBleGFtcGxlIDxzY3JpcHQgZGF0YS1zZWFyY2gtcHNldWRvLWVsZW1lbnRzIHNyYz1cIi4uLlwiPjwvc2NyaXB0PlxuICBpZiAodmFsID09PSAnJykgcmV0dXJuIHRydWU7XG4gIGlmICh2YWwgPT09ICdmYWxzZScpIHJldHVybiBmYWxzZTtcbiAgaWYgKHZhbCA9PT0gJ3RydWUnKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIHZhbDtcbn1cblxuaWYgKERPQ1VNRU5UICYmIHR5cGVvZiBET0NVTUVOVC5xdWVyeVNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gIHZhciBhdHRycyA9IFtbJ2RhdGEtZmFtaWx5LXByZWZpeCcsICdmYW1pbHlQcmVmaXgnXSwgWydkYXRhLXJlcGxhY2VtZW50LWNsYXNzJywgJ3JlcGxhY2VtZW50Q2xhc3MnXSwgWydkYXRhLWF1dG8tcmVwbGFjZS1zdmcnLCAnYXV0b1JlcGxhY2VTdmcnXSwgWydkYXRhLWF1dG8tYWRkLWNzcycsICdhdXRvQWRkQ3NzJ10sIFsnZGF0YS1hdXRvLWExMXknLCAnYXV0b0ExMXknXSwgWydkYXRhLXNlYXJjaC1wc2V1ZG8tZWxlbWVudHMnLCAnc2VhcmNoUHNldWRvRWxlbWVudHMnXSwgWydkYXRhLW9ic2VydmUtbXV0YXRpb25zJywgJ29ic2VydmVNdXRhdGlvbnMnXSwgWydkYXRhLWtlZXAtb3JpZ2luYWwtc291cmNlJywgJ2tlZXBPcmlnaW5hbFNvdXJjZSddLCBbJ2RhdGEtbWVhc3VyZS1wZXJmb3JtYW5jZScsICdtZWFzdXJlUGVyZm9ybWFuY2UnXSwgWydkYXRhLXNob3ctbWlzc2luZy1pY29ucycsICdzaG93TWlzc2luZ0ljb25zJ11dO1xuXG4gIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgX3JlZjIgPSBzbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICBhdHRyID0gX3JlZjJbMF0sXG4gICAgICAgIGtleSA9IF9yZWYyWzFdO1xuXG4gICAgdmFyIHZhbCA9IGNvZXJjZShnZXRBdHRyQ29uZmlnKGF0dHIpKTtcblxuICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwpIHtcbiAgICAgIGluaXRpYWxba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgX2RlZmF1bHQgPSBfZXh0ZW5kcyh7XG4gIGZhbWlseVByZWZpeDogREVGQVVMVF9GQU1JTFlfUFJFRklYLFxuICByZXBsYWNlbWVudENsYXNzOiBERUZBVUxUX1JFUExBQ0VNRU5UX0NMQVNTLFxuICBhdXRvUmVwbGFjZVN2ZzogdHJ1ZSxcbiAgYXV0b0FkZENzczogdHJ1ZSxcbiAgYXV0b0ExMXk6IHRydWUsXG4gIHNlYXJjaFBzZXVkb0VsZW1lbnRzOiBmYWxzZSxcbiAgb2JzZXJ2ZU11dGF0aW9uczogdHJ1ZSxcbiAga2VlcE9yaWdpbmFsU291cmNlOiB0cnVlLFxuICBtZWFzdXJlUGVyZm9ybWFuY2U6IGZhbHNlLFxuICBzaG93TWlzc2luZ0ljb25zOiB0cnVlXG59LCBpbml0aWFsKTtcblxuaWYgKCFfZGVmYXVsdC5hdXRvUmVwbGFjZVN2ZykgX2RlZmF1bHQub2JzZXJ2ZU11dGF0aW9ucyA9IGZhbHNlO1xuXG52YXIgY29uZmlnID0gX2V4dGVuZHMoe30sIF9kZWZhdWx0KTtcblxuV0lORE9XLkZvbnRBd2Vzb21lQ29uZmlnID0gY29uZmlnO1xuXG52YXIgdyA9IFdJTkRPVyB8fCB7fTtcblxuaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXSkgd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0gPSB7fTtcbmlmICghd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uc3R5bGVzKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zdHlsZXMgPSB7fTtcbmlmICghd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0uaG9va3MpIHdbTkFNRVNQQUNFX0lERU5USUZJRVJdLmhvb2tzID0ge307XG5pZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnNoaW1zKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zaGltcyA9IFtdO1xuXG52YXIgbmFtZXNwYWNlID0gd1tOQU1FU1BBQ0VfSURFTlRJRklFUl07XG5cbnZhciBmdW5jdGlvbnMgPSBbXTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICBET0NVTUVOVC5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbGlzdGVuZXIpO1xuICBsb2FkZWQgPSAxO1xuICBmdW5jdGlvbnMubWFwKGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmbigpO1xuICB9KTtcbn07XG5cbnZhciBsb2FkZWQgPSBmYWxzZTtcblxuaWYgKElTX0RPTSkge1xuICBsb2FkZWQgPSAoRE9DVU1FTlQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsID8gL15sb2FkZWR8XmMvIDogL15sb2FkZWR8Xml8XmMvKS50ZXN0KERPQ1VNRU5ULnJlYWR5U3RhdGUpO1xuXG4gIGlmICghbG9hZGVkKSBET0NVTUVOVC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbGlzdGVuZXIpO1xufVxuXG52YXIgZG9tcmVhZHkgPSBmdW5jdGlvbiAoZm4pIHtcbiAgaWYgKCFJU19ET00pIHJldHVybjtcbiAgbG9hZGVkID8gc2V0VGltZW91dChmbiwgMCkgOiBmdW5jdGlvbnMucHVzaChmbik7XG59O1xuXG52YXIgZCA9IFVOSVRTX0lOX0dSSUQ7XG5cbnZhciBtZWFuaW5nbGVzc1RyYW5zZm9ybSA9IHtcbiAgc2l6ZTogMTYsXG4gIHg6IDAsXG4gIHk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgZmxpcFg6IGZhbHNlLFxuICBmbGlwWTogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQobmFtZSkge1xuICByZXR1cm4gflJFU0VSVkVEX0NMQVNTRVMuaW5kZXhPZihuYW1lKTtcbn1cblxuXG5cbmZ1bmN0aW9uIGluc2VydENzcyhjc3MpIHtcbiAgaWYgKCFjc3MgfHwgIUlTX0RPTSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHN0eWxlLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7XG5cbiAgdmFyIGhlYWRDaGlsZHJlbiA9IERPQ1VNRU5ULmhlYWQuY2hpbGROb2RlcztcbiAgdmFyIGJlZm9yZUNoaWxkID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gaGVhZENoaWxkcmVuLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgdmFyIGNoaWxkID0gaGVhZENoaWxkcmVuW2ldO1xuICAgIHZhciB0YWdOYW1lID0gKGNoaWxkLnRhZ05hbWUgfHwgJycpLnRvVXBwZXJDYXNlKCk7XG4gICAgaWYgKFsnU1RZTEUnLCAnTElOSyddLmluZGV4T2YodGFnTmFtZSkgPiAtMSkge1xuICAgICAgYmVmb3JlQ2hpbGQgPSBjaGlsZDtcbiAgICB9XG4gIH1cblxuICBET0NVTUVOVC5oZWFkLmluc2VydEJlZm9yZShzdHlsZSwgYmVmb3JlQ2hpbGQpO1xuXG4gIHJldHVybiBjc3M7XG59XG5cbnZhciBpZFBvb2wgPSAnMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuXG5mdW5jdGlvbiBuZXh0VW5pcXVlSWQoKSB7XG4gIHZhciBzaXplID0gMTI7XG4gIHZhciBpZCA9ICcnO1xuICB3aGlsZSAoc2l6ZS0tID4gMCkge1xuICAgIGlkICs9IGlkUG9vbFtNYXRoLnJhbmRvbSgpICogNjIgfCAwXTtcbiAgfVxuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAob2JqIHx8IFtdKS5sZW5ndGggPj4+IDA7IGktLTspIHtcbiAgICBhcnJheVtpXSA9IG9ialtpXTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gY2xhc3NBcnJheShub2RlKSB7XG4gIGlmIChub2RlLmNsYXNzTGlzdCkge1xuICAgIHJldHVybiB0b0FycmF5KG5vZGUuY2xhc3NMaXN0KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SWNvbk5hbWUoZmFtaWx5UHJlZml4LCBjbHMpIHtcbiAgdmFyIHBhcnRzID0gY2xzLnNwbGl0KCctJyk7XG4gIHZhciBwcmVmaXggPSBwYXJ0c1swXTtcbiAgdmFyIGljb25OYW1lID0gcGFydHMuc2xpY2UoMSkuam9pbignLScpO1xuXG4gIGlmIChwcmVmaXggPT09IGZhbWlseVByZWZpeCAmJiBpY29uTmFtZSAhPT0gJycgJiYgIWlzUmVzZXJ2ZWQoaWNvbk5hbWUpKSB7XG4gICAgcmV0dXJuIGljb25OYW1lO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGh0bWxFc2NhcGUoc3RyKSB7XG4gIHJldHVybiAoJycgKyBzdHIpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyYjMzk7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbn1cblxuZnVuY3Rpb24gam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cmlidXRlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGF0dHJpYnV0ZU5hbWUpIHtcbiAgICByZXR1cm4gYWNjICsgKGF0dHJpYnV0ZU5hbWUgKyAnPVwiJyArIGh0bWxFc2NhcGUoYXR0cmlidXRlc1thdHRyaWJ1dGVOYW1lXSkgKyAnXCIgJyk7XG4gIH0sICcnKS50cmltKCk7XG59XG5cbmZ1bmN0aW9uIGpvaW5TdHlsZXMoc3R5bGVzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZU5hbWUpIHtcbiAgICByZXR1cm4gYWNjICsgKHN0eWxlTmFtZSArICc6ICcgKyBzdHlsZXNbc3R5bGVOYW1lXSArICc7Jyk7XG4gIH0sICcnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtSXNNZWFuaW5nZnVsKHRyYW5zZm9ybSkge1xuICByZXR1cm4gdHJhbnNmb3JtLnNpemUgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnNpemUgfHwgdHJhbnNmb3JtLnggIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnggfHwgdHJhbnNmb3JtLnkgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnkgfHwgdHJhbnNmb3JtLnJvdGF0ZSAhPT0gbWVhbmluZ2xlc3NUcmFuc2Zvcm0ucm90YXRlIHx8IHRyYW5zZm9ybS5mbGlwWCB8fCB0cmFuc2Zvcm0uZmxpcFk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUZvclN2ZyhfcmVmKSB7XG4gIHZhciB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybSxcbiAgICAgIGNvbnRhaW5lcldpZHRoID0gX3JlZi5jb250YWluZXJXaWR0aCxcbiAgICAgIGljb25XaWR0aCA9IF9yZWYuaWNvbldpZHRoO1xuXG4gIHZhciBvdXRlciA9IHtcbiAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIGNvbnRhaW5lcldpZHRoIC8gMiArICcgMjU2KSdcbiAgfTtcbiAgdmFyIGlubmVyVHJhbnNsYXRlID0gJ3RyYW5zbGF0ZSgnICsgdHJhbnNmb3JtLnggKiAzMiArICcsICcgKyB0cmFuc2Zvcm0ueSAqIDMyICsgJykgJztcbiAgdmFyIGlubmVyU2NhbGUgPSAnc2NhbGUoJyArIHRyYW5zZm9ybS5zaXplIC8gMTYgKiAodHJhbnNmb3JtLmZsaXBYID8gLTEgOiAxKSArICcsICcgKyB0cmFuc2Zvcm0uc2l6ZSAvIDE2ICogKHRyYW5zZm9ybS5mbGlwWSA/IC0xIDogMSkgKyAnKSAnO1xuICB2YXIgaW5uZXJSb3RhdGUgPSAncm90YXRlKCcgKyB0cmFuc2Zvcm0ucm90YXRlICsgJyAwIDApJztcbiAgdmFyIGlubmVyID0ge1xuICAgIHRyYW5zZm9ybTogaW5uZXJUcmFuc2xhdGUgKyAnICcgKyBpbm5lclNjYWxlICsgJyAnICsgaW5uZXJSb3RhdGVcbiAgfTtcbiAgdmFyIHBhdGggPSB7XG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKCcgKyBpY29uV2lkdGggLyAyICogLTEgKyAnIC0yNTYpJ1xuICB9O1xuICByZXR1cm4ge1xuICAgIG91dGVyOiBvdXRlcixcbiAgICBpbm5lcjogaW5uZXIsXG4gICAgcGF0aDogcGF0aFxuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Gb3JDc3MoX3JlZjIpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IF9yZWYyLnRyYW5zZm9ybSxcbiAgICAgIF9yZWYyJHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICB3aWR0aCA9IF9yZWYyJHdpZHRoID09PSB1bmRlZmluZWQgPyBVTklUU19JTl9HUklEIDogX3JlZjIkd2lkdGgsXG4gICAgICBfcmVmMiRoZWlnaHQgPSBfcmVmMi5oZWlnaHQsXG4gICAgICBoZWlnaHQgPSBfcmVmMiRoZWlnaHQgPT09IHVuZGVmaW5lZCA/IFVOSVRTX0lOX0dSSUQgOiBfcmVmMiRoZWlnaHQsXG4gICAgICBfcmVmMiRzdGFydENlbnRlcmVkID0gX3JlZjIuc3RhcnRDZW50ZXJlZCxcbiAgICAgIHN0YXJ0Q2VudGVyZWQgPSBfcmVmMiRzdGFydENlbnRlcmVkID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9yZWYyJHN0YXJ0Q2VudGVyZWQ7XG5cbiAgdmFyIHZhbCA9ICcnO1xuXG4gIGlmIChzdGFydENlbnRlcmVkICYmIElTX0lFKSB7XG4gICAgdmFsICs9ICd0cmFuc2xhdGUoJyArICh0cmFuc2Zvcm0ueCAvIGQgLSB3aWR0aCAvIDIpICsgJ2VtLCAnICsgKHRyYW5zZm9ybS55IC8gZCAtIGhlaWdodCAvIDIpICsgJ2VtKSAnO1xuICB9IGVsc2UgaWYgKHN0YXJ0Q2VudGVyZWQpIHtcbiAgICB2YWwgKz0gJ3RyYW5zbGF0ZShjYWxjKC01MCUgKyAnICsgdHJhbnNmb3JtLnggLyBkICsgJ2VtKSwgY2FsYygtNTAlICsgJyArIHRyYW5zZm9ybS55IC8gZCArICdlbSkpICc7XG4gIH0gZWxzZSB7XG4gICAgdmFsICs9ICd0cmFuc2xhdGUoJyArIHRyYW5zZm9ybS54IC8gZCArICdlbSwgJyArIHRyYW5zZm9ybS55IC8gZCArICdlbSkgJztcbiAgfVxuXG4gIHZhbCArPSAnc2NhbGUoJyArIHRyYW5zZm9ybS5zaXplIC8gZCAqICh0cmFuc2Zvcm0uZmxpcFggPyAtMSA6IDEpICsgJywgJyArIHRyYW5zZm9ybS5zaXplIC8gZCAqICh0cmFuc2Zvcm0uZmxpcFkgPyAtMSA6IDEpICsgJykgJztcbiAgdmFsICs9ICdyb3RhdGUoJyArIHRyYW5zZm9ybS5yb3RhdGUgKyAnZGVnKSAnO1xuXG4gIHJldHVybiB2YWw7XG59XG5cbnZhciBBTExfU1BBQ0UgPSB7XG4gIHg6IDAsXG4gIHk6IDAsXG4gIHdpZHRoOiAnMTAwJScsXG4gIGhlaWdodDogJzEwMCUnXG59O1xuXG52YXIgbWFrZUljb25NYXNraW5nID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICBtYWluID0gX3JlZi5tYWluLFxuICAgICAgbWFzayA9IF9yZWYubWFzayxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtO1xuICB2YXIgbWFpbldpZHRoID0gbWFpbi53aWR0aCxcbiAgICAgIG1haW5QYXRoID0gbWFpbi5pY29uO1xuICB2YXIgbWFza1dpZHRoID0gbWFzay53aWR0aCxcbiAgICAgIG1hc2tQYXRoID0gbWFzay5pY29uO1xuXG5cbiAgdmFyIHRyYW5zID0gdHJhbnNmb3JtRm9yU3ZnKHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sIGNvbnRhaW5lcldpZHRoOiBtYXNrV2lkdGgsIGljb25XaWR0aDogbWFpbldpZHRoIH0pO1xuXG4gIHZhciBtYXNrUmVjdCA9IHtcbiAgICB0YWc6ICdyZWN0JyxcbiAgICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgQUxMX1NQQUNFLCB7XG4gICAgICBmaWxsOiAnd2hpdGUnXG4gICAgfSlcbiAgfTtcbiAgdmFyIG1hc2tJbm5lckdyb3VwID0ge1xuICAgIHRhZzogJ2cnLFxuICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCB0cmFucy5pbm5lciksXG4gICAgY2hpbGRyZW46IFt7IHRhZzogJ3BhdGgnLCBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgbWFpblBhdGguYXR0cmlidXRlcywgdHJhbnMucGF0aCwgeyBmaWxsOiAnYmxhY2snIH0pIH1dXG4gIH07XG4gIHZhciBtYXNrT3V0ZXJHcm91cCA9IHtcbiAgICB0YWc6ICdnJyxcbiAgICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgdHJhbnMub3V0ZXIpLFxuICAgIGNoaWxkcmVuOiBbbWFza0lubmVyR3JvdXBdXG4gIH07XG4gIHZhciBtYXNrSWQgPSAnbWFzay0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gIHZhciBjbGlwSWQgPSAnY2xpcC0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gIHZhciBtYXNrVGFnID0ge1xuICAgIHRhZzogJ21hc2snLFxuICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBBTExfU1BBQ0UsIHtcbiAgICAgIGlkOiBtYXNrSWQsXG4gICAgICBtYXNrVW5pdHM6ICd1c2VyU3BhY2VPblVzZScsXG4gICAgICBtYXNrQ29udGVudFVuaXRzOiAndXNlclNwYWNlT25Vc2UnXG4gICAgfSksXG4gICAgY2hpbGRyZW46IFttYXNrUmVjdCwgbWFza091dGVyR3JvdXBdXG4gIH07XG4gIHZhciBkZWZzID0ge1xuICAgIHRhZzogJ2RlZnMnLFxuICAgIGNoaWxkcmVuOiBbeyB0YWc6ICdjbGlwUGF0aCcsIGF0dHJpYnV0ZXM6IHsgaWQ6IGNsaXBJZCB9LCBjaGlsZHJlbjogW21hc2tQYXRoXSB9LCBtYXNrVGFnXVxuICB9O1xuXG4gIGNoaWxkcmVuLnB1c2goZGVmcywgeyB0YWc6ICdyZWN0JywgYXR0cmlidXRlczogX2V4dGVuZHMoeyBmaWxsOiAnY3VycmVudENvbG9yJywgJ2NsaXAtcGF0aCc6ICd1cmwoIycgKyBjbGlwSWQgKyAnKScsIG1hc2s6ICd1cmwoIycgKyBtYXNrSWQgKyAnKScgfSwgQUxMX1NQQUNFKSB9KTtcblxuICByZXR1cm4ge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzXG4gIH07XG59O1xuXG52YXIgbWFrZUljb25TdGFuZGFyZCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZi5hdHRyaWJ1dGVzLFxuICAgICAgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG5cbiAgdmFyIHN0eWxlU3RyaW5nID0gam9pblN0eWxlcyhzdHlsZXMpO1xuXG4gIGlmIChzdHlsZVN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgYXR0cmlidXRlc1snc3R5bGUnXSA9IHN0eWxlU3RyaW5nO1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pKSB7XG4gICAgdmFyIHRyYW5zID0gdHJhbnNmb3JtRm9yU3ZnKHsgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sIGNvbnRhaW5lcldpZHRoOiBtYWluLndpZHRoLCBpY29uV2lkdGg6IG1haW4ud2lkdGggfSk7XG4gICAgY2hpbGRyZW4ucHVzaCh7XG4gICAgICB0YWc6ICdnJyxcbiAgICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCB0cmFucy5vdXRlciksXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdGFnOiAnZycsXG4gICAgICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCB0cmFucy5pbm5lciksXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIHRhZzogbWFpbi5pY29uLnRhZyxcbiAgICAgICAgICBjaGlsZHJlbjogbWFpbi5pY29uLmNoaWxkcmVuLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBtYWluLmljb24uYXR0cmlidXRlcywgdHJhbnMucGF0aClcbiAgICAgICAgfV1cbiAgICAgIH1dXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY2hpbGRyZW4ucHVzaChtYWluLmljb24pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICB9O1xufTtcblxudmFyIGFzSWNvbiA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBtYWluID0gX3JlZi5tYWluLFxuICAgICAgbWFzayA9IF9yZWYubWFzayxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcyxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtO1xuXG4gIGlmICh0cmFuc2Zvcm1Jc01lYW5pbmdmdWwodHJhbnNmb3JtKSAmJiBtYWluLmZvdW5kICYmICFtYXNrLmZvdW5kKSB7XG4gICAgdmFyIHdpZHRoID0gbWFpbi53aWR0aCxcbiAgICAgICAgaGVpZ2h0ID0gbWFpbi5oZWlnaHQ7XG5cbiAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgeDogd2lkdGggLyBoZWlnaHQgLyAyLFxuICAgICAgeTogMC41XG4gICAgfTtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gam9pblN0eWxlcyhfZXh0ZW5kcyh7fSwgc3R5bGVzLCB7XG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IG9mZnNldC54ICsgdHJhbnNmb3JtLnggLyAxNiArICdlbSAnICsgKG9mZnNldC55ICsgdHJhbnNmb3JtLnkgLyAxNikgKyAnZW0nXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0dXJuIFt7XG4gICAgdGFnOiAnc3ZnJyxcbiAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICB9XTtcbn07XG5cbnZhciBhc1N5bWJvbCA9IGZ1bmN0aW9uIChfcmVmKSB7XG4gIHZhciBwcmVmaXggPSBfcmVmLnByZWZpeCxcbiAgICAgIGljb25OYW1lID0gX3JlZi5pY29uTmFtZSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICBzeW1ib2wgPSBfcmVmLnN5bWJvbDtcblxuICB2YXIgaWQgPSBzeW1ib2wgPT09IHRydWUgPyBwcmVmaXggKyAnLScgKyBjb25maWcuZmFtaWx5UHJlZml4ICsgJy0nICsgaWNvbk5hbWUgOiBzeW1ib2w7XG5cbiAgcmV0dXJuIFt7XG4gICAgdGFnOiAnc3ZnJyxcbiAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICBzdHlsZTogJ2Rpc3BsYXk6IG5vbmU7J1xuICAgIH0sXG4gICAgY2hpbGRyZW46IFt7XG4gICAgICB0YWc6ICdzeW1ib2wnLFxuICAgICAgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIHsgaWQ6IGlkIH0pLFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfV1cbiAgfV07XG59O1xuXG5mdW5jdGlvbiBtYWtlSW5saW5lU3ZnQWJzdHJhY3QocGFyYW1zKSB7XG4gIHZhciBfcGFyYW1zJGljb25zID0gcGFyYW1zLmljb25zLFxuICAgICAgbWFpbiA9IF9wYXJhbXMkaWNvbnMubWFpbixcbiAgICAgIG1hc2sgPSBfcGFyYW1zJGljb25zLm1hc2ssXG4gICAgICBwcmVmaXggPSBwYXJhbXMucHJlZml4LFxuICAgICAgaWNvbk5hbWUgPSBwYXJhbXMuaWNvbk5hbWUsXG4gICAgICB0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgc3ltYm9sID0gcGFyYW1zLnN5bWJvbCxcbiAgICAgIHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgZXh0cmEgPSBwYXJhbXMuZXh0cmEsXG4gICAgICBfcGFyYW1zJHdhdGNoYWJsZSA9IHBhcmFtcy53YXRjaGFibGUsXG4gICAgICB3YXRjaGFibGUgPSBfcGFyYW1zJHdhdGNoYWJsZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcGFyYW1zJHdhdGNoYWJsZTtcblxuICB2YXIgX3JlZiA9IG1hc2suZm91bmQgPyBtYXNrIDogbWFpbixcbiAgICAgIHdpZHRoID0gX3JlZi53aWR0aCxcbiAgICAgIGhlaWdodCA9IF9yZWYuaGVpZ2h0O1xuXG4gIHZhciB3aWR0aENsYXNzID0gJ2ZhLXctJyArIE1hdGguY2VpbCh3aWR0aCAvIGhlaWdodCAqIDE2KTtcbiAgdmFyIGF0dHJDbGFzcyA9IFtjb25maWcucmVwbGFjZW1lbnRDbGFzcywgaWNvbk5hbWUgPyBjb25maWcuZmFtaWx5UHJlZml4ICsgJy0nICsgaWNvbk5hbWUgOiAnJywgd2lkdGhDbGFzc10uZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGV4dHJhLmNsYXNzZXMuaW5kZXhPZihjKSA9PT0gLTE7XG4gIH0pLmNvbmNhdChleHRyYS5jbGFzc2VzKS5qb2luKCcgJyk7XG5cbiAgdmFyIGNvbnRlbnQgPSB7XG4gICAgY2hpbGRyZW46IFtdLFxuICAgIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBleHRyYS5hdHRyaWJ1dGVzLCB7XG4gICAgICAnZGF0YS1wcmVmaXgnOiBwcmVmaXgsXG4gICAgICAnZGF0YS1pY29uJzogaWNvbk5hbWUsXG4gICAgICAnY2xhc3MnOiBhdHRyQ2xhc3MsXG4gICAgICAncm9sZSc6ICdpbWcnLFxuICAgICAgJ3htbG5zJzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICd2aWV3Qm94JzogJzAgMCAnICsgd2lkdGggKyAnICcgKyBoZWlnaHRcbiAgICB9KVxuICB9O1xuXG4gIGlmICh3YXRjaGFibGUpIHtcbiAgICBjb250ZW50LmF0dHJpYnV0ZXNbREFUQV9GQV9JMlNWR10gPSAnJztcbiAgfVxuXG4gIGlmICh0aXRsZSkgY29udGVudC5jaGlsZHJlbi5wdXNoKHsgdGFnOiAndGl0bGUnLCBhdHRyaWJ1dGVzOiB7IGlkOiBjb250ZW50LmF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddIHx8ICd0aXRsZS0nICsgbmV4dFVuaXF1ZUlkKCkgfSwgY2hpbGRyZW46IFt0aXRsZV0gfSk7XG5cbiAgdmFyIGFyZ3MgPSBfZXh0ZW5kcyh7fSwgY29udGVudCwge1xuICAgIHByZWZpeDogcHJlZml4LFxuICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICBtYWluOiBtYWluLFxuICAgIG1hc2s6IG1hc2ssXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgc3R5bGVzOiBleHRyYS5zdHlsZXNcbiAgfSk7XG5cbiAgdmFyIF9yZWYyID0gbWFzay5mb3VuZCAmJiBtYWluLmZvdW5kID8gbWFrZUljb25NYXNraW5nKGFyZ3MpIDogbWFrZUljb25TdGFuZGFyZChhcmdzKSxcbiAgICAgIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sXG4gICAgICBhdHRyaWJ1dGVzID0gX3JlZjIuYXR0cmlidXRlcztcblxuICBhcmdzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIGFyZ3MuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cbiAgaWYgKHN5bWJvbCkge1xuICAgIHJldHVybiBhc1N5bWJvbChhcmdzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYXNJY29uKGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VMYXllcnNUZXh0QWJzdHJhY3QocGFyYW1zKSB7XG4gIHZhciBjb250ZW50ID0gcGFyYW1zLmNvbnRlbnQsXG4gICAgICB3aWR0aCA9IHBhcmFtcy53aWR0aCxcbiAgICAgIGhlaWdodCA9IHBhcmFtcy5oZWlnaHQsXG4gICAgICB0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICBleHRyYSA9IHBhcmFtcy5leHRyYSxcbiAgICAgIF9wYXJhbXMkd2F0Y2hhYmxlMiA9IHBhcmFtcy53YXRjaGFibGUsXG4gICAgICB3YXRjaGFibGUgPSBfcGFyYW1zJHdhdGNoYWJsZTIgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3BhcmFtcyR3YXRjaGFibGUyO1xuXG5cbiAgdmFyIGF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgZXh0cmEuYXR0cmlidXRlcywgdGl0bGUgPyB7ICd0aXRsZSc6IHRpdGxlIH0gOiB7fSwge1xuICAgICdjbGFzcyc6IGV4dHJhLmNsYXNzZXMuam9pbignICcpXG4gIH0pO1xuXG4gIGlmICh3YXRjaGFibGUpIHtcbiAgICBhdHRyaWJ1dGVzW0RBVEFfRkFfSTJTVkddID0gJyc7XG4gIH1cblxuICB2YXIgc3R5bGVzID0gX2V4dGVuZHMoe30sIGV4dHJhLnN0eWxlcyk7XG5cbiAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pKSB7XG4gICAgc3R5bGVzWyd0cmFuc2Zvcm0nXSA9IHRyYW5zZm9ybUZvckNzcyh7IHRyYW5zZm9ybTogdHJhbnNmb3JtLCBzdGFydENlbnRlcmVkOiB0cnVlLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0IH0pO1xuICAgIHN0eWxlc1snLXdlYmtpdC10cmFuc2Zvcm0nXSA9IHN0eWxlc1sndHJhbnNmb3JtJ107XG4gIH1cblxuICB2YXIgc3R5bGVTdHJpbmcgPSBqb2luU3R5bGVzKHN0eWxlcyk7XG5cbiAgaWYgKHN0eWxlU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gc3R5bGVTdHJpbmc7XG4gIH1cblxuICB2YXIgdmFsID0gW107XG5cbiAgdmFsLnB1c2goe1xuICAgIHRhZzogJ3NwYW4nLFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW46IFtjb250ZW50XVxuICB9KTtcblxuICBpZiAodGl0bGUpIHtcbiAgICB2YWwucHVzaCh7IHRhZzogJ3NwYW4nLCBhdHRyaWJ1dGVzOiB7IGNsYXNzOiAnc3Itb25seScgfSwgY2hpbGRyZW46IFt0aXRsZV0gfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBtYWtlTGF5ZXJzQ291bnRlckFic3RyYWN0KHBhcmFtcykge1xuICB2YXIgY29udGVudCA9IHBhcmFtcy5jb250ZW50LFxuICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICBleHRyYSA9IHBhcmFtcy5leHRyYTtcblxuXG4gIHZhciBhdHRyaWJ1dGVzID0gX2V4dGVuZHMoe30sIGV4dHJhLmF0dHJpYnV0ZXMsIHRpdGxlID8geyAndGl0bGUnOiB0aXRsZSB9IDoge30sIHtcbiAgICAnY2xhc3MnOiBleHRyYS5jbGFzc2VzLmpvaW4oJyAnKVxuICB9KTtcblxuICB2YXIgc3R5bGVTdHJpbmcgPSBqb2luU3R5bGVzKGV4dHJhLnN0eWxlcyk7XG5cbiAgaWYgKHN0eWxlU3RyaW5nLmxlbmd0aCA+IDApIHtcbiAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gc3R5bGVTdHJpbmc7XG4gIH1cblxuICB2YXIgdmFsID0gW107XG5cbiAgdmFsLnB1c2goe1xuICAgIHRhZzogJ3NwYW4nLFxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgY2hpbGRyZW46IFtjb250ZW50XVxuICB9KTtcblxuICBpZiAodGl0bGUpIHtcbiAgICB2YWwucHVzaCh7IHRhZzogJ3NwYW4nLCBhdHRyaWJ1dGVzOiB7IGNsYXNzOiAnc3Itb25seScgfSwgY2hpbGRyZW46IFt0aXRsZV0gfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG52YXIgbm9vcCQyID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xudmFyIHAgPSBjb25maWcubWVhc3VyZVBlcmZvcm1hbmNlICYmIFBFUkZPUk1BTkNFICYmIFBFUkZPUk1BTkNFLm1hcmsgJiYgUEVSRk9STUFOQ0UubWVhc3VyZSA/IFBFUkZPUk1BTkNFIDogeyBtYXJrOiBub29wJDIsIG1lYXN1cmU6IG5vb3AkMiB9O1xudmFyIHByZWFtYmxlID0gJ0ZBIFwiNS40LjFcIic7XG5cbnZhciBiZWdpbiA9IGZ1bmN0aW9uIGJlZ2luKG5hbWUpIHtcbiAgcC5tYXJrKHByZWFtYmxlICsgJyAnICsgbmFtZSArICcgYmVnaW5zJyk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVuZChuYW1lKTtcbiAgfTtcbn07XG5cbnZhciBlbmQgPSBmdW5jdGlvbiBlbmQobmFtZSkge1xuICBwLm1hcmsocHJlYW1ibGUgKyAnICcgKyBuYW1lICsgJyBlbmRzJyk7XG4gIHAubWVhc3VyZShwcmVhbWJsZSArICcgJyArIG5hbWUsIHByZWFtYmxlICsgJyAnICsgbmFtZSArICcgYmVnaW5zJywgcHJlYW1ibGUgKyAnICcgKyBuYW1lICsgJyBlbmRzJyk7XG59O1xuXG52YXIgcGVyZiA9IHsgYmVnaW46IGJlZ2luLCBlbmQ6IGVuZCB9O1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgaGVscGVyIHRvIGJpbmQgYSBmdW5jdGlvbiBrbm93biB0byBoYXZlIDQgYXJndW1lbnRzXG4gKiB0byBhIGdpdmVuIGNvbnRleHQuXG4gKi9cbnZhciBiaW5kSW50ZXJuYWw0ID0gZnVuY3Rpb24gYmluZEludGVybmFsNCAoZnVuYywgdGhpc0NvbnRleHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQ29udGV4dCwgYSwgYiwgYywgZCk7XG4gIH07XG59O1xuXG4ndXNlIHN0cmljdCc7XG5cblxuXG4vKipcbiAqICMgUmVkdWNlXG4gKlxuICogQSBmYXN0IG9iamVjdCBgLnJlZHVjZSgpYCBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgc3ViamVjdCAgICAgIFRoZSBvYmplY3QgdG8gcmVkdWNlIG92ZXIuXG4gKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgICAgICAgIFRoZSByZWR1Y2VyIGZ1bmN0aW9uLlxuICogQHBhcmFtICB7bWl4ZWR9ICAgIGluaXRpYWxWYWx1ZSBUaGUgaW5pdGlhbCB2YWx1ZSBmb3IgdGhlIHJlZHVjZXIsIGRlZmF1bHRzIHRvIHN1YmplY3RbMF0uXG4gKiBAcGFyYW0gIHtPYmplY3R9ICAgdGhpc0NvbnRleHQgIFRoZSBjb250ZXh0IGZvciB0aGUgcmVkdWNlci5cbiAqIEByZXR1cm4ge21peGVkfSAgICAgICAgICAgICAgICAgVGhlIGZpbmFsIHJlc3VsdC5cbiAqL1xudmFyIHJlZHVjZSA9IGZ1bmN0aW9uIGZhc3RSZWR1Y2VPYmplY3QgKHN1YmplY3QsIGZuLCBpbml0aWFsVmFsdWUsIHRoaXNDb250ZXh0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3ViamVjdCksXG4gICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgIGl0ZXJhdG9yID0gdGhpc0NvbnRleHQgIT09IHVuZGVmaW5lZCA/IGJpbmRJbnRlcm5hbDQoZm4sIHRoaXNDb250ZXh0KSA6IGZuLFxuICAgICAgaSwga2V5LCByZXN1bHQ7XG5cbiAgaWYgKGluaXRpYWxWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaSA9IDE7XG4gICAgcmVzdWx0ID0gc3ViamVjdFtrZXlzWzBdXTtcbiAgfVxuICBlbHNlIHtcbiAgICBpID0gMDtcbiAgICByZXN1bHQgPSBpbml0aWFsVmFsdWU7XG4gIH1cblxuICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICByZXN1bHQgPSBpdGVyYXRvcihyZXN1bHQsIHN1YmplY3Rba2V5XSwga2V5LCBzdWJqZWN0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgc3R5bGVzJDIgPSBuYW1lc3BhY2Uuc3R5bGVzO1xudmFyIHNoaW1zID0gbmFtZXNwYWNlLnNoaW1zO1xuXG5cbnZhciBfYnlVbmljb2RlID0ge307XG52YXIgX2J5TGlnYXR1cmUgPSB7fTtcbnZhciBfYnlPbGROYW1lID0ge307XG5cbnZhciBidWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICB2YXIgbG9va3VwID0gZnVuY3Rpb24gbG9va3VwKHJlZHVjZXIpIHtcbiAgICByZXR1cm4gcmVkdWNlKHN0eWxlcyQyLCBmdW5jdGlvbiAobywgc3R5bGUsIHByZWZpeCkge1xuICAgICAgb1twcmVmaXhdID0gcmVkdWNlKHN0eWxlLCByZWR1Y2VyLCB7fSk7XG4gICAgICByZXR1cm4gbztcbiAgICB9LCB7fSk7XG4gIH07XG5cbiAgX2J5VW5pY29kZSA9IGxvb2t1cChmdW5jdGlvbiAoYWNjLCBpY29uLCBpY29uTmFtZSkge1xuICAgIGFjY1tpY29uWzNdXSA9IGljb25OYW1lO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG5cbiAgX2J5TGlnYXR1cmUgPSBsb29rdXAoZnVuY3Rpb24gKGFjYywgaWNvbiwgaWNvbk5hbWUpIHtcbiAgICB2YXIgbGlnYXR1cmVzID0gaWNvblsyXTtcblxuICAgIGFjY1tpY29uTmFtZV0gPSBpY29uTmFtZTtcblxuICAgIGxpZ2F0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChsaWdhdHVyZSkge1xuICAgICAgYWNjW2xpZ2F0dXJlXSA9IGljb25OYW1lO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFjYztcbiAgfSk7XG5cbiAgdmFyIGhhc1JlZ3VsYXIgPSAnZmFyJyBpbiBzdHlsZXMkMjtcblxuICBfYnlPbGROYW1lID0gcmVkdWNlKHNoaW1zLCBmdW5jdGlvbiAoYWNjLCBzaGltKSB7XG4gICAgdmFyIG9sZE5hbWUgPSBzaGltWzBdO1xuICAgIHZhciBwcmVmaXggPSBzaGltWzFdO1xuICAgIHZhciBpY29uTmFtZSA9IHNoaW1bMl07XG5cbiAgICBpZiAocHJlZml4ID09PSAnZmFyJyAmJiAhaGFzUmVndWxhcikge1xuICAgICAgcHJlZml4ID0gJ2Zhcyc7XG4gICAgfVxuXG4gICAgYWNjW29sZE5hbWVdID0geyBwcmVmaXg6IHByZWZpeCwgaWNvbk5hbWU6IGljb25OYW1lIH07XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59O1xuXG5idWlsZCgpO1xuXG5mdW5jdGlvbiBieVVuaWNvZGUocHJlZml4LCB1bmljb2RlKSB7XG4gIHJldHVybiBfYnlVbmljb2RlW3ByZWZpeF1bdW5pY29kZV07XG59XG5cbmZ1bmN0aW9uIGJ5TGlnYXR1cmUocHJlZml4LCBsaWdhdHVyZSkge1xuICByZXR1cm4gX2J5TGlnYXR1cmVbcHJlZml4XVtsaWdhdHVyZV07XG59XG5cbmZ1bmN0aW9uIGJ5T2xkTmFtZShuYW1lKSB7XG4gIHJldHVybiBfYnlPbGROYW1lW25hbWVdIHx8IHsgcHJlZml4OiBudWxsLCBpY29uTmFtZTogbnVsbCB9O1xufVxuXG52YXIgc3R5bGVzJDEgPSBuYW1lc3BhY2Uuc3R5bGVzO1xuXG5cbnZhciBlbXB0eUNhbm9uaWNhbEljb24gPSBmdW5jdGlvbiBlbXB0eUNhbm9uaWNhbEljb24oKSB7XG4gIHJldHVybiB7IHByZWZpeDogbnVsbCwgaWNvbk5hbWU6IG51bGwsIHJlc3Q6IFtdIH07XG59O1xuXG5mdW5jdGlvbiBnZXRDYW5vbmljYWxJY29uKHZhbHVlcykge1xuICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjbHMpIHtcbiAgICB2YXIgaWNvbk5hbWUgPSBnZXRJY29uTmFtZShjb25maWcuZmFtaWx5UHJlZml4LCBjbHMpO1xuXG4gICAgaWYgKHN0eWxlcyQxW2Nsc10pIHtcbiAgICAgIGFjYy5wcmVmaXggPSBjbHM7XG4gICAgfSBlbHNlIGlmIChpY29uTmFtZSkge1xuICAgICAgdmFyIHNoaW0gPSBhY2MucHJlZml4ID09PSAnZmEnID8gYnlPbGROYW1lKGljb25OYW1lKSA6IHt9O1xuXG4gICAgICBhY2MuaWNvbk5hbWUgPSBzaGltLmljb25OYW1lIHx8IGljb25OYW1lO1xuICAgICAgYWNjLnByZWZpeCA9IHNoaW0ucHJlZml4IHx8IGFjYy5wcmVmaXg7XG4gICAgfSBlbHNlIGlmIChjbHMgIT09IGNvbmZpZy5yZXBsYWNlbWVudENsYXNzICYmIGNscy5pbmRleE9mKCdmYS13LScpICE9PSAwKSB7XG4gICAgICBhY2MucmVzdC5wdXNoKGNscyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgZW1wdHlDYW5vbmljYWxJY29uKCkpO1xufVxuXG5mdW5jdGlvbiBpY29uRnJvbU1hcHBpbmcobWFwcGluZywgcHJlZml4LCBpY29uTmFtZSkge1xuICBpZiAobWFwcGluZyAmJiBtYXBwaW5nW3ByZWZpeF0gJiYgbWFwcGluZ1twcmVmaXhdW2ljb25OYW1lXSkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICAgIGljb246IG1hcHBpbmdbcHJlZml4XVtpY29uTmFtZV1cbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvSHRtbChhYnN0cmFjdE5vZGVzKSB7XG4gIHZhciB0YWcgPSBhYnN0cmFjdE5vZGVzLnRhZyxcbiAgICAgIF9hYnN0cmFjdE5vZGVzJGF0dHJpYiA9IGFic3RyYWN0Tm9kZXMuYXR0cmlidXRlcyxcbiAgICAgIGF0dHJpYnV0ZXMgPSBfYWJzdHJhY3ROb2RlcyRhdHRyaWIgPT09IHVuZGVmaW5lZCA/IHt9IDogX2Fic3RyYWN0Tm9kZXMkYXR0cmliLFxuICAgICAgX2Fic3RyYWN0Tm9kZXMkY2hpbGRyID0gYWJzdHJhY3ROb2Rlcy5jaGlsZHJlbixcbiAgICAgIGNoaWxkcmVuID0gX2Fic3RyYWN0Tm9kZXMkY2hpbGRyID09PSB1bmRlZmluZWQgPyBbXSA6IF9hYnN0cmFjdE5vZGVzJGNoaWxkcjtcblxuXG4gIGlmICh0eXBlb2YgYWJzdHJhY3ROb2RlcyA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaHRtbEVzY2FwZShhYnN0cmFjdE5vZGVzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJzwnICsgdGFnICsgJyAnICsgam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcykgKyAnPicgKyBjaGlsZHJlbi5tYXAodG9IdG1sKS5qb2luKCcnKSArICc8LycgKyB0YWcgKyAnPic7XG4gIH1cbn1cblxudmFyIG5vb3AkMSA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuZnVuY3Rpb24gaXNXYXRjaGVkKG5vZGUpIHtcbiAgdmFyIGkyc3ZnID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHKSA6IG51bGw7XG5cbiAgcmV0dXJuIHR5cGVvZiBpMnN2ZyA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGdldE11dGF0b3IoKSB7XG4gIGlmIChjb25maWcuYXV0b1JlcGxhY2VTdmcgPT09IHRydWUpIHtcbiAgICByZXR1cm4gbXV0YXRvcnMucmVwbGFjZTtcbiAgfVxuXG4gIHZhciBtdXRhdG9yID0gbXV0YXRvcnNbY29uZmlnLmF1dG9SZXBsYWNlU3ZnXTtcblxuICByZXR1cm4gbXV0YXRvciB8fCBtdXRhdG9ycy5yZXBsYWNlO1xufVxuXG52YXIgbXV0YXRvcnMgPSB7XG4gIHJlcGxhY2U6IGZ1bmN0aW9uIHJlcGxhY2UobXV0YXRpb24pIHtcbiAgICB2YXIgbm9kZSA9IG11dGF0aW9uWzBdO1xuICAgIHZhciBhYnN0cmFjdCA9IG11dGF0aW9uWzFdO1xuICAgIHZhciBuZXdPdXRlckhUTUwgPSBhYnN0cmFjdC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgfSkuam9pbignXFxuJyk7XG5cbiAgICBpZiAobm9kZS5wYXJlbnROb2RlICYmIG5vZGUub3V0ZXJIVE1MKSB7XG4gICAgICBub2RlLm91dGVySFRNTCA9IG5ld091dGVySFRNTCArIChjb25maWcua2VlcE9yaWdpbmFsU291cmNlICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnc3ZnJyA/ICc8IS0tICcgKyBub2RlLm91dGVySFRNTCArICcgLS0+JyA6ICcnKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgdmFyIG5ld05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5ld05vZGUsIG5vZGUpO1xuICAgICAgbmV3Tm9kZS5vdXRlckhUTUwgPSBuZXdPdXRlckhUTUw7XG4gICAgfVxuICB9LFxuICBuZXN0OiBmdW5jdGlvbiBuZXN0KG11dGF0aW9uKSB7XG4gICAgdmFyIG5vZGUgPSBtdXRhdGlvblswXTtcbiAgICB2YXIgYWJzdHJhY3QgPSBtdXRhdGlvblsxXTtcblxuICAgIC8vIElmIHdlIGFscmVhZHkgaGF2ZSBhIHJlcGxhY2VkIG5vZGUgd2UgZG8gbm90IHdhbnQgdG8gY29udGludWUgbmVzdGluZyB3aXRoaW4gaXQuXG4gICAgLy8gU2hvcnQtY2lyY3VpdCB0byB0aGUgc3RhbmRhcmQgcmVwbGFjZW1lbnRcbiAgICBpZiAofmNsYXNzQXJyYXkobm9kZSkuaW5kZXhPZihjb25maWcucmVwbGFjZW1lbnRDbGFzcykpIHtcbiAgICAgIHJldHVybiBtdXRhdG9ycy5yZXBsYWNlKG11dGF0aW9uKTtcbiAgICB9XG5cbiAgICB2YXIgZm9yU3ZnID0gbmV3IFJlZ0V4cChjb25maWcuZmFtaWx5UHJlZml4ICsgJy0uKicpO1xuXG4gICAgZGVsZXRlIGFic3RyYWN0WzBdLmF0dHJpYnV0ZXMuc3R5bGU7XG5cbiAgICB2YXIgc3BsaXRDbGFzc2VzID0gYWJzdHJhY3RbMF0uYXR0cmlidXRlcy5jbGFzcy5zcGxpdCgnICcpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjbHMpIHtcbiAgICAgIGlmIChjbHMgPT09IGNvbmZpZy5yZXBsYWNlbWVudENsYXNzIHx8IGNscy5tYXRjaChmb3JTdmcpKSB7XG4gICAgICAgIGFjYy50b1N2Zy5wdXNoKGNscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY2MudG9Ob2RlLnB1c2goY2xzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7IHRvTm9kZTogW10sIHRvU3ZnOiBbXSB9KTtcblxuICAgIGFic3RyYWN0WzBdLmF0dHJpYnV0ZXMuY2xhc3MgPSBzcGxpdENsYXNzZXMudG9Tdmcuam9pbignICcpO1xuXG4gICAgdmFyIG5ld0lubmVySFRNTCA9IGFic3RyYWN0Lm1hcChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIHRvSHRtbChhKTtcbiAgICB9KS5qb2luKCdcXG4nKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBzcGxpdENsYXNzZXMudG9Ob2RlLmpvaW4oJyAnKSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoREFUQV9GQV9JMlNWRywgJycpO1xuICAgIG5vZGUuaW5uZXJIVE1MID0gbmV3SW5uZXJIVE1MO1xuICB9XG59O1xuXG5mdW5jdGlvbiBwZXJmb3JtKG11dGF0aW9ucywgY2FsbGJhY2spIHtcbiAgdmFyIGNhbGxiYWNrRnVuY3Rpb24gPSB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicgPyBjYWxsYmFjayA6IG5vb3AkMTtcblxuICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgIGNhbGxiYWNrRnVuY3Rpb24oKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZnJhbWUgPSBXSU5ET1cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uIChvcCkge1xuICAgICAgcmV0dXJuIG9wKCk7XG4gICAgfTtcblxuICAgIGZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBtdXRhdG9yID0gZ2V0TXV0YXRvcigpO1xuICAgICAgdmFyIG1hcmsgPSBwZXJmLmJlZ2luKCdtdXRhdGUnKTtcblxuICAgICAgbXV0YXRpb25zLm1hcChtdXRhdG9yKTtcblxuICAgICAgbWFyaygpO1xuXG4gICAgICBjYWxsYmFja0Z1bmN0aW9uKCk7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIGRpc2FibGVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGRpc2FibGVPYnNlcnZhdGlvbihvcGVyYXRpb24pIHtcbiAgZGlzYWJsZWQgPSB0cnVlO1xuICBvcGVyYXRpb24oKTtcbiAgZGlzYWJsZWQgPSBmYWxzZTtcbn1cblxudmFyIG1vID0gbnVsbDtcblxuZnVuY3Rpb24gb2JzZXJ2ZShvcHRpb25zKSB7XG4gIGlmICghTVVUQVRJT05fT0JTRVJWRVIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWNvbmZpZy5vYnNlcnZlTXV0YXRpb25zKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRyZWVDYWxsYmFjayA9IG9wdGlvbnMudHJlZUNhbGxiYWNrLFxuICAgICAgbm9kZUNhbGxiYWNrID0gb3B0aW9ucy5ub2RlQ2FsbGJhY2ssXG4gICAgICBwc2V1ZG9FbGVtZW50c0NhbGxiYWNrID0gb3B0aW9ucy5wc2V1ZG9FbGVtZW50c0NhbGxiYWNrLFxuICAgICAgX29wdGlvbnMkb2JzZXJ2ZU11dGF0ID0gb3B0aW9ucy5vYnNlcnZlTXV0YXRpb25zUm9vdCxcbiAgICAgIG9ic2VydmVNdXRhdGlvbnNSb290ID0gX29wdGlvbnMkb2JzZXJ2ZU11dGF0ID09PSB1bmRlZmluZWQgPyBET0NVTUVOVC5ib2R5IDogX29wdGlvbnMkb2JzZXJ2ZU11dGF0O1xuXG5cbiAgbW8gPSBuZXcgTVVUQVRJT05fT0JTRVJWRVIoZnVuY3Rpb24gKG9iamVjdHMpIHtcbiAgICBpZiAoZGlzYWJsZWQpIHJldHVybjtcblxuICAgIHRvQXJyYXkob2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb25SZWNvcmQpIHtcbiAgICAgIGlmIChtdXRhdGlvblJlY29yZC50eXBlID09PSAnY2hpbGRMaXN0JyAmJiBtdXRhdGlvblJlY29yZC5hZGRlZE5vZGVzLmxlbmd0aCA+IDAgJiYgIWlzV2F0Y2hlZChtdXRhdGlvblJlY29yZC5hZGRlZE5vZGVzWzBdKSkge1xuICAgICAgICBpZiAoY29uZmlnLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgICAgcHNldWRvRWxlbWVudHNDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJlZUNhbGxiYWNrKG11dGF0aW9uUmVjb3JkLnRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChtdXRhdGlvblJlY29yZC50eXBlID09PSAnYXR0cmlidXRlcycgJiYgbXV0YXRpb25SZWNvcmQudGFyZ2V0LnBhcmVudE5vZGUgJiYgY29uZmlnLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0LnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobXV0YXRpb25SZWNvcmQudHlwZSA9PT0gJ2F0dHJpYnV0ZXMnICYmIGlzV2F0Y2hlZChtdXRhdGlvblJlY29yZC50YXJnZXQpICYmIH5BVFRSSUJVVEVTX1dBVENIRURfRk9SX01VVEFUSU9OLmluZGV4T2YobXV0YXRpb25SZWNvcmQuYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLmF0dHJpYnV0ZU5hbWUgPT09ICdjbGFzcycpIHtcbiAgICAgICAgICB2YXIgX2dldENhbm9uaWNhbEljb24gPSBnZXRDYW5vbmljYWxJY29uKGNsYXNzQXJyYXkobXV0YXRpb25SZWNvcmQudGFyZ2V0KSksXG4gICAgICAgICAgICAgIHByZWZpeCA9IF9nZXRDYW5vbmljYWxJY29uLnByZWZpeCxcbiAgICAgICAgICAgICAgaWNvbk5hbWUgPSBfZ2V0Q2Fub25pY2FsSWNvbi5pY29uTmFtZTtcblxuICAgICAgICAgIGlmIChwcmVmaXgpIG11dGF0aW9uUmVjb3JkLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcHJlZml4JywgcHJlZml4KTtcbiAgICAgICAgICBpZiAoaWNvbk5hbWUpIG11dGF0aW9uUmVjb3JkLnRhcmdldC5zZXRBdHRyaWJ1dGUoJ2RhdGEtaWNvbicsIGljb25OYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlQ2FsbGJhY2sobXV0YXRpb25SZWNvcmQudGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuXG4gIG1vLm9ic2VydmUob2JzZXJ2ZU11dGF0aW9uc1Jvb3QsIHtcbiAgICBjaGlsZExpc3Q6IHRydWUsIGF0dHJpYnV0ZXM6IHRydWUsIGNoYXJhY3RlckRhdGE6IHRydWUsIHN1YnRyZWU6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gIGlmICghbW8pIHJldHVybjtcblxuICBtby5kaXNjb25uZWN0KCk7XG59XG5cbnZhciBzdHlsZVBhcnNlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZhciBzdHlsZSA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuXG4gIHZhciB2YWwgPSBbXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICB2YWwgPSBzdHlsZS5zcGxpdCgnOycpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgICAgdmFyIHN0eWxlcyA9IHN0eWxlLnNwbGl0KCc6Jyk7XG4gICAgICB2YXIgcHJvcCA9IHN0eWxlc1swXTtcbiAgICAgIHZhciB2YWx1ZSA9IHN0eWxlcy5zbGljZSgxKTtcblxuICAgICAgaWYgKHByb3AgJiYgdmFsdWUubGVuZ3RoID4gMCkge1xuICAgICAgICBhY2NbcHJvcF0gPSB2YWx1ZS5qb2luKCc6JykudHJpbSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59O1xuXG5mdW5jdGlvbiB0b0hleCh1bmljb2RlKSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaWNvZGUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaGV4ID0gdW5pY29kZS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcbiAgICByZXN1bHQgKz0gKCcwMDAnICsgaGV4KS5zbGljZSgtNCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgY2xhc3NQYXJzZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICB2YXIgZXhpc3RpbmdQcmVmaXggPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1wcmVmaXgnKTtcbiAgdmFyIGV4aXN0aW5nSWNvbk5hbWUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1pY29uJyk7XG4gIHZhciBpbm5lclRleHQgPSBub2RlLmlubmVyVGV4dCAhPT0gdW5kZWZpbmVkID8gbm9kZS5pbm5lclRleHQudHJpbSgpIDogJyc7XG5cbiAgdmFyIHZhbCA9IGdldENhbm9uaWNhbEljb24oY2xhc3NBcnJheShub2RlKSk7XG5cbiAgaWYgKGV4aXN0aW5nUHJlZml4ICYmIGV4aXN0aW5nSWNvbk5hbWUpIHtcbiAgICB2YWwucHJlZml4ID0gZXhpc3RpbmdQcmVmaXg7XG4gICAgdmFsLmljb25OYW1lID0gZXhpc3RpbmdJY29uTmFtZTtcbiAgfVxuXG4gIGlmICh2YWwucHJlZml4ICYmIGlubmVyVGV4dC5sZW5ndGggPiAxKSB7XG4gICAgdmFsLmljb25OYW1lID0gYnlMaWdhdHVyZSh2YWwucHJlZml4LCBub2RlLmlubmVyVGV4dCk7XG4gIH0gZWxzZSBpZiAodmFsLnByZWZpeCAmJiBpbm5lclRleHQubGVuZ3RoID09PSAxKSB7XG4gICAgdmFsLmljb25OYW1lID0gYnlVbmljb2RlKHZhbC5wcmVmaXgsIHRvSGV4KG5vZGUuaW5uZXJUZXh0KSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcblxudmFyIHBhcnNlVHJhbnNmb3JtU3RyaW5nID0gZnVuY3Rpb24gcGFyc2VUcmFuc2Zvcm1TdHJpbmcodHJhbnNmb3JtU3RyaW5nKSB7XG4gIHZhciB0cmFuc2Zvcm0gPSB7XG4gICAgc2l6ZTogMTYsXG4gICAgeDogMCxcbiAgICB5OiAwLFxuICAgIGZsaXBYOiBmYWxzZSxcbiAgICBmbGlwWTogZmFsc2UsXG4gICAgcm90YXRlOiAwXG4gIH07XG5cbiAgaWYgKCF0cmFuc2Zvcm1TdHJpbmcpIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cmFuc2Zvcm1TdHJpbmcudG9Mb3dlckNhc2UoKS5zcGxpdCgnICcpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBuKSB7XG4gICAgICB2YXIgcGFydHMgPSBuLnRvTG93ZXJDYXNlKCkuc3BsaXQoJy0nKTtcbiAgICAgIHZhciBmaXJzdCA9IHBhcnRzWzBdO1xuICAgICAgdmFyIHJlc3QgPSBwYXJ0cy5zbGljZSgxKS5qb2luKCctJyk7XG5cbiAgICAgIGlmIChmaXJzdCAmJiByZXN0ID09PSAnaCcpIHtcbiAgICAgICAgYWNjLmZsaXBYID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgaWYgKGZpcnN0ICYmIHJlc3QgPT09ICd2Jykge1xuICAgICAgICBhY2MuZmxpcFkgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuXG4gICAgICByZXN0ID0gcGFyc2VGbG9hdChyZXN0KTtcblxuICAgICAgaWYgKGlzTmFOKHJlc3QpKSB7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZmlyc3QpIHtcbiAgICAgICAgY2FzZSAnZ3Jvdyc6XG4gICAgICAgICAgYWNjLnNpemUgPSBhY2Muc2l6ZSArIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Nocmluayc6XG4gICAgICAgICAgYWNjLnNpemUgPSBhY2Muc2l6ZSAtIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgIGFjYy54ID0gYWNjLnggLSByZXN0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgYWNjLnggPSBhY2MueCArIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICBhY2MueSA9IGFjYy55IC0gcmVzdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgYWNjLnkgPSBhY2MueSArIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JvdGF0ZSc6XG4gICAgICAgICAgYWNjLnJvdGF0ZSA9IGFjYy5yb3RhdGUgKyByZXN0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHRyYW5zZm9ybSk7XG4gIH1cbn07XG5cbnZhciB0cmFuc2Zvcm1QYXJzZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICByZXR1cm4gcGFyc2VUcmFuc2Zvcm1TdHJpbmcobm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtdHJhbnNmb3JtJykpO1xufTtcblxudmFyIHN5bWJvbFBhcnNlciA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZhciBzeW1ib2wgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS1zeW1ib2wnKTtcblxuICByZXR1cm4gc3ltYm9sID09PSBudWxsID8gZmFsc2UgOiBzeW1ib2wgPT09ICcnID8gdHJ1ZSA6IHN5bWJvbDtcbn07XG5cbnZhciBhdHRyaWJ1dGVzUGFyc2VyID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIGV4dHJhQXR0cmlidXRlcyA9IHRvQXJyYXkobm9kZS5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYXR0cikge1xuICAgIGlmIChhY2MubmFtZSAhPT0gJ2NsYXNzJyAmJiBhY2MubmFtZSAhPT0gJ3N0eWxlJykge1xuICAgICAgYWNjW2F0dHIubmFtZV0gPSBhdHRyLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG5cbiAgdmFyIHRpdGxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG5cbiAgaWYgKGNvbmZpZy5hdXRvQTExeSkge1xuICAgIGlmICh0aXRsZSkge1xuICAgICAgZXh0cmFBdHRyaWJ1dGVzWydhcmlhLWxhYmVsbGVkYnknXSA9IGNvbmZpZy5yZXBsYWNlbWVudENsYXNzICsgJy10aXRsZS0nICsgbmV4dFVuaXF1ZUlkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4dHJhQXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXh0cmFBdHRyaWJ1dGVzO1xufTtcblxudmFyIG1hc2tQYXJzZXIgPSBmdW5jdGlvbiAobm9kZSkge1xuICB2YXIgbWFzayA9IG5vZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWZhLW1hc2snKTtcblxuICBpZiAoIW1hc2spIHtcbiAgICByZXR1cm4gZW1wdHlDYW5vbmljYWxJY29uKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldENhbm9uaWNhbEljb24obWFzay5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAoaSkge1xuICAgICAgcmV0dXJuIGkudHJpbSgpO1xuICAgIH0pKTtcbiAgfVxufTtcblxudmFyIGJsYW5rTWV0YSA9IHtcbiAgaWNvbk5hbWU6IG51bGwsXG4gIHRpdGxlOiBudWxsLFxuICBwcmVmaXg6IG51bGwsXG4gIHRyYW5zZm9ybTogbWVhbmluZ2xlc3NUcmFuc2Zvcm0sXG4gIHN5bWJvbDogZmFsc2UsXG4gIG1hc2s6IG51bGwsXG4gIGV4dHJhOiB7IGNsYXNzZXM6IFtdLCBzdHlsZXM6IHt9LCBhdHRyaWJ1dGVzOiB7fSB9XG59O1xuXG5mdW5jdGlvbiBwYXJzZU1ldGEobm9kZSkge1xuICB2YXIgX2NsYXNzUGFyc2VyID0gY2xhc3NQYXJzZXIobm9kZSksXG4gICAgICBpY29uTmFtZSA9IF9jbGFzc1BhcnNlci5pY29uTmFtZSxcbiAgICAgIHByZWZpeCA9IF9jbGFzc1BhcnNlci5wcmVmaXgsXG4gICAgICBleHRyYUNsYXNzZXMgPSBfY2xhc3NQYXJzZXIucmVzdDtcblxuICB2YXIgZXh0cmFTdHlsZXMgPSBzdHlsZVBhcnNlcihub2RlKTtcbiAgdmFyIHRyYW5zZm9ybSA9IHRyYW5zZm9ybVBhcnNlcihub2RlKTtcbiAgdmFyIHN5bWJvbCA9IHN5bWJvbFBhcnNlcihub2RlKTtcbiAgdmFyIGV4dHJhQXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNQYXJzZXIobm9kZSk7XG4gIHZhciBtYXNrID0gbWFza1BhcnNlcihub2RlKTtcblxuICByZXR1cm4ge1xuICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICB0aXRsZTogbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyksXG4gICAgcHJlZml4OiBwcmVmaXgsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgbWFzazogbWFzayxcbiAgICBleHRyYToge1xuICAgICAgY2xhc3NlczogZXh0cmFDbGFzc2VzLFxuICAgICAgc3R5bGVzOiBleHRyYVN0eWxlcyxcbiAgICAgIGF0dHJpYnV0ZXM6IGV4dHJhQXR0cmlidXRlc1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gTWlzc2luZ0ljb24oZXJyb3IpIHtcbiAgdGhpcy5uYW1lID0gJ01pc3NpbmdJY29uJztcbiAgdGhpcy5tZXNzYWdlID0gZXJyb3IgfHwgJ0ljb24gdW5hdmFpbGFibGUnO1xuICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG59XG5cbk1pc3NpbmdJY29uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbk1pc3NpbmdJY29uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE1pc3NpbmdJY29uO1xuXG52YXIgRklMTCA9IHsgZmlsbDogJ2N1cnJlbnRDb2xvcicgfTtcbnZhciBBTklNQVRJT05fQkFTRSA9IHtcbiAgYXR0cmlidXRlVHlwZTogJ1hNTCcsXG4gIHJlcGVhdENvdW50OiAnaW5kZWZpbml0ZScsXG4gIGR1cjogJzJzJ1xufTtcbnZhciBSSU5HID0ge1xuICB0YWc6ICdwYXRoJyxcbiAgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIEZJTEwsIHtcbiAgICBkOiAnTTE1Ni41LDQ0Ny43bC0xMi42LDI5LjVjLTE4LjctOS41LTM1LjktMjEuMi01MS41LTM0LjlsMjIuNy0yMi43QzEyNy42LDQzMC41LDE0MS41LDQ0MCwxNTYuNSw0NDcuN3ogTTQwLjYsMjcySDguNSBjMS40LDIxLjIsNS40LDQxLjcsMTEuNyw2MS4xTDUwLDMyMS4yQzQ1LjEsMzA1LjUsNDEuOCwyODksNDAuNiwyNzJ6IE00MC42LDI0MGMxLjQtMTguOCw1LjItMzcsMTEuMS01NC4xbC0yOS41LTEyLjYgQzE0LjcsMTk0LjMsMTAsMjE2LjcsOC41LDI0MEg0MC42eiBNNjQuMywxNTYuNWM3LjgtMTQuOSwxNy4yLTI4LjgsMjguMS00MS41TDY5LjcsOTIuM2MtMTMuNywxNS42LTI1LjUsMzIuOC0zNC45LDUxLjUgTDY0LjMsMTU2LjV6IE0zOTcsNDE5LjZjLTEzLjksMTItMjkuNCwyMi4zLTQ2LjEsMzAuNGwxMS45LDI5LjhjMjAuNy05LjksMzkuOC0yMi42LDU2LjktMzcuNkwzOTcsNDE5LjZ6IE0xMTUsOTIuNCBjMTMuOS0xMiwyOS40LTIyLjMsNDYuMS0zMC40bC0xMS45LTI5LjhjLTIwLjcsOS45LTM5LjgsMjIuNi01Ni44LDM3LjZMMTE1LDkyLjR6IE00NDcuNywzNTUuNWMtNy44LDE0LjktMTcuMiwyOC44LTI4LjEsNDEuNSBsMjIuNywyMi43YzEzLjctMTUuNiwyNS41LTMyLjksMzQuOS01MS41TDQ0Ny43LDM1NS41eiBNNDcxLjQsMjcyYy0xLjQsMTguOC01LjIsMzctMTEuMSw1NC4xbDI5LjUsMTIuNiBjNy41LTIxLjEsMTIuMi00My41LDEzLjYtNjYuOEg0NzEuNHogTTMyMS4yLDQ2MmMtMTUuNyw1LTMyLjIsOC4yLTQ5LjIsOS40djMyLjFjMjEuMi0xLjQsNDEuNy01LjQsNjEuMS0xMS43TDMyMS4yLDQ2MnogTTI0MCw0NzEuNGMtMTguOC0xLjQtMzctNS4yLTU0LjEtMTEuMWwtMTIuNiwyOS41YzIxLjEsNy41LDQzLjUsMTIuMiw2Ni44LDEzLjZWNDcxLjR6IE00NjIsMTkwLjhjNSwxNS43LDguMiwzMi4yLDkuNCw0OS4yaDMyLjEgYy0xLjQtMjEuMi01LjQtNDEuNy0xMS43LTYxLjFMNDYyLDE5MC44eiBNOTIuNCwzOTdjLTEyLTEzLjktMjIuMy0yOS40LTMwLjQtNDYuMWwtMjkuOCwxMS45YzkuOSwyMC43LDIyLjYsMzkuOCwzNy42LDU2LjkgTDkyLjQsMzk3eiBNMjcyLDQwLjZjMTguOCwxLjQsMzYuOSw1LjIsNTQuMSwxMS4xbDEyLjYtMjkuNUMzMTcuNywxNC43LDI5NS4zLDEwLDI3Miw4LjVWNDAuNnogTTE5MC44LDUwIGMxNS43LTUsMzIuMi04LjIsNDkuMi05LjRWOC41Yy0yMS4yLDEuNC00MS43LDUuNC02MS4xLDExLjdMMTkwLjgsNTB6IE00NDIuMyw5Mi4zTDQxOS42LDExNWMxMiwxMy45LDIyLjMsMjkuNCwzMC41LDQ2LjEgbDI5LjgtMTEuOUM0NzAsMTI4LjUsNDU3LjMsMTA5LjQsNDQyLjMsOTIuM3ogTTM5Nyw5Mi40bDIyLjctMjIuN2MtMTUuNi0xMy43LTMyLjgtMjUuNS01MS41LTM0LjlsLTEyLjYsMjkuNSBDMzcwLjQsNzIuMSwzODQuNCw4MS41LDM5Nyw5Mi40eidcbiAgfSlcbn07XG52YXIgT1BBQ0lUWV9BTklNQVRFID0gX2V4dGVuZHMoe30sIEFOSU1BVElPTl9CQVNFLCB7XG4gIGF0dHJpYnV0ZU5hbWU6ICdvcGFjaXR5J1xufSk7XG52YXIgRE9UID0ge1xuICB0YWc6ICdjaXJjbGUnLFxuICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgRklMTCwge1xuICAgIGN4OiAnMjU2JyxcbiAgICBjeTogJzM2NCcsXG4gICAgcjogJzI4J1xuICB9KSxcbiAgY2hpbGRyZW46IFt7IHRhZzogJ2FuaW1hdGUnLCBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgQU5JTUFUSU9OX0JBU0UsIHsgYXR0cmlidXRlTmFtZTogJ3InLCB2YWx1ZXM6ICcyODsxNDsyODsyODsxNDsyODsnIH0pIH0sIHsgdGFnOiAnYW5pbWF0ZScsIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBPUEFDSVRZX0FOSU1BVEUsIHsgdmFsdWVzOiAnMTswOzE7MTswOzE7JyB9KSB9XVxufTtcbnZhciBRVUVTVElPTiA9IHtcbiAgdGFnOiAncGF0aCcsXG4gIGF0dHJpYnV0ZXM6IF9leHRlbmRzKHt9LCBGSUxMLCB7XG4gICAgb3BhY2l0eTogJzEnLFxuICAgIGQ6ICdNMjYzLjcsMzEyaC0xNmMtNi42LDAtMTItNS40LTEyLTEyYzAtNzEsNzcuNC02My45LDc3LjQtMTA3LjhjMC0yMC0xNy44LTQwLjItNTcuNC00MC4yYy0yOS4xLDAtNDQuMyw5LjYtNTkuMiwyOC43IGMtMy45LDUtMTEuMSw2LTE2LjIsMi40bC0xMy4xLTkuMmMtNS42LTMuOS02LjktMTEuOC0yLjYtMTcuMmMyMS4yLTI3LjIsNDYuNC00NC43LDkxLjItNDQuN2M1Mi4zLDAsOTcuNCwyOS44LDk3LjQsODAuMiBjMCw2Ny42LTc3LjQsNjMuNS03Ny40LDEwNy44QzI3NS43LDMwNi42LDI3MC4zLDMxMiwyNjMuNywzMTJ6J1xuICB9KSxcbiAgY2hpbGRyZW46IFt7IHRhZzogJ2FuaW1hdGUnLCBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgT1BBQ0lUWV9BTklNQVRFLCB7IHZhbHVlczogJzE7MDswOzA7MDsxOycgfSkgfV1cbn07XG52YXIgRVhDTEFNQVRJT04gPSB7XG4gIHRhZzogJ3BhdGgnLFxuICBhdHRyaWJ1dGVzOiBfZXh0ZW5kcyh7fSwgRklMTCwge1xuICAgIG9wYWNpdHk6ICcwJyxcbiAgICBkOiAnTTIzMi41LDEzNC41bDcsMTY4YzAuMyw2LjQsNS42LDExLjUsMTIsMTEuNWg5YzYuNCwwLDExLjctNS4xLDEyLTExLjVsNy0xNjhjMC4zLTYuOC01LjItMTIuNS0xMi0xMi41aC0yMyBDMjM3LjcsMTIyLDIzMi4yLDEyNy43LDIzMi41LDEzNC41eidcbiAgfSksXG4gIGNoaWxkcmVuOiBbeyB0YWc6ICdhbmltYXRlJywgYXR0cmlidXRlczogX2V4dGVuZHMoe30sIE9QQUNJVFlfQU5JTUFURSwgeyB2YWx1ZXM6ICcwOzA7MTsxOzA7MDsnIH0pIH1dXG59O1xuXG52YXIgbWlzc2luZyA9IHsgdGFnOiAnZycsIGNoaWxkcmVuOiBbUklORywgRE9ULCBRVUVTVElPTiwgRVhDTEFNQVRJT05dIH07XG5cbnZhciBzdHlsZXMgPSBuYW1lc3BhY2Uuc3R5bGVzO1xuXG52YXIgTEFZRVJTX1RFWFRfQ0xBU1NOQU1FID0gJ2ZhLWxheWVycy10ZXh0JztcbnZhciBGT05UX0ZBTUlMWV9QQVRURVJOID0gL0ZvbnQgQXdlc29tZSA1IChTb2xpZHxSZWd1bGFyfExpZ2h0fEJyYW5kc3xGcmVlfFBybykvO1xudmFyIFNUWUxFX1RPX1BSRUZJWCA9IHtcbiAgJ1NvbGlkJzogJ2ZhcycsXG4gICdSZWd1bGFyJzogJ2ZhcicsXG4gICdMaWdodCc6ICdmYWwnLFxuICAnQnJhbmRzJzogJ2ZhYidcbn07XG52YXIgRk9OVF9XRUlHSFRfVE9fUFJFRklYID0ge1xuICAnOTAwJzogJ2ZhcycsXG4gICc0MDAnOiAnZmFyJyxcbiAgJzMwMCc6ICdmYWwnXG59O1xuXG5mdW5jdGlvbiBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSB7XG4gIHZhciB2YWwgPSB7XG4gICAgZm91bmQ6IGZhbHNlLFxuICAgIHdpZHRoOiA1MTIsXG4gICAgaGVpZ2h0OiA1MTIsXG4gICAgaWNvbjogbWlzc2luZ1xuICB9O1xuXG4gIGlmIChpY29uTmFtZSAmJiBwcmVmaXggJiYgc3R5bGVzW3ByZWZpeF0gJiYgc3R5bGVzW3ByZWZpeF1baWNvbk5hbWVdKSB7XG4gICAgdmFyIGljb24gPSBzdHlsZXNbcHJlZml4XVtpY29uTmFtZV07XG4gICAgdmFyIHdpZHRoID0gaWNvblswXTtcbiAgICB2YXIgaGVpZ2h0ID0gaWNvblsxXTtcbiAgICB2YXIgdmVjdG9yRGF0YSA9IGljb24uc2xpY2UoNCk7XG5cbiAgICB2YWwgPSB7XG4gICAgICBmb3VuZDogdHJ1ZSxcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgaWNvbjogeyB0YWc6ICdwYXRoJywgYXR0cmlidXRlczogeyBmaWxsOiAnY3VycmVudENvbG9yJywgZDogdmVjdG9yRGF0YVswXSB9IH1cbiAgICB9O1xuICB9IGVsc2UgaWYgKGljb25OYW1lICYmIHByZWZpeCAmJiAhY29uZmlnLnNob3dNaXNzaW5nSWNvbnMpIHtcbiAgICB0aHJvdyBuZXcgTWlzc2luZ0ljb24oJ0ljb24gaXMgbWlzc2luZyBmb3IgcHJlZml4ICcgKyBwcmVmaXggKyAnIHdpdGggaWNvbiBuYW1lICcgKyBpY29uTmFtZSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVN2Z1JlcGxhY2VtZW50TXV0YXRpb24obm9kZSwgbm9kZU1ldGEpIHtcbiAgdmFyIGljb25OYW1lID0gbm9kZU1ldGEuaWNvbk5hbWUsXG4gICAgICB0aXRsZSA9IG5vZGVNZXRhLnRpdGxlLFxuICAgICAgcHJlZml4ID0gbm9kZU1ldGEucHJlZml4LFxuICAgICAgdHJhbnNmb3JtID0gbm9kZU1ldGEudHJhbnNmb3JtLFxuICAgICAgc3ltYm9sID0gbm9kZU1ldGEuc3ltYm9sLFxuICAgICAgbWFzayA9IG5vZGVNZXRhLm1hc2ssXG4gICAgICBleHRyYSA9IG5vZGVNZXRhLmV4dHJhO1xuXG5cbiAgcmV0dXJuIFtub2RlLCBtYWtlSW5saW5lU3ZnQWJzdHJhY3Qoe1xuICAgIGljb25zOiB7XG4gICAgICBtYWluOiBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSxcbiAgICAgIG1hc2s6IGZpbmRJY29uKG1hc2suaWNvbk5hbWUsIG1hc2sucHJlZml4KVxuICAgIH0sXG4gICAgcHJlZml4OiBwcmVmaXgsXG4gICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIHN5bWJvbDogc3ltYm9sLFxuICAgIG1hc2s6IG1hc2ssXG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIGV4dHJhOiBleHRyYSxcbiAgICB3YXRjaGFibGU6IHRydWVcbiAgfSldO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUxheWVyc1RleHQobm9kZSwgbm9kZU1ldGEpIHtcbiAgdmFyIHRpdGxlID0gbm9kZU1ldGEudGl0bGUsXG4gICAgICB0cmFuc2Zvcm0gPSBub2RlTWV0YS50cmFuc2Zvcm0sXG4gICAgICBleHRyYSA9IG5vZGVNZXRhLmV4dHJhO1xuXG5cbiAgdmFyIHdpZHRoID0gbnVsbDtcbiAgdmFyIGhlaWdodCA9IG51bGw7XG5cbiAgaWYgKElTX0lFKSB7XG4gICAgdmFyIGNvbXB1dGVkRm9udFNpemUgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmZvbnRTaXplLCAxMCk7XG4gICAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgd2lkdGggPSBib3VuZGluZ0NsaWVudFJlY3Qud2lkdGggLyBjb21wdXRlZEZvbnRTaXplO1xuICAgIGhlaWdodCA9IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgLyBjb21wdXRlZEZvbnRTaXplO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5hdXRvQTExeSAmJiAhdGl0bGUpIHtcbiAgICBleHRyYS5hdHRyaWJ1dGVzWydhcmlhLWhpZGRlbiddID0gJ3RydWUnO1xuICB9XG5cbiAgcmV0dXJuIFtub2RlLCBtYWtlTGF5ZXJzVGV4dEFic3RyYWN0KHtcbiAgICBjb250ZW50OiBub2RlLmlubmVySFRNTCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIGV4dHJhOiBleHRyYSxcbiAgICB3YXRjaGFibGU6IHRydWVcbiAgfSldO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU11dGF0aW9uKG5vZGUpIHtcbiAgdmFyIG5vZGVNZXRhID0gcGFyc2VNZXRhKG5vZGUpO1xuXG4gIGlmICh+bm9kZU1ldGEuZXh0cmEuY2xhc3Nlcy5pbmRleE9mKExBWUVSU19URVhUX0NMQVNTTkFNRSkpIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVMYXllcnNUZXh0KG5vZGUsIG5vZGVNZXRhKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuZXJhdGVTdmdSZXBsYWNlbWVudE11dGF0aW9uKG5vZGUsIG5vZGVNZXRhKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZWFyY2hQc2V1ZG9FbGVtZW50cyhyb290KSB7XG4gIGlmICghSVNfRE9NKSByZXR1cm47XG5cbiAgdmFyIGVuZCA9IHBlcmYuYmVnaW4oJ3NlYXJjaFBzZXVkb0VsZW1lbnRzJyk7XG5cbiAgZGlzYWJsZU9ic2VydmF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICB0b0FycmF5KHJvb3QucXVlcnlTZWxlY3RvckFsbCgnKicpKS5maWx0ZXIoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiBuLnBhcmVudE5vZGUgIT09IGRvY3VtZW50LmhlYWQgJiYgIX5UQUdOQU1FU19UT19TS0lQX0ZPUl9QU0VVRE9FTEVNRU5UUy5pbmRleE9mKG4udGFnTmFtZS50b1VwcGVyQ2FzZSgpKSAmJiAhbi5nZXRBdHRyaWJ1dGUoREFUQV9GQV9QU0VVRE9fRUxFTUVOVCkgJiYgKCFuLnBhcmVudE5vZGUgfHwgbi5wYXJlbnROb2RlLnRhZ05hbWUgIT09ICdzdmcnKTtcbiAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBbJzpiZWZvcmUnLCAnOmFmdGVyJ10uZm9yRWFjaChmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRvQXJyYXkobm9kZS5jaGlsZHJlbik7XG4gICAgICAgIHZhciBhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCA9IGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgIHJldHVybiBjLmdldEF0dHJpYnV0ZShEQVRBX0ZBX1BTRVVET19FTEVNRU5UKSA9PT0gcG9zO1xuICAgICAgICB9KVswXTtcblxuICAgICAgICB2YXIgc3R5bGVzID0gV0lORE9XLmdldENvbXB1dGVkU3R5bGUobm9kZSwgcG9zKTtcbiAgICAgICAgdmFyIGZvbnRGYW1pbHkgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1mYW1pbHknKS5tYXRjaChGT05UX0ZBTUlMWV9QQVRURVJOKTtcbiAgICAgICAgdmFyIGZvbnRXZWlnaHQgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC13ZWlnaHQnKTtcblxuICAgICAgICBpZiAoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQgJiYgIWZvbnRGYW1pbHkpIHtcbiAgICAgICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHByb2Nlc3NlZCBpdCBidXQgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc3R5bGUgZG9lcyBub3QgcmVzdWx0IGluIGEgZm9udC1mYW1pbHksXG4gICAgICAgICAgLy8gdGhhdCBwcm9iYWJseSBtZWFucyB0aGF0IGEgY2xhc3MgbmFtZSB0aGF0IHdhcyBwcmV2aW91c2x5IHByZXNlbnQgdG8gbWFrZSB0aGUgaWNvbiBoYXMgYmVlblxuICAgICAgICAgIC8vIHJlbW92ZWQuIFNvIHdlIG5vdyBzaG91bGQgZGVsZXRlIHRoZSBpY29uLlxuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGZvbnRGYW1pbHkpIHtcbiAgICAgICAgICB2YXIgY29udGVudCA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG4gICAgICAgICAgdmFyIHByZWZpeCA9IH5bJ0xpZ2h0JywgJ1JlZ3VsYXInLCAnU29saWQnLCAnQnJhbmRzJ10uaW5kZXhPZihmb250RmFtaWx5WzFdKSA/IFNUWUxFX1RPX1BSRUZJWFtmb250RmFtaWx5WzFdXSA6IEZPTlRfV0VJR0hUX1RPX1BSRUZJWFtmb250V2VpZ2h0XTtcbiAgICAgICAgICB2YXIgaWNvbk5hbWUgPSBieVVuaWNvZGUocHJlZml4LCB0b0hleChjb250ZW50Lmxlbmd0aCA9PT0gMyA/IGNvbnRlbnQuc3Vic3RyKDEsIDEpIDogY29udGVudCkpO1xuICAgICAgICAgIC8vIE9ubHkgY29udmVydCB0aGUgcHNldWRvIGVsZW1lbnQgaW4gdGhpcyA6YmVmb3JlLzphZnRlciBwb3NpdGlvbiBpbnRvIGFuIGljb24gaWYgd2UgaGF2ZW4ndFxuICAgICAgICAgIC8vIGFscmVhZHkgZG9uZSBzbyB3aXRoIHRoZSBzYW1lIHByZWZpeCBhbmQgaWNvbk5hbWVcbiAgICAgICAgICBpZiAoIWFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50IHx8IGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50LmdldEF0dHJpYnV0ZShEQVRBX1BSRUZJWCkgIT09IHByZWZpeCB8fCBhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudC5nZXRBdHRyaWJ1dGUoREFUQV9JQ09OKSAhPT0gaWNvbk5hbWUpIHtcbiAgICAgICAgICAgIGlmIChhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCkge1xuICAgICAgICAgICAgICAvLyBEZWxldGUgdGhlIG9sZCBvbmUsIHNpbmNlIHdlJ3JlIHJlcGxhY2luZyBpdCB3aXRoIGEgbmV3IG9uZVxuICAgICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGV4dHJhID0gYmxhbmtNZXRhLmV4dHJhO1xuXG4gICAgICAgICAgICBleHRyYS5hdHRyaWJ1dGVzW0RBVEFfRkFfUFNFVURPX0VMRU1FTlRdID0gcG9zO1xuICAgICAgICAgICAgdmFyIGFic3RyYWN0ID0gbWFrZUlubGluZVN2Z0Fic3RyYWN0KF9leHRlbmRzKHt9LCBibGFua01ldGEsIHtcbiAgICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgICBtYWluOiBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSxcbiAgICAgICAgICAgICAgICBtYXNrOiBlbXB0eUNhbm9uaWNhbEljb24oKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgICAgIHdhdGNoYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ3N2ZycpO1xuXG4gICAgICAgICAgICBpZiAocG9zID09PSAnOmJlZm9yZScpIHtcbiAgICAgICAgICAgICAgbm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgbm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnQub3V0ZXJIVE1MID0gYWJzdHJhY3QubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBlbmQoKTtcbn1cblxuZnVuY3Rpb24gb25UcmVlKHJvb3QpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gIGlmICghSVNfRE9NKSByZXR1cm47XG5cbiAgdmFyIGh0bWxDbGFzc0xpc3QgPSBET0NVTUVOVC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0O1xuICB2YXIgaGNsQWRkID0gZnVuY3Rpb24gaGNsQWRkKHN1ZmZpeCkge1xuICAgIHJldHVybiBodG1sQ2xhc3NMaXN0LmFkZChIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MgKyAnLScgKyBzdWZmaXgpO1xuICB9O1xuICB2YXIgaGNsUmVtb3ZlID0gZnVuY3Rpb24gaGNsUmVtb3ZlKHN1ZmZpeCkge1xuICAgIHJldHVybiBodG1sQ2xhc3NMaXN0LnJlbW92ZShIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MgKyAnLScgKyBzdWZmaXgpO1xuICB9O1xuICB2YXIgcHJlZml4ZXMgPSBPYmplY3Qua2V5cyhzdHlsZXMpO1xuICB2YXIgcHJlZml4ZXNEb21RdWVyeSA9IFsnLicgKyBMQVlFUlNfVEVYVF9DTEFTU05BTUUgKyAnOm5vdChbJyArIERBVEFfRkFfSTJTVkcgKyAnXSknXS5jb25jYXQocHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwKSB7XG4gICAgcmV0dXJuICcuJyArIHAgKyAnOm5vdChbJyArIERBVEFfRkFfSTJTVkcgKyAnXSknO1xuICB9KSkuam9pbignLCAnKTtcblxuICBpZiAocHJlZml4ZXNEb21RdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY2FuZGlkYXRlcyA9IHRvQXJyYXkocm9vdC5xdWVyeVNlbGVjdG9yQWxsKHByZWZpeGVzRG9tUXVlcnkpKTtcblxuICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgaGNsQWRkKCdwZW5kaW5nJyk7XG4gICAgaGNsUmVtb3ZlKCdjb21wbGV0ZScpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtYXJrID0gcGVyZi5iZWdpbignb25UcmVlJyk7XG5cbiAgdmFyIG11dGF0aW9ucyA9IGNhbmRpZGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG11dGF0aW9uID0gZ2VuZXJhdGVNdXRhdGlvbihub2RlKTtcblxuICAgICAgaWYgKG11dGF0aW9uKSB7XG4gICAgICAgIGFjYy5wdXNoKG11dGF0aW9uKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoIVBST0RVQ1RJT04pIHtcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBNaXNzaW5nSWNvbikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9LCBbXSk7XG5cbiAgbWFyaygpO1xuXG4gIHBlcmZvcm0obXV0YXRpb25zLCBmdW5jdGlvbiAoKSB7XG4gICAgaGNsQWRkKCdhY3RpdmUnKTtcbiAgICBoY2xBZGQoJ2NvbXBsZXRlJyk7XG4gICAgaGNsUmVtb3ZlKCdwZW5kaW5nJyk7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25Ob2RlKG5vZGUpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuXG4gIHZhciBtdXRhdGlvbiA9IGdlbmVyYXRlTXV0YXRpb24obm9kZSk7XG5cbiAgaWYgKG11dGF0aW9uKSB7XG4gICAgcGVyZm9ybShbbXV0YXRpb25dLCBjYWxsYmFjayk7XG4gIH1cbn1cblxudmFyIGJhc2VTdHlsZXMgPSBcInN2Zzpub3QoOnJvb3QpLnN2Zy1pbmxpbmUtLWZhIHtcXG4gIG92ZXJmbG93OiB2aXNpYmxlOyB9XFxuXFxuLnN2Zy1pbmxpbmUtLWZhIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcXG4gIGhlaWdodDogMWVtO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICB2ZXJ0aWNhbC1hbGlnbjogLS4xMjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLWxnIHtcXG4gICAgdmVydGljYWwtYWxpZ246IC0uMjI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTEge1xcbiAgICB3aWR0aDogMC4wNjI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTIge1xcbiAgICB3aWR0aDogMC4xMjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMyB7XFxuICAgIHdpZHRoOiAwLjE4NzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctNCB7XFxuICAgIHdpZHRoOiAwLjI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTUge1xcbiAgICB3aWR0aDogMC4zMTI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTYge1xcbiAgICB3aWR0aDogMC4zNzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctNyB7XFxuICAgIHdpZHRoOiAwLjQzNzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctOCB7XFxuICAgIHdpZHRoOiAwLjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctOSB7XFxuICAgIHdpZHRoOiAwLjU2MjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMTAge1xcbiAgICB3aWR0aDogMC42MjVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMTEge1xcbiAgICB3aWR0aDogMC42ODc1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTEyIHtcXG4gICAgd2lkdGg6IDAuNzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMTMge1xcbiAgICB3aWR0aDogMC44MTI1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTE0IHtcXG4gICAgd2lkdGg6IDAuODc1ZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTE1IHtcXG4gICAgd2lkdGg6IDAuOTM3NWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtdy0xNiB7XFxuICAgIHdpZHRoOiAxZW07IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS13LTE3IHtcXG4gICAgd2lkdGg6IDEuMDYyNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtdy0xOCB7XFxuICAgIHdpZHRoOiAxLjEyNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtdy0xOSB7XFxuICAgIHdpZHRoOiAxLjE4NzVlbTsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXctMjAge1xcbiAgICB3aWR0aDogMS4yNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtcHVsbC1sZWZ0IHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAuM2VtO1xcbiAgICB3aWR0aDogYXV0bzsgfVxcbiAgLnN2Zy1pbmxpbmUtLWZhLmZhLXB1bGwtcmlnaHQge1xcbiAgICBtYXJnaW4tbGVmdDogLjNlbTtcXG4gICAgd2lkdGg6IGF1dG87IH1cXG4gIC5zdmctaW5saW5lLS1mYS5mYS1ib3JkZXIge1xcbiAgICBoZWlnaHQ6IDEuNWVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtbGkge1xcbiAgICB3aWR0aDogMmVtOyB9XFxuICAuc3ZnLWlubGluZS0tZmEuZmEtZncge1xcbiAgICB3aWR0aDogMS4yNWVtOyB9XFxuXFxuLmZhLWxheWVycyBzdmcuc3ZnLWlubGluZS0tZmEge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwOyB9XFxuXFxuLmZhLWxheWVycyB7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICBoZWlnaHQ6IDFlbTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHZlcnRpY2FsLWFsaWduOiAtLjEyNWVtO1xcbiAgd2lkdGg6IDFlbTsgfVxcbiAgLmZhLWxheWVycyBzdmcuc3ZnLWlubGluZS0tZmEge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XFxuICAgICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogY2VudGVyIGNlbnRlcjsgfVxcblxcbi5mYS1sYXllcnMtdGV4dCwgLmZhLWxheWVycy1jb3VudGVyIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjsgfVxcblxcbi5mYS1sYXllcnMtdGV4dCB7XFxuICBsZWZ0OiA1MCU7XFxuICB0b3A6IDUwJTtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyOyB9XFxuXFxuLmZhLWxheWVycy1jb3VudGVyIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjI1M2E7XFxuICBib3JkZXItcmFkaXVzOiAxZW07XFxuICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGhlaWdodDogMS41ZW07XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIG1heC13aWR0aDogNWVtO1xcbiAgbWluLXdpZHRoOiAxLjVlbTtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nOiAuMjVlbTtcXG4gIHJpZ2h0OiAwO1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB0b3A6IDA7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIHJpZ2h0OyB9XFxuXFxuLmZhLWxheWVycy1ib3R0b20tcmlnaHQge1xcbiAgYm90dG9tOiAwO1xcbiAgcmlnaHQ6IDA7XFxuICB0b3A6IGF1dG87XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSByaWdodDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogYm90dG9tIHJpZ2h0OyB9XFxuXFxuLmZhLWxheWVycy1ib3R0b20tbGVmdCB7XFxuICBib3R0b206IDA7XFxuICBsZWZ0OiAwO1xcbiAgcmlnaHQ6IGF1dG87XFxuICB0b3A6IGF1dG87XFxuICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGJvdHRvbSBsZWZ0O1xcbiAgICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBib3R0b20gbGVmdDsgfVxcblxcbi5mYS1sYXllcnMtdG9wLXJpZ2h0IHtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgcmlnaHQ7XFxuICAgICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDsgfVxcblxcbi5mYS1sYXllcnMtdG9wLWxlZnQge1xcbiAgbGVmdDogMDtcXG4gIHJpZ2h0OiBhdXRvO1xcbiAgdG9wOiAwO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiB0b3AgbGVmdDtcXG4gICAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7IH1cXG5cXG4uZmEtbGcge1xcbiAgZm9udC1zaXplOiAxLjMzMzMzZW07XFxuICBsaW5lLWhlaWdodDogMC43NWVtO1xcbiAgdmVydGljYWwtYWxpZ246IC0uMDY2N2VtOyB9XFxuXFxuLmZhLXhzIHtcXG4gIGZvbnQtc2l6ZTogLjc1ZW07IH1cXG5cXG4uZmEtc20ge1xcbiAgZm9udC1zaXplOiAuODc1ZW07IH1cXG5cXG4uZmEtMXgge1xcbiAgZm9udC1zaXplOiAxZW07IH1cXG5cXG4uZmEtMngge1xcbiAgZm9udC1zaXplOiAyZW07IH1cXG5cXG4uZmEtM3gge1xcbiAgZm9udC1zaXplOiAzZW07IH1cXG5cXG4uZmEtNHgge1xcbiAgZm9udC1zaXplOiA0ZW07IH1cXG5cXG4uZmEtNXgge1xcbiAgZm9udC1zaXplOiA1ZW07IH1cXG5cXG4uZmEtNngge1xcbiAgZm9udC1zaXplOiA2ZW07IH1cXG5cXG4uZmEtN3gge1xcbiAgZm9udC1zaXplOiA3ZW07IH1cXG5cXG4uZmEtOHgge1xcbiAgZm9udC1zaXplOiA4ZW07IH1cXG5cXG4uZmEtOXgge1xcbiAgZm9udC1zaXplOiA5ZW07IH1cXG5cXG4uZmEtMTB4IHtcXG4gIGZvbnQtc2l6ZTogMTBlbTsgfVxcblxcbi5mYS1mdyB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB3aWR0aDogMS4yNWVtOyB9XFxuXFxuLmZhLXVsIHtcXG4gIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcXG4gIG1hcmdpbi1sZWZ0OiAyLjVlbTtcXG4gIHBhZGRpbmctbGVmdDogMDsgfVxcbiAgLmZhLXVsID4gbGkge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7IH1cXG5cXG4uZmEtbGkge1xcbiAgbGVmdDogLTJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIHdpZHRoOiAyZW07XFxuICBsaW5lLWhlaWdodDogaW5oZXJpdDsgfVxcblxcbi5mYS1ib3JkZXIge1xcbiAgYm9yZGVyOiBzb2xpZCAwLjA4ZW0gI2VlZTtcXG4gIGJvcmRlci1yYWRpdXM6IC4xZW07XFxuICBwYWRkaW5nOiAuMmVtIC4yNWVtIC4xNWVtOyB9XFxuXFxuLmZhLXB1bGwtbGVmdCB7XFxuICBmbG9hdDogbGVmdDsgfVxcblxcbi5mYS1wdWxsLXJpZ2h0IHtcXG4gIGZsb2F0OiByaWdodDsgfVxcblxcbi5mYS5mYS1wdWxsLWxlZnQsXFxuLmZhcy5mYS1wdWxsLWxlZnQsXFxuLmZhci5mYS1wdWxsLWxlZnQsXFxuLmZhbC5mYS1wdWxsLWxlZnQsXFxuLmZhYi5mYS1wdWxsLWxlZnQge1xcbiAgbWFyZ2luLXJpZ2h0OiAuM2VtOyB9XFxuXFxuLmZhLmZhLXB1bGwtcmlnaHQsXFxuLmZhcy5mYS1wdWxsLXJpZ2h0LFxcbi5mYXIuZmEtcHVsbC1yaWdodCxcXG4uZmFsLmZhLXB1bGwtcmlnaHQsXFxuLmZhYi5mYS1wdWxsLXJpZ2h0IHtcXG4gIG1hcmdpbi1sZWZ0OiAuM2VtOyB9XFxuXFxuLmZhLXNwaW4ge1xcbiAgLXdlYmtpdC1hbmltYXRpb246IGZhLXNwaW4gMnMgaW5maW5pdGUgbGluZWFyO1xcbiAgICAgICAgICBhbmltYXRpb246IGZhLXNwaW4gMnMgaW5maW5pdGUgbGluZWFyOyB9XFxuXFxuLmZhLXB1bHNlIHtcXG4gIC13ZWJraXQtYW5pbWF0aW9uOiBmYS1zcGluIDFzIGluZmluaXRlIHN0ZXBzKDgpO1xcbiAgICAgICAgICBhbmltYXRpb246IGZhLXNwaW4gMXMgaW5maW5pdGUgc3RlcHMoOCk7IH1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgZmEtc3BpbiB7XFxuICAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cXG4gIDEwMCUge1xcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XFxuICAgICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfSB9XFxuXFxuQGtleWZyYW1lcyBmYS1zcGluIHtcXG4gIDAlIHtcXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTsgfVxcbiAgMTAwJSB7XFxuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB9IH1cXG5cXG4uZmEtcm90YXRlLTkwIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0xKVxcXCI7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDkwZGVnKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoOTBkZWcpOyB9XFxuXFxuLmZhLXJvdGF0ZS0xODAge1xcbiAgLW1zLWZpbHRlcjogXFxcInByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5CYXNpY0ltYWdlKHJvdGF0aW9uPTIpXFxcIjtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsgfVxcblxcbi5mYS1yb3RhdGUtMjcwIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0zKVxcXCI7XFxuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDI3MGRlZyk7IH1cXG5cXG4uZmEtZmxpcC1ob3Jpem9udGFsIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0wLCBtaXJyb3I9MSlcXFwiO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKC0xLCAxKTtcXG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgtMSwgMSk7IH1cXG5cXG4uZmEtZmxpcC12ZXJ0aWNhbCB7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkJhc2ljSW1hZ2Uocm90YXRpb249MiwgbWlycm9yPTEpXFxcIjtcXG4gIC13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAtMSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSwgLTEpOyB9XFxuXFxuLmZhLWZsaXAtaG9yaXpvbnRhbC5mYS1mbGlwLXZlcnRpY2FsIHtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQmFzaWNJbWFnZShyb3RhdGlvbj0yLCBtaXJyb3I9MSlcXFwiO1xcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKC0xLCAtMSk7XFxuICAgICAgICAgIHRyYW5zZm9ybTogc2NhbGUoLTEsIC0xKTsgfVxcblxcbjpyb290IC5mYS1yb3RhdGUtOTAsXFxuOnJvb3QgLmZhLXJvdGF0ZS0xODAsXFxuOnJvb3QgLmZhLXJvdGF0ZS0yNzAsXFxuOnJvb3QgLmZhLWZsaXAtaG9yaXpvbnRhbCxcXG46cm9vdCAuZmEtZmxpcC12ZXJ0aWNhbCB7XFxuICAtd2Via2l0LWZpbHRlcjogbm9uZTtcXG4gICAgICAgICAgZmlsdGVyOiBub25lOyB9XFxuXFxuLmZhLXN0YWNrIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGhlaWdodDogMmVtO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2lkdGg6IDJlbTsgfVxcblxcbi5mYS1zdGFjay0xeCxcXG4uZmEtc3RhY2stMngge1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogYXV0bztcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAwO1xcbiAgdG9wOiAwOyB9XFxuXFxuLnN2Zy1pbmxpbmUtLWZhLmZhLXN0YWNrLTF4IHtcXG4gIGhlaWdodDogMWVtO1xcbiAgd2lkdGg6IDFlbTsgfVxcblxcbi5zdmctaW5saW5lLS1mYS5mYS1zdGFjay0yeCB7XFxuICBoZWlnaHQ6IDJlbTtcXG4gIHdpZHRoOiAyZW07IH1cXG5cXG4uZmEtaW52ZXJzZSB7XFxuICBjb2xvcjogI2ZmZjsgfVxcblxcbi5zci1vbmx5IHtcXG4gIGJvcmRlcjogMDtcXG4gIGNsaXA6IHJlY3QoMCwgMCwgMCwgMCk7XFxuICBoZWlnaHQ6IDFweDtcXG4gIG1hcmdpbjogLTFweDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICBwYWRkaW5nOiAwO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgd2lkdGg6IDFweDsgfVxcblxcbi5zci1vbmx5LWZvY3VzYWJsZTphY3RpdmUsIC5zci1vbmx5LWZvY3VzYWJsZTpmb2N1cyB7XFxuICBjbGlwOiBhdXRvO1xcbiAgaGVpZ2h0OiBhdXRvO1xcbiAgbWFyZ2luOiAwO1xcbiAgb3ZlcmZsb3c6IHZpc2libGU7XFxuICBwb3NpdGlvbjogc3RhdGljO1xcbiAgd2lkdGg6IGF1dG87IH1cXG5cIjtcblxudmFyIGNzcyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGRmcCA9IERFRkFVTFRfRkFNSUxZX1BSRUZJWDtcbiAgdmFyIGRyYyA9IERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1M7XG4gIHZhciBmcCA9IGNvbmZpZy5mYW1pbHlQcmVmaXg7XG4gIHZhciByYyA9IGNvbmZpZy5yZXBsYWNlbWVudENsYXNzO1xuICB2YXIgcyA9IGJhc2VTdHlsZXM7XG5cbiAgaWYgKGZwICE9PSBkZnAgfHwgcmMgIT09IGRyYykge1xuICAgIHZhciBkUGF0dCA9IG5ldyBSZWdFeHAoJ1xcXFwuJyArIGRmcCArICdcXFxcLScsICdnJyk7XG4gICAgdmFyIHJQYXR0ID0gbmV3IFJlZ0V4cCgnXFxcXC4nICsgZHJjLCAnZycpO1xuXG4gICAgcyA9IHMucmVwbGFjZShkUGF0dCwgJy4nICsgZnAgKyAnLScpLnJlcGxhY2UoclBhdHQsICcuJyArIHJjKTtcbiAgfVxuXG4gIHJldHVybiBzO1xufTtcblxuZnVuY3Rpb24gZGVmaW5lKHByZWZpeCwgaWNvbnMpIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBPYmplY3Qua2V5cyhpY29ucykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGljb25OYW1lKSB7XG4gICAgdmFyIGljb24gPSBpY29uc1tpY29uTmFtZV07XG4gICAgdmFyIGV4cGFuZGVkID0gISFpY29uLmljb247XG5cbiAgICBpZiAoZXhwYW5kZWQpIHtcbiAgICAgIGFjY1tpY29uLmljb25OYW1lXSA9IGljb24uaWNvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgYWNjW2ljb25OYW1lXSA9IGljb247XG4gICAgfVxuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcblxuICBpZiAodHlwZW9mIG5hbWVzcGFjZS5ob29rcy5hZGRQYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgbmFtZXNwYWNlLmhvb2tzLmFkZFBhY2socHJlZml4LCBub3JtYWxpemVkKTtcbiAgfSBlbHNlIHtcbiAgICBuYW1lc3BhY2Uuc3R5bGVzW3ByZWZpeF0gPSBfZXh0ZW5kcyh7fSwgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdIHx8IHt9LCBub3JtYWxpemVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb250IEF3ZXNvbWUgNCB1c2VkIHRoZSBwcmVmaXggb2YgYGZhYCBmb3IgYWxsIGljb25zLiBXaXRoIHRoZSBpbnRyb2R1Y3Rpb25cbiAgICogb2YgbmV3IHN0eWxlcyB3ZSBuZWVkZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZW0uIFByZWZpeCBgZmFgIGlzIG5vdyBhbiBhbGlhc1xuICAgKiBmb3IgYGZhc2Agc28gd2UnbGwgZWFzeSB0aGUgdXBncmFkZSBwcm9jZXNzIGZvciBvdXIgdXNlcnMgYnkgYXV0b21hdGljYWxseSBkZWZpbmluZ1xuICAgKiB0aGlzIGFzIHdlbGwuXG4gICAqL1xuICBpZiAocHJlZml4ID09PSAnZmFzJykge1xuICAgIGRlZmluZSgnZmEnLCBpY29ucyk7XG4gIH1cbn1cblxudmFyIExpYnJhcnkgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExpYnJhcnkoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlicmFyeSk7XG5cbiAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gIH1cblxuICBjcmVhdGVDbGFzcyhMaWJyYXJ5LCBbe1xuICAgIGtleTogJ2FkZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkZWZpbml0aW9ucyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBkZWZpbml0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFkZGl0aW9ucyA9IGRlZmluaXRpb25zLnJlZHVjZSh0aGlzLl9wdWxsRGVmaW5pdGlvbnMsIHt9KTtcblxuICAgICAgT2JqZWN0LmtleXMoYWRkaXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX3RoaXMuZGVmaW5pdGlvbnNba2V5XSA9IF9leHRlbmRzKHt9LCBfdGhpcy5kZWZpbml0aW9uc1trZXldIHx8IHt9LCBhZGRpdGlvbnNba2V5XSk7XG4gICAgICAgIGRlZmluZShrZXksIGFkZGl0aW9uc1trZXldKTtcbiAgICAgICAgYnVpbGQoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Jlc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3B1bGxEZWZpbml0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wdWxsRGVmaW5pdGlvbnMoYWRkaXRpb25zLCBkZWZpbml0aW9uKSB7XG4gICAgICB2YXIgbm9ybWFsaXplZCA9IGRlZmluaXRpb24ucHJlZml4ICYmIGRlZmluaXRpb24uaWNvbk5hbWUgJiYgZGVmaW5pdGlvbi5pY29uID8geyAwOiBkZWZpbml0aW9uIH0gOiBkZWZpbml0aW9uO1xuXG4gICAgICBPYmplY3Qua2V5cyhub3JtYWxpemVkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgX25vcm1hbGl6ZWQka2V5ID0gbm9ybWFsaXplZFtrZXldLFxuICAgICAgICAgICAgcHJlZml4ID0gX25vcm1hbGl6ZWQka2V5LnByZWZpeCxcbiAgICAgICAgICAgIGljb25OYW1lID0gX25vcm1hbGl6ZWQka2V5Lmljb25OYW1lLFxuICAgICAgICAgICAgaWNvbiA9IF9ub3JtYWxpemVkJGtleS5pY29uO1xuXG5cbiAgICAgICAgaWYgKCFhZGRpdGlvbnNbcHJlZml4XSkgYWRkaXRpb25zW3ByZWZpeF0gPSB7fTtcblxuICAgICAgICBhZGRpdGlvbnNbcHJlZml4XVtpY29uTmFtZV0gPSBpY29uO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBhZGRpdGlvbnM7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBMaWJyYXJ5O1xufSgpO1xuXG5mdW5jdGlvbiBwcmVwSWNvbihpY29uKSB7XG4gIHZhciB3aWR0aCA9IGljb25bMF07XG4gIHZhciBoZWlnaHQgPSBpY29uWzFdO1xuICB2YXIgdmVjdG9yRGF0YSA9IGljb24uc2xpY2UoNCk7XG5cbiAgcmV0dXJuIHtcbiAgICBmb3VuZDogdHJ1ZSxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgaWNvbjogeyB0YWc6ICdwYXRoJywgYXR0cmlidXRlczogeyBmaWxsOiAnY3VycmVudENvbG9yJywgZDogdmVjdG9yRGF0YVswXSB9IH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlQ3NzKCkge1xuICBpZiAoY29uZmlnLmF1dG9BZGRDc3MgJiYgIV9jc3NJbnNlcnRlZCkge1xuICAgIGluc2VydENzcyhjc3MoKSk7XG4gICAgX2Nzc0luc2VydGVkID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhcGlPYmplY3QodmFsLCBhYnN0cmFjdENyZWF0b3IpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ2Fic3RyYWN0Jywge1xuICAgIGdldDogYWJzdHJhY3RDcmVhdG9yXG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWwsICdodG1sJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbC5hYnN0cmFjdC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIHRvSHRtbChhKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ25vZGUnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuXG4gICAgICB2YXIgY29udGFpbmVyID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBjb250YWluZXIuaW5uZXJIVE1MID0gdmFsLmh0bWw7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZmluZEljb25EZWZpbml0aW9uKHBhcmFtcykge1xuICB2YXIgX3BhcmFtcyRwcmVmaXggPSBwYXJhbXMucHJlZml4LFxuICAgICAgcHJlZml4ID0gX3BhcmFtcyRwcmVmaXggPT09IHVuZGVmaW5lZCA/ICdmYScgOiBfcGFyYW1zJHByZWZpeCxcbiAgICAgIGljb25OYW1lID0gcGFyYW1zLmljb25OYW1lO1xuXG5cbiAgaWYgKCFpY29uTmFtZSkgcmV0dXJuO1xuXG4gIHJldHVybiBpY29uRnJvbU1hcHBpbmcobGlicmFyeS5kZWZpbml0aW9ucywgcHJlZml4LCBpY29uTmFtZSkgfHwgaWNvbkZyb21NYXBwaW5nKG5hbWVzcGFjZS5zdHlsZXMsIHByZWZpeCwgaWNvbk5hbWUpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlSWNvbnMobmV4dCkge1xuICByZXR1cm4gZnVuY3Rpb24gKG1heWJlSWNvbkRlZmluaXRpb24pIHtcbiAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBpY29uRGVmaW5pdGlvbiA9IChtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KS5pY29uID8gbWF5YmVJY29uRGVmaW5pdGlvbiA6IGZpbmRJY29uRGVmaW5pdGlvbihtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KTtcblxuICAgIHZhciBtYXNrID0gcGFyYW1zLm1hc2s7XG5cblxuICAgIGlmIChtYXNrKSB7XG4gICAgICBtYXNrID0gKG1hc2sgfHwge30pLmljb24gPyBtYXNrIDogZmluZEljb25EZWZpbml0aW9uKG1hc2sgfHwge30pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXh0KGljb25EZWZpbml0aW9uLCBfZXh0ZW5kcyh7fSwgcGFyYW1zLCB7IG1hc2s6IG1hc2sgfSkpO1xuICB9O1xufVxuXG52YXIgbGlicmFyeSA9IG5ldyBMaWJyYXJ5KCk7XG5cbnZhciBub0F1dG8gPSBmdW5jdGlvbiBub0F1dG8oKSB7XG4gIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9IGZhbHNlO1xuICBjb25maWcub2JzZXJ2ZU11dGF0aW9ucyA9IGZhbHNlO1xuXG4gIGRpc2Nvbm5lY3QoKTtcbn07XG5cbnZhciBfY3NzSW5zZXJ0ZWQgPSBmYWxzZTtcblxudmFyIGRvbSA9IHtcbiAgaTJzdmc6IGZ1bmN0aW9uIGkyc3ZnKCkge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICAgaWYgKElTX0RPTSkge1xuICAgICAgZW5zdXJlQ3NzKCk7XG5cbiAgICAgIHZhciBfcGFyYW1zJG5vZGUgPSBwYXJhbXMubm9kZSxcbiAgICAgICAgICBub2RlID0gX3BhcmFtcyRub2RlID09PSB1bmRlZmluZWQgPyBET0NVTUVOVCA6IF9wYXJhbXMkbm9kZSxcbiAgICAgICAgICBfcGFyYW1zJGNhbGxiYWNrID0gcGFyYW1zLmNhbGxiYWNrLFxuICAgICAgICAgIGNhbGxiYWNrID0gX3BhcmFtcyRjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gZnVuY3Rpb24gKCkge30gOiBfcGFyYW1zJGNhbGxiYWNrO1xuXG5cbiAgICAgIGlmIChjb25maWcuc2VhcmNoUHNldWRvRWxlbWVudHMpIHtcbiAgICAgICAgc2VhcmNoUHNldWRvRWxlbWVudHMobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIG9uVHJlZShub2RlLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIGNzczogY3NzLFxuXG4gIGluc2VydENzczogZnVuY3Rpb24gaW5zZXJ0Q3NzJCQxKCkge1xuICAgIGlmICghX2Nzc0luc2VydGVkKSB7XG4gICAgICBpbnNlcnRDc3MoY3NzKCkpO1xuICAgICAgX2Nzc0luc2VydGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0sXG5cbiAgd2F0Y2g6IGZ1bmN0aW9uIHdhdGNoKCkge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBhdXRvUmVwbGFjZVN2Z1Jvb3QgPSBwYXJhbXMuYXV0b1JlcGxhY2VTdmdSb290LFxuICAgICAgICBvYnNlcnZlTXV0YXRpb25zUm9vdCA9IHBhcmFtcy5vYnNlcnZlTXV0YXRpb25zUm9vdDtcblxuXG4gICAgaWYgKGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9PT0gZmFsc2UpIHtcbiAgICAgIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9IHRydWU7XG4gICAgfVxuXG4gICAgY29uZmlnLm9ic2VydmVNdXRhdGlvbnMgPSB0cnVlO1xuXG4gICAgZG9tcmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgYXV0b1JlcGxhY2Uoe1xuICAgICAgICBhdXRvUmVwbGFjZVN2Z1Jvb3Q6IGF1dG9SZXBsYWNlU3ZnUm9vdFxuICAgICAgfSk7XG5cbiAgICAgIG9ic2VydmUoe1xuICAgICAgICB0cmVlQ2FsbGJhY2s6IG9uVHJlZSxcbiAgICAgICAgbm9kZUNhbGxiYWNrOiBvbk5vZGUsXG4gICAgICAgIHBzZXVkb0VsZW1lbnRzQ2FsbGJhY2s6IHNlYXJjaFBzZXVkb0VsZW1lbnRzLFxuICAgICAgICBvYnNlcnZlTXV0YXRpb25zUm9vdDogb2JzZXJ2ZU11dGF0aW9uc1Jvb3RcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG52YXIgcGFyc2UgPSB7XG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybVN0cmluZykge1xuICAgIHJldHVybiBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpO1xuICB9XG59O1xuXG52YXIgaWNvbiA9IHJlc29sdmVJY29ucyhmdW5jdGlvbiAoaWNvbkRlZmluaXRpb24pIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfcGFyYW1zJHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICB0cmFuc2Zvcm0gPSBfcGFyYW1zJHRyYW5zZm9ybSA9PT0gdW5kZWZpbmVkID8gbWVhbmluZ2xlc3NUcmFuc2Zvcm0gOiBfcGFyYW1zJHRyYW5zZm9ybSxcbiAgICAgIF9wYXJhbXMkc3ltYm9sID0gcGFyYW1zLnN5bWJvbCxcbiAgICAgIHN5bWJvbCA9IF9wYXJhbXMkc3ltYm9sID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wYXJhbXMkc3ltYm9sLFxuICAgICAgX3BhcmFtcyRtYXNrID0gcGFyYW1zLm1hc2ssXG4gICAgICBtYXNrID0gX3BhcmFtcyRtYXNrID09PSB1bmRlZmluZWQgPyBudWxsIDogX3BhcmFtcyRtYXNrLFxuICAgICAgX3BhcmFtcyR0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IF9wYXJhbXMkdGl0bGUsXG4gICAgICBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHVuZGVmaW5lZCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzLFxuICAgICAgX3BhcmFtcyRhdHRyaWJ1dGVzID0gcGFyYW1zLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9wYXJhbXMkYXR0cmlidXRlcyxcbiAgICAgIF9wYXJhbXMkc3R5bGVzID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgIHN0eWxlcyA9IF9wYXJhbXMkc3R5bGVzID09PSB1bmRlZmluZWQgPyB7fSA6IF9wYXJhbXMkc3R5bGVzO1xuXG5cbiAgaWYgKCFpY29uRGVmaW5pdGlvbikgcmV0dXJuO1xuXG4gIHZhciBwcmVmaXggPSBpY29uRGVmaW5pdGlvbi5wcmVmaXgsXG4gICAgICBpY29uTmFtZSA9IGljb25EZWZpbml0aW9uLmljb25OYW1lLFxuICAgICAgaWNvbiA9IGljb25EZWZpbml0aW9uLmljb247XG5cblxuICByZXR1cm4gYXBpT2JqZWN0KF9leHRlbmRzKHsgdHlwZTogJ2ljb24nIH0sIGljb25EZWZpbml0aW9uKSwgZnVuY3Rpb24gKCkge1xuICAgIGVuc3VyZUNzcygpO1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvQTExeSkge1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddID0gY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MgKyAnLXRpdGxlLScgKyBuZXh0VW5pcXVlSWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGF0dHJpYnV0ZXNbJ2FyaWEtaGlkZGVuJ10gPSAndHJ1ZSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VJbmxpbmVTdmdBYnN0cmFjdCh7XG4gICAgICBpY29uczoge1xuICAgICAgICBtYWluOiBwcmVwSWNvbihpY29uKSxcbiAgICAgICAgbWFzazogbWFzayA/IHByZXBJY29uKG1hc2suaWNvbikgOiB7IGZvdW5kOiBmYWxzZSwgd2lkdGg6IG51bGwsIGhlaWdodDogbnVsbCwgaWNvbjoge30gfVxuICAgICAgfSxcbiAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgdHJhbnNmb3JtOiBfZXh0ZW5kcyh7fSwgbWVhbmluZ2xlc3NUcmFuc2Zvcm0sIHRyYW5zZm9ybSksXG4gICAgICBzeW1ib2w6IHN5bWJvbCxcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIGV4dHJhOiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICBjbGFzc2VzOiBjbGFzc2VzXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbnZhciB0ZXh0ID0gZnVuY3Rpb24gdGV4dChjb250ZW50KSB7XG4gIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICB2YXIgX3BhcmFtcyR0cmFuc2Zvcm0yID0gcGFyYW1zLnRyYW5zZm9ybSxcbiAgICAgIHRyYW5zZm9ybSA9IF9wYXJhbXMkdHJhbnNmb3JtMiA9PT0gdW5kZWZpbmVkID8gbWVhbmluZ2xlc3NUcmFuc2Zvcm0gOiBfcGFyYW1zJHRyYW5zZm9ybTIsXG4gICAgICBfcGFyYW1zJHRpdGxlMiA9IHBhcmFtcy50aXRsZSxcbiAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZTIgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBfcGFyYW1zJHRpdGxlMixcbiAgICAgIF9wYXJhbXMkY2xhc3NlczIgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMyID09PSB1bmRlZmluZWQgPyBbXSA6IF9wYXJhbXMkY2xhc3NlczIsXG4gICAgICBfcGFyYW1zJGF0dHJpYnV0ZXMyID0gcGFyYW1zLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzMiA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFyYW1zJGF0dHJpYnV0ZXMyLFxuICAgICAgX3BhcmFtcyRzdHlsZXMyID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgIHN0eWxlcyA9IF9wYXJhbXMkc3R5bGVzMiA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFyYW1zJHN0eWxlczI7XG5cblxuICByZXR1cm4gYXBpT2JqZWN0KHsgdHlwZTogJ3RleHQnLCBjb250ZW50OiBjb250ZW50IH0sIGZ1bmN0aW9uICgpIHtcbiAgICBlbnN1cmVDc3MoKTtcblxuICAgIHJldHVybiBtYWtlTGF5ZXJzVGV4dEFic3RyYWN0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQsXG4gICAgICB0cmFuc2Zvcm06IF9leHRlbmRzKHt9LCBtZWFuaW5nbGVzc1RyYW5zZm9ybSwgdHJhbnNmb3JtKSxcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIGV4dHJhOiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICBjbGFzc2VzOiBbY29uZmlnLmZhbWlseVByZWZpeCArICctbGF5ZXJzLXRleHQnXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkoY2xhc3NlcykpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGNvdW50ZXIgPSBmdW5jdGlvbiBjb3VudGVyKGNvbnRlbnQpIHtcbiAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHZhciBfcGFyYW1zJHRpdGxlMyA9IHBhcmFtcy50aXRsZSxcbiAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZTMgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBfcGFyYW1zJHRpdGxlMyxcbiAgICAgIF9wYXJhbXMkY2xhc3NlczMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMzID09PSB1bmRlZmluZWQgPyBbXSA6IF9wYXJhbXMkY2xhc3NlczMsXG4gICAgICBfcGFyYW1zJGF0dHJpYnV0ZXMzID0gcGFyYW1zLmF0dHJpYnV0ZXMsXG4gICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzMyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFyYW1zJGF0dHJpYnV0ZXMzLFxuICAgICAgX3BhcmFtcyRzdHlsZXMzID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgIHN0eWxlcyA9IF9wYXJhbXMkc3R5bGVzMyA9PT0gdW5kZWZpbmVkID8ge30gOiBfcGFyYW1zJHN0eWxlczM7XG5cblxuICByZXR1cm4gYXBpT2JqZWN0KHsgdHlwZTogJ2NvdW50ZXInLCBjb250ZW50OiBjb250ZW50IH0sIGZ1bmN0aW9uICgpIHtcbiAgICBlbnN1cmVDc3MoKTtcblxuICAgIHJldHVybiBtYWtlTGF5ZXJzQ291bnRlckFic3RyYWN0KHtcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudG9TdHJpbmcoKSxcbiAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgIGV4dHJhOiB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICBjbGFzc2VzOiBbY29uZmlnLmZhbWlseVByZWZpeCArICctbGF5ZXJzLWNvdW50ZXInXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkoY2xhc3NlcykpXG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGxheWVyID0gZnVuY3Rpb24gbGF5ZXIoYXNzZW1ibGVyKSB7XG4gIHJldHVybiBhcGlPYmplY3QoeyB0eXBlOiAnbGF5ZXInIH0sIGZ1bmN0aW9uICgpIHtcbiAgICBlbnN1cmVDc3MoKTtcblxuICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuXG4gICAgYXNzZW1ibGVyKGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgICBBcnJheS5pc0FycmF5KGFyZ3MpID8gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5jb25jYXQoYS5hYnN0cmFjdCk7XG4gICAgICB9KSA6IGNoaWxkcmVuID0gY2hpbGRyZW4uY29uY2F0KGFyZ3MuYWJzdHJhY3QpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIFt7XG4gICAgICB0YWc6ICdzcGFuJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHsgY2xhc3M6IGNvbmZpZy5mYW1pbHlQcmVmaXggKyAnLWxheWVycycgfSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgIH1dO1xuICB9KTtcbn07XG5cbnZhciBhcGkgPSB7XG4gIG5vQXV0bzogbm9BdXRvLFxuICBjb25maWc6IGNvbmZpZyxcbiAgZG9tOiBkb20sXG4gIGxpYnJhcnk6IGxpYnJhcnksXG4gIHBhcnNlOiBwYXJzZSxcbiAgZmluZEljb25EZWZpbml0aW9uOiBmaW5kSWNvbkRlZmluaXRpb24sXG4gIGljb246IGljb24sXG4gIHRleHQ6IHRleHQsXG4gIGNvdW50ZXI6IGNvdW50ZXIsXG4gIGxheWVyOiBsYXllcixcbiAgdG9IdG1sOiB0b0h0bWxcbn07XG5cbnZhciBhdXRvUmVwbGFjZSA9IGZ1bmN0aW9uIGF1dG9SZXBsYWNlKCkge1xuICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9wYXJhbXMkYXV0b1JlcGxhY2VTdiA9IHBhcmFtcy5hdXRvUmVwbGFjZVN2Z1Jvb3QsXG4gICAgICBhdXRvUmVwbGFjZVN2Z1Jvb3QgPSBfcGFyYW1zJGF1dG9SZXBsYWNlU3YgPT09IHVuZGVmaW5lZCA/IERPQ1VNRU5UIDogX3BhcmFtcyRhdXRvUmVwbGFjZVN2O1xuXG5cbiAgaWYgKE9iamVjdC5rZXlzKG5hbWVzcGFjZS5zdHlsZXMpLmxlbmd0aCA+IDAgJiYgSVNfRE9NICYmIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZykgYXBpLmRvbS5pMnN2Zyh7IG5vZGU6IGF1dG9SZXBsYWNlU3ZnUm9vdCB9KTtcbn07XG5cbmV4cG9ydCB7IGljb24sIG5vQXV0bywgY29uZmlnLCB0b0h0bWwsIGxheWVyLCB0ZXh0LCBjb3VudGVyLCBsaWJyYXJ5LCBkb20sIHBhcnNlLCBmaW5kSWNvbkRlZmluaXRpb24gfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZS9pbmRleC5lcy5qc1xuLy8gbW9kdWxlIGlkID0gQy9KRlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIDMgNCA1IDcgOCA5IiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJiZy13aGl0ZSBjb250YWluZXIgbXgtNCBtZDpteC1hdXRvIHNoYWRvdy1sZyBtdC0zMiBmbGV4IGZsZXgtcm93IG1kOnctMy81IHh4bDp3LTIvNSBqdXN0aWZ5LWJldHdlZW5cIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInctMS8yIHRleHQtY2VudGVyIGJnLXRlYWwtbGlnaHQgcC00IGhpZGRlbiBtZDpibG9ja1wiPlxuICAgICAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LXdoaXRlIGZvbnQtYm9sZCB0ZXh0LTR4bCBwdC04IG10LThcIj5HT09EV09SSzwvcD5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwidGV4dC13aGl0ZSB0ZXh0LXhsIHB0LTRcIj5TYW5lIHdheSB0byBtYW5hZ2Ugd29yazwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJcIj48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInctZnVsbCBtZDp3LTEvMiBwLThcIj5cbiAgICAgICAgICAgIDxmb3JtIHJvbGU9XCJmb3JtXCIgbWV0aG9kPVwiUE9TVFwiIDphY3Rpb249XCJ1cmxcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJfdG9rZW5cIiA6dmFsdWU9XCJ0b2tlblwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicHktNFwiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJlbWFpbFwiIGNsYXNzPVwic2hhZG93IGFwcGVhcmFuY2Utbm9uZSBib3JkZXIgcm91bmRlZCB3LWZ1bGwgcHktMiBweC0zIHRleHQtZ3JleS1kYXJrZXJcIiB0eXBlPVwidGV4dFwiIG5hbWU9XCJlbWFpbFwiIHBsYWNlaG9sZGVyPVwiRS1tYWlsXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1yZWQtbGlnaHQgYmxvY2sgcHQtMlwiIHYtaWY9XCJlcnJvcnNcIj57eyBlcnJvcnMuZW1haWwgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicHktNFwiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9XCJwYXNzd29yZFwiIGNsYXNzPVwic2hhZG93IGFwcGVhcmFuY2Utbm9uZSBib3JkZXIgcm91bmRlZCB3LWZ1bGwgcHktMiBweC0zIHRleHQtZ3JleS1kYXJrZXJcIiB0eXBlPVwicGFzc3dvcmRcIiBuYW1lPVwicGFzc3dvcmRcIiBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCI+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGV4dC1yZWQtbGlnaHQgYmxvY2sgcHQtMlwiIHYtaWY9XCJlcnJvcnNcIj57eyBlcnJvcnMucGFzc3dvcmQgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicHktNCB0ZXh0LWdyZXlcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJyZW1lbWJlclwiPlxuICAgICAgICAgICAgICAgICAgICBSZW1lbWJlciBNZVxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInB5LTRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG5cIj5MT0dJTjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwicGFzc3dvcmQvcmVzZXRcIiBjbGFzcz1cIm5vLXVuZGVybGluZSB0ZXh0LXRlYWwgdGV4dC1zbVwiPkZvcmdvdCBZb3VyIFBhc3N3b3JkPzwvYT5cbiAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICAgIGV4cG9ydCBkZWZhdWx0IHtcbiAgICAgIGRhdGE6ICgpID0+ICh7XG4gICAgICAgIHRva2VuOiBMYXJhdmVsLmNzcmZUb2tlbixcbiAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgIHVybDogdXJsXG4gICAgICB9KVxuICAgIH1cbjwvc2NyaXB0PlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHJlc291cmNlcy9hc3NldHMvanMvY29tcG9uZW50cy9hdXRoL2xvZ2luLnZ1ZSIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlJykpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmUnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsWyd2dWUtZm9udGF3ZXNvbWUnXSA9IHt9KSxnbG9iYWwuRm9udEF3ZXNvbWUpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLGZvbnRhd2Vzb21lU3ZnQ29yZSkgeyAndXNlIHN0cmljdCc7XG5cblx0dmFyIGNvbW1vbmpzR2xvYmFsID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fTtcblxuXHRmdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdFx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xuXHR9XG5cblx0dmFyIGh1bXBzID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuXHQoZnVuY3Rpb24oZ2xvYmFsKSB7XG5cblx0ICB2YXIgX3Byb2Nlc3NLZXlzID0gZnVuY3Rpb24oY29udmVydCwgb2JqLCBvcHRpb25zKSB7XG5cdCAgICBpZighX2lzT2JqZWN0KG9iaikgfHwgX2lzRGF0ZShvYmopIHx8IF9pc1JlZ0V4cChvYmopIHx8IF9pc0Jvb2xlYW4ob2JqKSB8fCBfaXNGdW5jdGlvbihvYmopKSB7XG5cdCAgICAgIHJldHVybiBvYmo7XG5cdCAgICB9XG5cblx0ICAgIHZhciBvdXRwdXQsXG5cdCAgICAgICAgaSA9IDAsXG5cdCAgICAgICAgbCA9IDA7XG5cblx0ICAgIGlmKF9pc0FycmF5KG9iaikpIHtcblx0ICAgICAgb3V0cHV0ID0gW107XG5cdCAgICAgIGZvcihsPW9iai5sZW5ndGg7IGk8bDsgaSsrKSB7XG5cdCAgICAgICAgb3V0cHV0LnB1c2goX3Byb2Nlc3NLZXlzKGNvbnZlcnQsIG9ialtpXSwgb3B0aW9ucykpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBlbHNlIHtcblx0ICAgICAgb3V0cHV0ID0ge307XG5cdCAgICAgIGZvcih2YXIga2V5IGluIG9iaikge1xuXHQgICAgICAgIGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcblx0ICAgICAgICAgIG91dHB1dFtjb252ZXJ0KGtleSwgb3B0aW9ucyldID0gX3Byb2Nlc3NLZXlzKGNvbnZlcnQsIG9ialtrZXldLCBvcHRpb25zKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICAgIHJldHVybiBvdXRwdXQ7XG5cdCAgfTtcblxuXHQgIC8vIFN0cmluZyBjb252ZXJzaW9uIG1ldGhvZHNcblxuXHQgIHZhciBzZXBhcmF0ZVdvcmRzID0gZnVuY3Rpb24oc3RyaW5nLCBvcHRpb25zKSB7XG5cdCAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0ICAgIHZhciBzZXBhcmF0b3IgPSBvcHRpb25zLnNlcGFyYXRvciB8fCAnXyc7XG5cdCAgICB2YXIgc3BsaXQgPSBvcHRpb25zLnNwbGl0IHx8IC8oPz1bQS1aXSkvO1xuXG5cdCAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNwbGl0KS5qb2luKHNlcGFyYXRvcik7XG5cdCAgfTtcblxuXHQgIHZhciBjYW1lbGl6ZSA9IGZ1bmN0aW9uKHN0cmluZykge1xuXHQgICAgaWYgKF9pc051bWVyaWNhbChzdHJpbmcpKSB7XG5cdCAgICAgIHJldHVybiBzdHJpbmc7XG5cdCAgICB9XG5cdCAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSgvW1xcLV9cXHNdKyguKT8vZywgZnVuY3Rpb24obWF0Y2gsIGNocikge1xuXHQgICAgICByZXR1cm4gY2hyID8gY2hyLnRvVXBwZXJDYXNlKCkgOiAnJztcblx0ICAgIH0pO1xuXHQgICAgLy8gRW5zdXJlIDFzdCBjaGFyIGlzIGFsd2F5cyBsb3dlcmNhc2Vcblx0ICAgIHJldHVybiBzdHJpbmcuc3Vic3RyKDAsIDEpLnRvTG93ZXJDYXNlKCkgKyBzdHJpbmcuc3Vic3RyKDEpO1xuXHQgIH07XG5cblx0ICB2YXIgcGFzY2FsaXplID0gZnVuY3Rpb24oc3RyaW5nKSB7XG5cdCAgICB2YXIgY2FtZWxpemVkID0gY2FtZWxpemUoc3RyaW5nKTtcblx0ICAgIC8vIEVuc3VyZSAxc3QgY2hhciBpcyBhbHdheXMgdXBwZXJjYXNlXG5cdCAgICByZXR1cm4gY2FtZWxpemVkLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgY2FtZWxpemVkLnN1YnN0cigxKTtcblx0ICB9O1xuXG5cdCAgdmFyIGRlY2FtZWxpemUgPSBmdW5jdGlvbihzdHJpbmcsIG9wdGlvbnMpIHtcblx0ICAgIHJldHVybiBzZXBhcmF0ZVdvcmRzKHN0cmluZywgb3B0aW9ucykudG9Mb3dlckNhc2UoKTtcblx0ICB9O1xuXG5cdCAgLy8gVXRpbGl0aWVzXG5cdCAgLy8gVGFrZW4gZnJvbSBVbmRlcnNjb3JlLmpzXG5cblx0ICB2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5cdCAgdmFyIF9pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG5cdCAgICByZXR1cm4gdHlwZW9mKG9iaikgPT09ICdmdW5jdGlvbic7XG5cdCAgfTtcblx0ICB2YXIgX2lzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG5cdCAgICByZXR1cm4gb2JqID09PSBPYmplY3Qob2JqKTtcblx0ICB9O1xuXHQgIHZhciBfaXNBcnJheSA9IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcnJheV0nO1xuXHQgIH07XG5cdCAgdmFyIF9pc0RhdGUgPSBmdW5jdGlvbihvYmopIHtcblx0ICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgRGF0ZV0nO1xuXHQgIH07XG5cdCAgdmFyIF9pc1JlZ0V4cCA9IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBSZWdFeHBdJztcblx0ICB9O1xuXHQgIHZhciBfaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG5cdCAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09ICdbb2JqZWN0IEJvb2xlYW5dJztcblx0ICB9O1xuXG5cdCAgLy8gUGVyZm9ybWFudCB3YXkgdG8gZGV0ZXJtaW5lIGlmIG9iaiBjb2VyY2VzIHRvIGEgbnVtYmVyXG5cdCAgdmFyIF9pc051bWVyaWNhbCA9IGZ1bmN0aW9uKG9iaikge1xuXHQgICAgb2JqID0gb2JqIC0gMDtcblx0ICAgIHJldHVybiBvYmogPT09IG9iajtcblx0ICB9O1xuXG5cdCAgLy8gU2V0cyB1cCBmdW5jdGlvbiB3aGljaCBoYW5kbGVzIHByb2Nlc3Npbmcga2V5c1xuXHQgIC8vIGFsbG93aW5nIHRoZSBjb252ZXJ0IGZ1bmN0aW9uIHRvIGJlIG1vZGlmaWVkIGJ5IGEgY2FsbGJhY2tcblx0ICB2YXIgX3Byb2Nlc3NvciA9IGZ1bmN0aW9uKGNvbnZlcnQsIG9wdGlvbnMpIHtcblx0ICAgIHZhciBjYWxsYmFjayA9IG9wdGlvbnMgJiYgJ3Byb2Nlc3MnIGluIG9wdGlvbnMgPyBvcHRpb25zLnByb2Nlc3MgOiBvcHRpb25zO1xuXG5cdCAgICBpZih0eXBlb2YoY2FsbGJhY2spICE9PSAnZnVuY3Rpb24nKSB7XG5cdCAgICAgIHJldHVybiBjb252ZXJ0O1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nLCBvcHRpb25zKSB7XG5cdCAgICAgIHJldHVybiBjYWxsYmFjayhzdHJpbmcsIGNvbnZlcnQsIG9wdGlvbnMpO1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICB2YXIgaHVtcHMgPSB7XG5cdCAgICBjYW1lbGl6ZTogY2FtZWxpemUsXG5cdCAgICBkZWNhbWVsaXplOiBkZWNhbWVsaXplLFxuXHQgICAgcGFzY2FsaXplOiBwYXNjYWxpemUsXG5cdCAgICBkZXBhc2NhbGl6ZTogZGVjYW1lbGl6ZSxcblx0ICAgIGNhbWVsaXplS2V5czogZnVuY3Rpb24ob2JqZWN0LCBvcHRpb25zKSB7XG5cdCAgICAgIHJldHVybiBfcHJvY2Vzc0tleXMoX3Byb2Nlc3NvcihjYW1lbGl6ZSwgb3B0aW9ucyksIG9iamVjdCk7XG5cdCAgICB9LFxuXHQgICAgZGVjYW1lbGl6ZUtleXM6IGZ1bmN0aW9uKG9iamVjdCwgb3B0aW9ucykge1xuXHQgICAgICByZXR1cm4gX3Byb2Nlc3NLZXlzKF9wcm9jZXNzb3IoZGVjYW1lbGl6ZSwgb3B0aW9ucyksIG9iamVjdCwgb3B0aW9ucyk7XG5cdCAgICB9LFxuXHQgICAgcGFzY2FsaXplS2V5czogZnVuY3Rpb24ob2JqZWN0LCBvcHRpb25zKSB7XG5cdCAgICAgIHJldHVybiBfcHJvY2Vzc0tleXMoX3Byb2Nlc3NvcihwYXNjYWxpemUsIG9wdGlvbnMpLCBvYmplY3QpO1xuXHQgICAgfSxcblx0ICAgIGRlcGFzY2FsaXplS2V5czogZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5kZWNhbWVsaXplS2V5cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHQgICAgfVxuXHQgIH07XG5cblx0ICBpZiAodHlwZW9mIHVuZGVmaW5lZCA9PT0gJ2Z1bmN0aW9uJyAmJiB1bmRlZmluZWQuYW1kKSB7XG5cdCAgICB1bmRlZmluZWQoaHVtcHMpO1xuXHQgIH0gZWxzZSBpZiAoJ29iamVjdCcgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdCAgICBtb2R1bGUuZXhwb3J0cyA9IGh1bXBzO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBnbG9iYWwuaHVtcHMgPSBodW1wcztcblx0ICB9XG5cblx0fSkoY29tbW9uanNHbG9iYWwpO1xuXHR9KTtcblxuXHR2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuXHQgIHJldHVybiB0eXBlb2Ygb2JqO1xuXHR9IDogZnVuY3Rpb24gKG9iaikge1xuXHQgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuXHR9O1xuXG5cdHZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIGtleSwgdmFsdWUpIHtcblx0ICBpZiAoa2V5IGluIG9iaikge1xuXHQgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG5cdCAgICAgIHZhbHVlOiB2YWx1ZSxcblx0ICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcblx0ICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuXHQgICAgICB3cml0YWJsZTogdHJ1ZVxuXHQgICAgfSk7XG5cdCAgfSBlbHNlIHtcblx0ICAgIG9ialtrZXldID0gdmFsdWU7XG5cdCAgfVxuXG5cdCAgcmV0dXJuIG9iajtcblx0fTtcblxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0ICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHQgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuXHQgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuXHQgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuXHQgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XG5cblx0ICByZXR1cm4gdGFyZ2V0O1xuXHR9O1xuXG5cdHZhciBvYmplY3RXaXRob3V0UHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmosIGtleXMpIHtcblx0ICB2YXIgdGFyZ2V0ID0ge307XG5cblx0ICBmb3IgKHZhciBpIGluIG9iaikge1xuXHQgICAgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTtcblx0ICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlO1xuXHQgICAgdGFyZ2V0W2ldID0gb2JqW2ldO1xuXHQgIH1cblxuXHQgIHJldHVybiB0YXJnZXQ7XG5cdH07XG5cblx0dmFyIHRvQ29uc3VtYWJsZUFycmF5ID0gZnVuY3Rpb24gKGFycikge1xuXHQgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cblx0ICAgIHJldHVybiBhcnIyO1xuXHQgIH0gZWxzZSB7XG5cdCAgICByZXR1cm4gQXJyYXkuZnJvbShhcnIpO1xuXHQgIH1cblx0fTtcblxuXHRmdW5jdGlvbiBzdHlsZVRvT2JqZWN0KHN0eWxlKSB7XG5cdCAgcmV0dXJuIHN0eWxlLnNwbGl0KCc7JykubWFwKGZ1bmN0aW9uIChzKSB7XG5cdCAgICByZXR1cm4gcy50cmltKCk7XG5cdCAgfSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG5cdCAgICByZXR1cm4gcztcblx0ICB9KS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGFpcikge1xuXHQgICAgdmFyIGkgPSBwYWlyLmluZGV4T2YoJzonKTtcblx0ICAgIHZhciBwcm9wID0gaHVtcHMuY2FtZWxpemUocGFpci5zbGljZSgwLCBpKSk7XG5cdCAgICB2YXIgdmFsdWUgPSBwYWlyLnNsaWNlKGkgKyAxKS50cmltKCk7XG5cblx0ICAgIGFjY1twcm9wXSA9IHZhbHVlO1xuXG5cdCAgICByZXR1cm4gYWNjO1xuXHQgIH0sIHt9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNsYXNzVG9PYmplY3QoY2xzKSB7XG5cdCAgcmV0dXJuIGNscy5zcGxpdCgvXFxzKy8pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjKSB7XG5cdCAgICBhY2NbY10gPSB0cnVlO1xuXG5cdCAgICByZXR1cm4gYWNjO1xuXHQgIH0sIHt9KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNvbWJpbmVDbGFzc09iamVjdHMoKSB7XG5cdCAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG9ianMgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcblx0ICAgIG9ianNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG5cdCAgfVxuXG5cdCAgcmV0dXJuIG9ianMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG9iaikge1xuXHQgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuXHQgICAgICBhY2MgPSBhY2MuY29uY2F0KG9iaik7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBhY2MucHVzaChvYmopO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gYWNjO1xuXHQgIH0sIFtdKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNvbnZlcnQoaCwgZWxlbWVudCkge1xuXHQgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cdCAgdmFyIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IHt9O1xuXG5cdCAgdmFyIGNoaWxkcmVuID0gKGVsZW1lbnQuY2hpbGRyZW4gfHwgW10pLm1hcChjb252ZXJ0LmJpbmQobnVsbCwgaCkpO1xuXG5cdCAgdmFyIG1peGlucyA9IE9iamVjdC5rZXlzKGVsZW1lbnQuYXR0cmlidXRlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGtleSkge1xuXHQgICAgdmFyIHZhbCA9IGVsZW1lbnQuYXR0cmlidXRlc1trZXldO1xuXG5cdCAgICBzd2l0Y2ggKGtleSkge1xuXHQgICAgICBjYXNlICdjbGFzcyc6XG5cdCAgICAgICAgYWNjWydjbGFzcyddID0gY2xhc3NUb09iamVjdCh2YWwpO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBjYXNlICdzdHlsZSc6XG5cdCAgICAgICAgYWNjWydzdHlsZSddID0gc3R5bGVUb09iamVjdCh2YWwpO1xuXHQgICAgICAgIGJyZWFrO1xuXHQgICAgICBkZWZhdWx0OlxuXHQgICAgICAgIGFjYy5hdHRyc1trZXldID0gdmFsO1xuXHQgICAgfVxuXG5cdCAgICByZXR1cm4gYWNjO1xuXHQgIH0sIHsgJ2NsYXNzJzoge30sIHN0eWxlOiB7fSwgYXR0cnM6IHt9IH0pO1xuXG5cdCAgdmFyIF9kYXRhJGNsYXNzID0gZGF0YS5jbGFzcyxcblx0ICAgICAgZENsYXNzID0gX2RhdGEkY2xhc3MgPT09IHVuZGVmaW5lZCA/IHt9IDogX2RhdGEkY2xhc3MsXG5cdCAgICAgIF9kYXRhJHN0eWxlID0gZGF0YS5zdHlsZSxcblx0ICAgICAgZFN0eWxlID0gX2RhdGEkc3R5bGUgPT09IHVuZGVmaW5lZCA/IHt9IDogX2RhdGEkc3R5bGUsXG5cdCAgICAgIF9kYXRhJGF0dHJzID0gZGF0YS5hdHRycyxcblx0ICAgICAgZEF0dHJzID0gX2RhdGEkYXR0cnMgPT09IHVuZGVmaW5lZCA/IHt9IDogX2RhdGEkYXR0cnMsXG5cdCAgICAgIHJlbWFpbmluZ0RhdGEgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhkYXRhLCBbJ2NsYXNzJywgJ3N0eWxlJywgJ2F0dHJzJ10pO1xuXG5cblx0ICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG5cdCAgICByZXR1cm4gZWxlbWVudDtcblx0ICB9IGVsc2Uge1xuXHQgICAgcmV0dXJuIGgoZWxlbWVudC50YWcsIF9leHRlbmRzKHtcblx0ICAgICAgY2xhc3M6IGNvbWJpbmVDbGFzc09iamVjdHMobWl4aW5zLmNsYXNzLCBkQ2xhc3MpLFxuXHQgICAgICBzdHlsZTogX2V4dGVuZHMoe30sIG1peGlucy5zdHlsZSwgZFN0eWxlKSxcblx0ICAgICAgYXR0cnM6IF9leHRlbmRzKHt9LCBtaXhpbnMuYXR0cnMsIGRBdHRycylcblx0ICAgIH0sIHJlbWFpbmluZ0RhdGEsIHtcblx0ICAgICAgcHJvcHM6IHByb3BzXG5cdCAgICB9KSwgY2hpbGRyZW4pO1xuXHQgIH1cblx0fVxuXG5cdHZhciBQUk9EVUNUSU9OID0gZmFsc2U7XG5cblx0dHJ5IHtcblx0ICBQUk9EVUNUSU9OID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcblx0fSBjYXRjaCAoZSkge31cblxuXHRmdW5jdGlvbiBsb2cgKCkge1xuXHQgIGlmICghUFJPRFVDVElPTiAmJiBjb25zb2xlICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG5cdCAgICB2YXIgX2NvbnNvbGU7XG5cblx0ICAgIChfY29uc29sZSA9IGNvbnNvbGUpLmVycm9yLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xuXHQgIH1cblx0fVxuXG5cdGZ1bmN0aW9uIG9iamVjdFdpdGhLZXkoa2V5LCB2YWx1ZSkge1xuXHQgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwIHx8ICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZSA/IGRlZmluZVByb3BlcnR5KHt9LCBrZXksIHZhbHVlKSA6IHt9O1xuXHR9XG5cblx0ZnVuY3Rpb24gY2xhc3NMaXN0KHByb3BzKSB7XG5cdCAgdmFyIF9jbGFzc2VzO1xuXG5cdCAgdmFyIGNsYXNzZXMgPSAoX2NsYXNzZXMgPSB7XG5cdCAgICAnZmEtc3Bpbic6IHByb3BzLnNwaW4sXG5cdCAgICAnZmEtcHVsc2UnOiBwcm9wcy5wdWxzZSxcblx0ICAgICdmYS1mdyc6IHByb3BzLmZpeGVkV2lkdGgsXG5cdCAgICAnZmEtYm9yZGVyJzogcHJvcHMuYm9yZGVyLFxuXHQgICAgJ2ZhLWxpJzogcHJvcHMubGlzdEl0ZW0sXG5cdCAgICAnZmEtZmxpcC1ob3Jpem9udGFsJzogcHJvcHMuZmxpcCA9PT0gJ2hvcml6b250YWwnIHx8IHByb3BzLmZsaXAgPT09ICdib3RoJyxcblx0ICAgICdmYS1mbGlwLXZlcnRpY2FsJzogcHJvcHMuZmxpcCA9PT0gJ3ZlcnRpY2FsJyB8fCBwcm9wcy5mbGlwID09PSAnYm90aCdcblx0ICB9LCBkZWZpbmVQcm9wZXJ0eShfY2xhc3NlcywgJ2ZhLScgKyBwcm9wcy5zaXplLCBwcm9wcy5zaXplICE9PSBudWxsKSwgZGVmaW5lUHJvcGVydHkoX2NsYXNzZXMsICdmYS1yb3RhdGUtJyArIHByb3BzLnJvdGF0aW9uLCBwcm9wcy5yb3RhdGlvbiAhPT0gbnVsbCksIGRlZmluZVByb3BlcnR5KF9jbGFzc2VzLCAnZmEtcHVsbC0nICsgcHJvcHMucHVsbCwgcHJvcHMucHVsbCAhPT0gbnVsbCksIF9jbGFzc2VzKTtcblxuXHQgIHJldHVybiBPYmplY3Qua2V5cyhjbGFzc2VzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHQgICAgcmV0dXJuIGNsYXNzZXNba2V5XSA/IGtleSA6IG51bGw7XG5cdCAgfSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcblx0ICAgIHJldHVybiBrZXk7XG5cdCAgfSk7XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRTdGF0aWNDbGFzcyh0bywgd2hhdCkge1xuXHQgIHZhciB2YWwgPSAodG8gfHwgJycpLmxlbmd0aCA9PT0gMCA/IFtdIDogW3RvXTtcblxuXHQgIHJldHVybiB2YWwuY29uY2F0KHdoYXQpLmpvaW4oJyAnKTtcblx0fVxuXG5cdGZ1bmN0aW9uIG5vcm1hbGl6ZUljb25BcmdzKGljb24pIHtcblx0ICBpZiAoaWNvbiA9PT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIG51bGw7XG5cdCAgfVxuXG5cdCAgaWYgKCh0eXBlb2YgaWNvbiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaWNvbikpID09PSAnb2JqZWN0JyAmJiBpY29uLnByZWZpeCAmJiBpY29uLmljb25OYW1lKSB7XG5cdCAgICByZXR1cm4gaWNvbjtcblx0ICB9XG5cblx0ICBpZiAoQXJyYXkuaXNBcnJheShpY29uKSAmJiBpY29uLmxlbmd0aCA9PT0gMikge1xuXHQgICAgcmV0dXJuIHsgcHJlZml4OiBpY29uWzBdLCBpY29uTmFtZTogaWNvblsxXSB9O1xuXHQgIH1cblxuXHQgIGlmICh0eXBlb2YgaWNvbiA9PT0gJ3N0cmluZycpIHtcblx0ICAgIHJldHVybiB7IHByZWZpeDogJ2ZhcycsIGljb25OYW1lOiBpY29uIH07XG5cdCAgfVxuXHR9XG5cblx0dmFyIEZvbnRBd2Vzb21lSWNvbiA9IHtcblx0ICBuYW1lOiAnRm9udEF3ZXNvbWVJY29uJyxcblxuXHQgIGZ1bmN0aW9uYWw6IHRydWUsXG5cblx0ICBwcm9wczoge1xuXHQgICAgYm9yZGVyOiB7XG5cdCAgICAgIHR5cGU6IEJvb2xlYW4sXG5cdCAgICAgIGRlZmF1bHQ6IGZhbHNlXG5cdCAgICB9LFxuXHQgICAgZml4ZWRXaWR0aDoge1xuXHQgICAgICB0eXBlOiBCb29sZWFuLFxuXHQgICAgICBkZWZhdWx0OiBmYWxzZVxuXHQgICAgfSxcblx0ICAgIGZsaXA6IHtcblx0ICAgICAgdHlwZTogU3RyaW5nLFxuXHQgICAgICBkZWZhdWx0OiBudWxsLFxuXHQgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuXHQgICAgICAgIHJldHVybiBbJ2hvcml6b250YWwnLCAndmVydGljYWwnLCAnYm90aCddLmluZGV4T2YodmFsdWUpID4gLTE7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBpY29uOiB7XG5cdCAgICAgIHR5cGU6IFtPYmplY3QsIEFycmF5LCBTdHJpbmddLFxuXHQgICAgICByZXF1aXJlZDogdHJ1ZVxuXHQgICAgfSxcblx0ICAgIG1hc2s6IHtcblx0ICAgICAgdHlwZTogW09iamVjdCwgQXJyYXksIFN0cmluZ10sXG5cdCAgICAgIGRlZmF1bHQ6IG51bGxcblx0ICAgIH0sXG5cdCAgICBsaXN0SXRlbToge1xuXHQgICAgICB0eXBlOiBCb29sZWFuLFxuXHQgICAgICBkZWZhdWx0OiBmYWxzZVxuXHQgICAgfSxcblx0ICAgIHB1bGw6IHtcblx0ICAgICAgdHlwZTogU3RyaW5nLFxuXHQgICAgICBkZWZhdWx0OiBudWxsLFxuXHQgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvcih2YWx1ZSkge1xuXHQgICAgICAgIHJldHVybiBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKHZhbHVlKSA+IC0xO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHQgICAgcHVsc2U6IHtcblx0ICAgICAgdHlwZTogQm9vbGVhbixcblx0ICAgICAgZGVmYXVsdDogZmFsc2Vcblx0ICAgIH0sXG5cdCAgICByb3RhdGlvbjoge1xuXHQgICAgICB0eXBlOiBOdW1iZXIsXG5cdCAgICAgIGRlZmF1bHQ6IG51bGwsXG5cdCAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHZhbHVlKSB7XG5cdCAgICAgICAgcmV0dXJuIFs5MCwgMTgwLCAyNzBdLmluZGV4T2YodmFsdWUpID4gLTE7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBzaXplOiB7XG5cdCAgICAgIHR5cGU6IFN0cmluZyxcblx0ICAgICAgZGVmYXVsdDogbnVsbCxcblx0ICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcblx0ICAgICAgICByZXR1cm4gWydsZycsICd4cycsICdzbScsICcxeCcsICcyeCcsICczeCcsICc0eCcsICc1eCcsICc2eCcsICc3eCcsICc4eCcsICc5eCcsICcxMHgnXS5pbmRleE9mKHZhbHVlKSA+IC0xO1xuXHQgICAgICB9XG5cdCAgICB9LFxuXHQgICAgc3Bpbjoge1xuXHQgICAgICB0eXBlOiBCb29sZWFuLFxuXHQgICAgICBkZWZhdWx0OiBmYWxzZVxuXHQgICAgfSxcblx0ICAgIHRyYW5zZm9ybToge1xuXHQgICAgICB0eXBlOiBbU3RyaW5nLCBPYmplY3RdLFxuXHQgICAgICBkZWZhdWx0OiBudWxsXG5cdCAgICB9LFxuXHQgICAgc3ltYm9sOiB7XG5cdCAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLFxuXHQgICAgICBkZWZhdWx0OiBmYWxzZVxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihjcmVhdGVFbGVtZW50LCBjb250ZXh0KSB7XG5cdCAgICB2YXIgcHJvcHMgPSBjb250ZXh0LnByb3BzO1xuXHQgICAgdmFyIGljb25BcmdzID0gcHJvcHMuaWNvbixcblx0ICAgICAgICBtYXNrQXJncyA9IHByb3BzLm1hc2ssXG5cdCAgICAgICAgc3ltYm9sID0gcHJvcHMuc3ltYm9sO1xuXG5cdCAgICB2YXIgaWNvbiA9IG5vcm1hbGl6ZUljb25BcmdzKGljb25BcmdzKTtcblx0ICAgIHZhciBjbGFzc2VzID0gb2JqZWN0V2l0aEtleSgnY2xhc3NlcycsIGNsYXNzTGlzdChwcm9wcykpO1xuXHQgICAgdmFyIHRyYW5zZm9ybSA9IG9iamVjdFdpdGhLZXkoJ3RyYW5zZm9ybScsIHR5cGVvZiBwcm9wcy50cmFuc2Zvcm0gPT09ICdzdHJpbmcnID8gZm9udGF3ZXNvbWVTdmdDb3JlLnBhcnNlLnRyYW5zZm9ybShwcm9wcy50cmFuc2Zvcm0pIDogcHJvcHMudHJhbnNmb3JtKTtcblx0ICAgIHZhciBtYXNrID0gb2JqZWN0V2l0aEtleSgnbWFzaycsIG5vcm1hbGl6ZUljb25BcmdzKG1hc2tBcmdzKSk7XG5cblx0ICAgIHZhciByZW5kZXJlZEljb24gPSBmb250YXdlc29tZVN2Z0NvcmUuaWNvbihpY29uLCBfZXh0ZW5kcyh7fSwgY2xhc3NlcywgdHJhbnNmb3JtLCBtYXNrLCB7IHN5bWJvbDogc3ltYm9sIH0pKTtcblxuXHQgICAgaWYgKCFyZW5kZXJlZEljb24pIHtcblx0ICAgICAgcmV0dXJuIGxvZygnQ291bGQgbm90IGZpbmQgb25lIG9yIG1vcmUgaWNvbihzKScsIGljb24sIG1hc2spO1xuXHQgICAgfVxuXG5cdCAgICB2YXIgYWJzdHJhY3QgPSByZW5kZXJlZEljb24uYWJzdHJhY3Q7XG5cblx0ICAgIHZhciBjb252ZXJ0Q3VycnkgPSBjb252ZXJ0LmJpbmQobnVsbCwgY3JlYXRlRWxlbWVudCk7XG5cblx0ICAgIHJldHVybiBjb252ZXJ0Q3VycnkoYWJzdHJhY3RbMF0sIHt9LCBjb250ZXh0LmRhdGEpO1xuXHQgIH1cblx0fTtcblxuXHR2YXIgRm9udEF3ZXNvbWVMYXllcnMgPSB7XG5cdCAgbmFtZTogJ0ZvbnRBd2Vzb21lTGF5ZXJzJyxcblxuXHQgIGZ1bmN0aW9uYWw6IHRydWUsXG5cblx0ICBwcm9wczoge1xuXHQgICAgZml4ZWRXaWR0aDoge1xuXHQgICAgICB0eXBlOiBCb29sZWFuLFxuXHQgICAgICBkZWZhdWx0OiBmYWxzZVxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihjcmVhdGVFbGVtZW50LCBjb250ZXh0KSB7XG5cdCAgICB2YXIgZmFtaWx5UHJlZml4ID0gZm9udGF3ZXNvbWVTdmdDb3JlLmNvbmZpZy5mYW1pbHlQcmVmaXg7XG5cdCAgICB2YXIgc3RhdGljQ2xhc3MgPSBjb250ZXh0LmRhdGEuc3RhdGljQ2xhc3M7XG5cblxuXHQgICAgdmFyIGNsYXNzZXMgPSBbZmFtaWx5UHJlZml4ICsgJy1sYXllcnMnXS5jb25jYXQodG9Db25zdW1hYmxlQXJyYXkoY29udGV4dC5wcm9wcy5maXhlZFdpZHRoID8gW2ZhbWlseVByZWZpeCArICctZncnXSA6IFtdKSk7XG5cblx0ICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdkaXYnLCBfZXh0ZW5kcyh7fSwgY29udGV4dC5kYXRhLCB7XG5cdCAgICAgIHN0YXRpY0NsYXNzOiBhZGRTdGF0aWNDbGFzcyhzdGF0aWNDbGFzcywgY2xhc3Nlcylcblx0ICAgIH0pLCBjb250ZXh0LmNoaWxkcmVuKTtcblx0ICB9XG5cdH07XG5cblx0dmFyIEZvbnRBd2Vzb21lTGF5ZXJzVGV4dCA9IHtcblx0ICBuYW1lOiAnRm9udEF3ZXNvbWVMYXllcnNUZXh0JyxcblxuXHQgIGZ1bmN0aW9uYWw6IHRydWUsXG5cblx0ICBwcm9wczoge1xuXHQgICAgdmFsdWU6IHtcblx0ICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcblx0ICAgICAgZGVmYXVsdDogJydcblx0ICAgIH0sXG5cdCAgICB0cmFuc2Zvcm06IHtcblx0ICAgICAgdHlwZTogW1N0cmluZywgT2JqZWN0XSxcblx0ICAgICAgZGVmYXVsdDogbnVsbFxuXHQgICAgfVxuXHQgIH0sXG5cblx0ICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcihjcmVhdGVFbGVtZW50LCBjb250ZXh0KSB7XG5cdCAgICB2YXIgcHJvcHMgPSBjb250ZXh0LnByb3BzO1xuXG5cdCAgICB2YXIgdHJhbnNmb3JtID0gb2JqZWN0V2l0aEtleSgndHJhbnNmb3JtJywgdHlwZW9mIHByb3BzLnRyYW5zZm9ybSA9PT0gJ3N0cmluZycgPyBmb250YXdlc29tZVN2Z0NvcmUucGFyc2UudHJhbnNmb3JtKHByb3BzLnRyYW5zZm9ybSkgOiBwcm9wcy50cmFuc2Zvcm0pO1xuXG5cdCAgICB2YXIgcmVuZGVyZWRUZXh0ID0gZm9udGF3ZXNvbWVTdmdDb3JlLnRleHQocHJvcHMudmFsdWUudG9TdHJpbmcoKSwgX2V4dGVuZHMoe30sIHRyYW5zZm9ybSkpO1xuXG5cdCAgICB2YXIgYWJzdHJhY3QgPSByZW5kZXJlZFRleHQuYWJzdHJhY3Q7XG5cblxuXHQgICAgdmFyIGNvbnZlcnRDdXJyeSA9IGNvbnZlcnQuYmluZChudWxsLCBjcmVhdGVFbGVtZW50KTtcblxuXHQgICAgcmV0dXJuIGNvbnZlcnRDdXJyeShhYnN0cmFjdFswXSwge30sIGNvbnRleHQuZGF0YSk7XG5cdCAgfVxuXHR9O1xuXG5cdGV4cG9ydHMuRm9udEF3ZXNvbWVJY29uID0gRm9udEF3ZXNvbWVJY29uO1xuXHRleHBvcnRzLkZvbnRBd2Vzb21lTGF5ZXJzID0gRm9udEF3ZXNvbWVMYXllcnM7XG5cdGV4cG9ydHMuRm9udEF3ZXNvbWVMYXllcnNUZXh0ID0gRm9udEF3ZXNvbWVMYXllcnNUZXh0O1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG5cbn0pKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9AZm9ydGF3ZXNvbWUvdnVlLWZvbnRhd2Vzb21lL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSBVMHY2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyA4IDkiLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgcmF3U2NyaXB0RXhwb3J0cyxcbiAgY29tcGlsZWRUZW1wbGF0ZSxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIgLyogc2VydmVyIG9ubHkgKi9cbikge1xuICB2YXIgZXNNb2R1bGVcbiAgdmFyIHNjcmlwdEV4cG9ydHMgPSByYXdTY3JpcHRFeHBvcnRzID0gcmF3U2NyaXB0RXhwb3J0cyB8fCB7fVxuXG4gIC8vIEVTNiBtb2R1bGVzIGludGVyb3BcbiAgdmFyIHR5cGUgPSB0eXBlb2YgcmF3U2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIGlmICh0eXBlID09PSAnb2JqZWN0JyB8fCB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZXNNb2R1bGUgPSByYXdTY3JpcHRFeHBvcnRzXG4gICAgc2NyaXB0RXhwb3J0cyA9IHJhd1NjcmlwdEV4cG9ydHMuZGVmYXVsdFxuICB9XG5cbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChjb21waWxlZFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSBjb21waWxlZFRlbXBsYXRlLnJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWRUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIHZhciBmdW5jdGlvbmFsID0gb3B0aW9ucy5mdW5jdGlvbmFsXG4gICAgdmFyIGV4aXN0aW5nID0gZnVuY3Rpb25hbFxuICAgICAgPyBvcHRpb25zLnJlbmRlclxuICAgICAgOiBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuXG4gICAgaWYgKCFmdW5jdGlvbmFsKSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIGV4aXN0aW5nKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlc01vZHVsZTogZXNNb2R1bGUsXG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2NvbXBvbmVudC1ub3JtYWxpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSBWVS84XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyA4IDkiLCJpbXBvcnQgRWNobyBmcm9tICdsYXJhdmVsLWVjaG8nXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvdnVlLWZvbnRhd2Vzb21lJ1xuXG53aW5kb3cuVnVlID0gcmVxdWlyZSgndnVlJylcblxud2luZG93LmF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKVxuXG53aW5kb3cubHV4b24gPSByZXF1aXJlKCdsdXhvbicpXG5cbndpbmRvdy5heGlvcy5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbiA9IHtcbiAgJ1gtQ1NSRi1UT0tFTic6IHdpbmRvdy5MYXJhdmVsLmNzcmZUb2tlbixcbiAgJ1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnXG59XG5cbi8qKlxuICogRWNobyBleHBvc2VzIGFuIGV4cHJlc3NpdmUgQVBJIGZvciBzdWJzY3JpYmluZyB0byBjaGFubmVscyBhbmQgbGlzdGVuaW5nXG4gKiBmb3IgZXZlbnRzIHRoYXQgYXJlIGJyb2FkY2FzdCBieSBMYXJhdmVsLiBFY2hvIGFuZCBldmVudCBicm9hZGNhc3RpbmdcbiAqIGFsbG93cyB5b3VyIHRlYW0gdG8gZWFzaWx5IGJ1aWxkIHJvYnVzdCByZWFsLXRpbWUgd2ViIGFwcGxpY2F0aW9ucy5cbiAqL1xuXG5pZiAodHlwZW9mIGlvICE9PSAndW5kZWZpbmVkJykge1xuICB3aW5kb3cuRWNobyA9IG5ldyBFY2hvKHtcbiAgICBicm9hZGNhc3RlcjogJ3NvY2tldC5pbycsXG4gICAgaG9zdDogd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lICsgJzo2MDAxJ1xuICB9KVxufVxuXG53aW5kb3cuVnVlLm1peGluKHtcbiAgbWV0aG9kczoge1xuICAgIGdlbmVyYXRlVXJsOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHJldHVybiAnaHR0cDovLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArICcvaW1hZ2UvYXZhdGFyLmpwZydcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKVxuICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArICcvJyArIHZhbHVlXG4gICAgfVxuICB9XG59KVxuXG53aW5kb3cuVnVlLmZpbHRlcignbG9jYWxpemUnLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkgcmV0dXJuICcnXG4gIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKVxuICByZXR1cm4gd2luZG93LmxhbmdbdmFsdWVdID8gd2luZG93LmxhbmdbdmFsdWVdIDogdmFsdWVcbn0pXG5cbndpbmRvdy5WdWUuY29tcG9uZW50KCdmb250LWF3ZXNvbWUtaWNvbicsIEZvbnRBd2Vzb21lSWNvbilcblxud2luZG93LkV2ZW50QnVzID0gbmV3IFZ1ZSgpXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2Jvb3RzdHJhcC5qcyIsInZhciBhc3luY0dlbmVyYXRvciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXdhaXRWYWx1ZSh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFzeW5jR2VuZXJhdG9yKGdlbikge1xuICAgIHZhciBmcm9udCwgYmFjaztcblxuICAgIGZ1bmN0aW9uIHNlbmQoa2V5LCBhcmcpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIGFyZzogYXJnLFxuICAgICAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0OiByZWplY3QsXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChiYWNrKSB7XG4gICAgICAgICAgYmFjayA9IGJhY2submV4dCA9IHJlcXVlc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbnQgPSBiYWNrID0gcmVxdWVzdDtcbiAgICAgICAgICByZXN1bWUoa2V5LCBhcmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUoa2V5LCBhcmcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXdhaXRWYWx1ZSkge1xuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZS52YWx1ZSkudGhlbihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXN1bWUoXCJuZXh0XCIsIGFyZyk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmVzdW1lKFwidGhyb3dcIiwgYXJnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXR0bGUocmVzdWx0LmRvbmUgPyBcInJldHVyblwiIDogXCJub3JtYWxcIiwgcmVzdWx0LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHNldHRsZShcInRocm93XCIsIGVycik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dGxlKHR5cGUsIHZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICAgIGZyb250LnJlc29sdmUoe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJ0aHJvd1wiOlxuICAgICAgICAgIGZyb250LnJlamVjdCh2YWx1ZSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBmcm9udC5yZXNvbHZlKHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGZyb250ID0gZnJvbnQubmV4dDtcblxuICAgICAgaWYgKGZyb250KSB7XG4gICAgICAgIHJlc3VtZShmcm9udC5rZXksIGZyb250LmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYWNrID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pbnZva2UgPSBzZW5kO1xuXG4gICAgaWYgKHR5cGVvZiBnZW4ucmV0dXJuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRoaXMucmV0dXJuID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHtcbiAgICBBc3luY0dlbmVyYXRvci5wcm90b3R5cGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgfVxuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJuZXh0XCIsIGFyZyk7XG4gIH07XG5cbiAgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLnRocm93ID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiB0aGlzLl9pbnZva2UoXCJ0aHJvd1wiLCBhcmcpO1xuICB9O1xuXG4gIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZS5yZXR1cm4gPSBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludm9rZShcInJldHVyblwiLCBhcmcpO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgd3JhcDogZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IEFzeW5jR2VuZXJhdG9yKGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGF3YWl0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXcgQXdhaXRWYWx1ZSh2YWx1ZSk7XG4gICAgfVxuICB9O1xufSgpO1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24gKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTtcblxudmFyIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07XG5cbnZhciBDb25uZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29ubmVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdG9yKTtcblxuICAgICAgICB0aGlzLl9kZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGF1dGg6IHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7fVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF1dGhFbmRwb2ludDogJy9icm9hZGNhc3RpbmcvYXV0aCcsXG4gICAgICAgICAgICBicm9hZGNhc3RlcjogJ3B1c2hlcicsXG4gICAgICAgICAgICBjc3JmVG9rZW46IG51bGwsXG4gICAgICAgICAgICBob3N0OiBudWxsLFxuICAgICAgICAgICAga2V5OiBudWxsLFxuICAgICAgICAgICAgbmFtZXNwYWNlOiAnQXBwLkV2ZW50cydcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhDb25uZWN0b3IsIFt7XG4gICAgICAgIGtleTogJ3NldE9wdGlvbnMnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh0aGlzLl9kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAodGhpcy5jc3JmVG9rZW4oKSkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5hdXRoLmhlYWRlcnNbJ1gtQ1NSRi1UT0tFTiddID0gdGhpcy5jc3JmVG9rZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjc3JmVG9rZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3NyZlRva2VuKCkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvd1snTGFyYXZlbCddICYmIHdpbmRvd1snTGFyYXZlbCddLmNzcmZUb2tlbikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3dbJ0xhcmF2ZWwnXS5jc3JmVG9rZW47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5jc3JmVG9rZW4pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNzcmZUb2tlbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAoc2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdG9yLmdldEF0dHJpYnV0ZSgnY29udGVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENvbm5lY3Rvcjtcbn0oKTtcblxudmFyIENoYW5uZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2hhbm5lbCgpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2hhbm5lbCk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoQ2hhbm5lbCwgW3tcbiAgICAgICAga2V5OiAnbm90aWZpY2F0aW9uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG5vdGlmaWNhdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuKCcuSWxsdW1pbmF0ZVxcXFxOb3RpZmljYXRpb25zXFxcXEV2ZW50c1xcXFxCcm9hZGNhc3ROb3RpZmljYXRpb25DcmVhdGVkJywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsaXN0ZW5Gb3JXaGlzcGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbkZvcldoaXNwZXIoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW4oJy5jbGllbnQtJyArIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIENoYW5uZWw7XG59KCk7XG5cbnZhciBFdmVudEZvcm1hdHRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudEZvcm1hdHRlcihuYW1lc3BhY2UpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRGb3JtYXR0ZXIpO1xuXG4gICAgICAgIHRoaXMuc2V0TmFtZXNwYWNlKG5hbWVzcGFjZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoRXZlbnRGb3JtYXR0ZXIsIFt7XG4gICAgICAgIGtleTogJ2Zvcm1hdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5jaGFyQXQoMCkgPT09ICcuJyB8fCBldmVudC5jaGFyQXQoMCkgPT09ICdcXFxcJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5zdWJzdHIoMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmFtZXNwYWNlKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQgPSB0aGlzLm5hbWVzcGFjZSArICcuJyArIGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50LnJlcGxhY2UoL1xcLi9nLCAnXFxcXCcpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzZXROYW1lc3BhY2UnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmFtZXNwYWNlKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWVzcGFjZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBFdmVudEZvcm1hdHRlcjtcbn0oKTtcblxudmFyIFB1c2hlckNoYW5uZWwgPSBmdW5jdGlvbiAoX0NoYW5uZWwpIHtcbiAgICBpbmhlcml0cyhQdXNoZXJDaGFubmVsLCBfQ2hhbm5lbCk7XG5cbiAgICBmdW5jdGlvbiBQdXNoZXJDaGFubmVsKHB1c2hlciwgbmFtZSwgb3B0aW9ucykge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJDaGFubmVsKTtcblxuICAgICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQdXNoZXJDaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHVzaGVyQ2hhbm5lbCkpLmNhbGwodGhpcykpO1xuXG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5wdXNoZXIgPSBwdXNoZXI7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBfdGhpcy5ldmVudEZvcm1hdHRlciA9IG5ldyBFdmVudEZvcm1hdHRlcihfdGhpcy5vcHRpb25zLm5hbWVzcGFjZSk7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZSgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoUHVzaGVyQ2hhbm5lbCwgW3tcbiAgICAgICAga2V5OiAnc3Vic2NyaWJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5wdXNoZXIuc3Vic2NyaWJlKHRoaXMubmFtZSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Vuc3Vic2NyaWJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgdGhpcy5wdXNoZXIudW5zdWJzY3JpYmUodGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGlzdGVuJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxpc3RlbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24odGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpLCBjYWxsYmFjayk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc3RvcExpc3RlbmluZycsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wTGlzdGVuaW5nKGV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bmJpbmQodGhpcy5ldmVudEZvcm1hdHRlci5mb3JtYXQoZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdvbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLmJpbmQoZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBQdXNoZXJDaGFubmVsO1xufShDaGFubmVsKTtcblxudmFyIFB1c2hlclByaXZhdGVDaGFubmVsID0gZnVuY3Rpb24gKF9QdXNoZXJDaGFubmVsKSB7XG4gICAgaW5oZXJpdHMoUHVzaGVyUHJpdmF0ZUNoYW5uZWwsIF9QdXNoZXJDaGFubmVsKTtcblxuICAgIGZ1bmN0aW9uIFB1c2hlclByaXZhdGVDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJQcml2YXRlQ2hhbm5lbCk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQdXNoZXJQcml2YXRlQ2hhbm5lbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFB1c2hlclByaXZhdGVDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoUHVzaGVyUHJpdmF0ZUNoYW5uZWwsIFt7XG4gICAgICAgIGtleTogJ3doaXNwZXInLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gd2hpc3BlcihldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyLmNoYW5uZWxzLmNoYW5uZWxzW3RoaXMubmFtZV0udHJpZ2dlcignY2xpZW50LScgKyBldmVudE5hbWUsIGRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFB1c2hlclByaXZhdGVDaGFubmVsO1xufShQdXNoZXJDaGFubmVsKTtcblxudmFyIFB1c2hlclByZXNlbmNlQ2hhbm5lbCA9IGZ1bmN0aW9uIChfUHVzaGVyQ2hhbm5lbCkge1xuICAgIGluaGVyaXRzKFB1c2hlclByZXNlbmNlQ2hhbm5lbCwgX1B1c2hlckNoYW5uZWwpO1xuXG4gICAgZnVuY3Rpb24gUHVzaGVyUHJlc2VuY2VDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJQcmVzZW5jZUNoYW5uZWwpO1xuICAgICAgICByZXR1cm4gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUHVzaGVyUHJlc2VuY2VDaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUHVzaGVyUHJlc2VuY2VDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoUHVzaGVyUHJlc2VuY2VDaGFubmVsLCBbe1xuICAgICAgICBrZXk6ICdoZXJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhlcmUoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oJ3B1c2hlcjpzdWJzY3JpcHRpb25fc3VjY2VlZGVkJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhPYmplY3Qua2V5cyhkYXRhLm1lbWJlcnMpLm1hcChmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5tZW1iZXJzW2tdO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2pvaW5pbmcnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbmluZyhjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbigncHVzaGVyOm1lbWJlcl9hZGRlZCcsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtZW1iZXIuaW5mbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsZWF2aW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oJ3B1c2hlcjptZW1iZXJfcmVtb3ZlZCcsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhtZW1iZXIuaW5mbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICd3aGlzcGVyJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHdoaXNwZXIoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnB1c2hlci5jaGFubmVscy5jaGFubmVsc1t0aGlzLm5hbWVdLnRyaWdnZXIoJ2NsaWVudC0nICsgZXZlbnROYW1lLCBkYXRhKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBQdXNoZXJQcmVzZW5jZUNoYW5uZWw7XG59KFB1c2hlckNoYW5uZWwpO1xuXG52YXIgU29ja2V0SW9DaGFubmVsID0gZnVuY3Rpb24gKF9DaGFubmVsKSB7XG4gICAgaW5oZXJpdHMoU29ja2V0SW9DaGFubmVsLCBfQ2hhbm5lbCk7XG5cbiAgICBmdW5jdGlvbiBTb2NrZXRJb0NoYW5uZWwoc29ja2V0LCBuYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFNvY2tldElvQ2hhbm5lbCk7XG5cbiAgICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU29ja2V0SW9DaGFubmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU29ja2V0SW9DaGFubmVsKSkuY2FsbCh0aGlzKSk7XG5cbiAgICAgICAgX3RoaXMuZXZlbnRzID0ge307XG4gICAgICAgIF90aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICBfdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBfdGhpcy5ldmVudEZvcm1hdHRlciA9IG5ldyBFdmVudEZvcm1hdHRlcihfdGhpcy5vcHRpb25zLm5hbWVzcGFjZSk7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZSgpO1xuICAgICAgICBfdGhpcy5jb25maWd1cmVSZWNvbm5lY3RvcigpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoU29ja2V0SW9DaGFubmVsLCBbe1xuICAgICAgICBrZXk6ICdzdWJzY3JpYmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnc3Vic2NyaWJlJywge1xuICAgICAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBhdXRoOiB0aGlzLm9wdGlvbnMuYXV0aCB8fCB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3Vuc3Vic2NyaWJlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgdGhpcy51bmJpbmQoKTtcbiAgICAgICAgICAgIHRoaXMuc29ja2V0LmVtaXQoJ3Vuc3Vic2NyaWJlJywge1xuICAgICAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBhdXRoOiB0aGlzLm9wdGlvbnMuYXV0aCB8fCB7fVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLm9uKHRoaXMuZXZlbnRGb3JtYXR0ZXIuZm9ybWF0KGV2ZW50KSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ29uJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIG9uKGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKGNoYW5uZWwsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMyLm5hbWUgPT0gY2hhbm5lbCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub24oZXZlbnQsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuYmluZChldmVudCwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjb25maWd1cmVSZWNvbm5lY3RvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25maWd1cmVSZWNvbm5lY3RvcigpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiBsaXN0ZW5lcigpIHtcbiAgICAgICAgICAgICAgICBfdGhpczMuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQub24oJ3JlY29ubmVjdCcsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIHRoaXMuYmluZCgncmVjb25uZWN0JywgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdiaW5kJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJpbmQoZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB0aGlzLmV2ZW50c1tldmVudF0gfHwgW107XG4gICAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3VuYmluZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmQoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5ldmVudHMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXM0LmV2ZW50c1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXM0LnNvY2tldC5yZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpczQuZXZlbnRzW2V2ZW50XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfV0pO1xuICAgIHJldHVybiBTb2NrZXRJb0NoYW5uZWw7XG59KENoYW5uZWwpO1xuXG52YXIgU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCA9IGZ1bmN0aW9uIChfU29ja2V0SW9DaGFubmVsKSB7XG4gICAgaW5oZXJpdHMoU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCwgX1NvY2tldElvQ2hhbm5lbCk7XG5cbiAgICBmdW5jdGlvbiBTb2NrZXRJb1ByaXZhdGVDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb1ByaXZhdGVDaGFubmVsKTtcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFNvY2tldElvUHJpdmF0ZUNoYW5uZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTb2NrZXRJb1ByaXZhdGVDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoU29ja2V0SW9Qcml2YXRlQ2hhbm5lbCwgW3tcbiAgICAgICAga2V5OiAnd2hpc3BlcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiB3aGlzcGVyKGV2ZW50TmFtZSwgZGF0YSkge1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQuZW1pdCgnY2xpZW50IGV2ZW50Jywge1xuICAgICAgICAgICAgICAgIGNoYW5uZWw6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICBldmVudDogJ2NsaWVudC0nICsgZXZlbnROYW1lLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFNvY2tldElvUHJpdmF0ZUNoYW5uZWw7XG59KFNvY2tldElvQ2hhbm5lbCk7XG5cbnZhciBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCA9IGZ1bmN0aW9uIChfU29ja2V0SW9Qcml2YXRlQ2hhbm4pIHtcbiAgICBpbmhlcml0cyhTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCwgX1NvY2tldElvUHJpdmF0ZUNoYW5uKTtcblxuICAgIGZ1bmN0aW9uIFNvY2tldElvUHJlc2VuY2VDaGFubmVsKCkge1xuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbCk7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChTb2NrZXRJb1ByZXNlbmNlQ2hhbm5lbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNvY2tldElvUHJlc2VuY2VDaGFubmVsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2xhc3MoU29ja2V0SW9QcmVzZW5jZUNoYW5uZWwsIFt7XG4gICAgICAgIGtleTogJ2hlcmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gaGVyZShjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbigncHJlc2VuY2U6c3Vic2NyaWJlZCcsIGZ1bmN0aW9uIChtZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobWVtYmVycy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0udXNlcl9pbmZvO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2pvaW5pbmcnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gam9pbmluZyhjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbigncHJlc2VuY2U6am9pbmluZycsIGZ1bmN0aW9uIChtZW1iZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobWVtYmVyLnVzZXJfaW5mbyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsZWF2aW5nJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZpbmcoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMub24oJ3ByZXNlbmNlOmxlYXZpbmcnLCBmdW5jdGlvbiAobWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG1lbWJlci51c2VyX2luZm8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gU29ja2V0SW9QcmVzZW5jZUNoYW5uZWw7XG59KFNvY2tldElvUHJpdmF0ZUNoYW5uZWwpO1xuXG52YXIgUHVzaGVyQ29ubmVjdG9yID0gZnVuY3Rpb24gKF9Db25uZWN0b3IpIHtcbiAgICBpbmhlcml0cyhQdXNoZXJDb25uZWN0b3IsIF9Db25uZWN0b3IpO1xuXG4gICAgZnVuY3Rpb24gUHVzaGVyQ29ubmVjdG9yKCkge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQdXNoZXJDb25uZWN0b3IpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF90aGlzID0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IFB1c2hlckNvbm5lY3Rvci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFB1c2hlckNvbm5lY3RvcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgICAgIF90aGlzLmNoYW5uZWxzID0ge307XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhQdXNoZXJDb25uZWN0b3IsIFt7XG4gICAgICAgIGtleTogJ2Nvbm5lY3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyID0gbmV3IFB1c2hlcih0aGlzLm9wdGlvbnMua2V5LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsaXN0ZW4nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGlzdGVuKG5hbWUsIGV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbChuYW1lKS5saXN0ZW4oZXZlbnQsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnY2hhbm5lbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbbmFtZV0gPSBuZXcgUHVzaGVyQ2hhbm5lbCh0aGlzLnB1c2hlciwgbmFtZSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoYW5uZWxzW25hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcml2YXRlQ2hhbm5lbCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwcml2YXRlQ2hhbm5lbChuYW1lKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1sncHJpdmF0ZS0nICsgbmFtZV0gPSBuZXcgUHVzaGVyUHJpdmF0ZUNoYW5uZWwodGhpcy5wdXNoZXIsICdwcml2YXRlLScgKyBuYW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmVzZW5jZUNoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlc2VuY2VDaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdID0gbmV3IFB1c2hlclByZXNlbmNlQ2hhbm5lbCh0aGlzLnB1c2hlciwgJ3ByZXNlbmNlLScgKyBuYW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByZXNlbmNlLScgKyBuYW1lXTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnbGVhdmUnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbGVhdmUobmFtZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBjaGFubmVscyA9IFtuYW1lLCAncHJpdmF0ZS0nICsgbmFtZSwgJ3ByZXNlbmNlLScgKyBuYW1lXTtcbiAgICAgICAgICAgIGNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMi5jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuY2hhbm5lbHNbbmFtZV0udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzMi5jaGFubmVsc1tuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnc29ja2V0SWQnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc29ja2V0SWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoZXIuY29ubmVjdGlvbi5zb2NrZXRfaWQ7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2Rpc2Nvbm5lY3QnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdCgpIHtcbiAgICAgICAgICAgIHRoaXMucHVzaGVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfVxuICAgIH1dKTtcbiAgICByZXR1cm4gUHVzaGVyQ29ubmVjdG9yO1xufShDb25uZWN0b3IpO1xuXG52YXIgU29ja2V0SW9Db25uZWN0b3IgPSBmdW5jdGlvbiAoX0Nvbm5lY3Rvcikge1xuICAgIGluaGVyaXRzKFNvY2tldElvQ29ubmVjdG9yLCBfQ29ubmVjdG9yKTtcblxuICAgIGZ1bmN0aW9uIFNvY2tldElvQ29ubmVjdG9yKCkge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTb2NrZXRJb0Nvbm5lY3Rvcik7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3RoaXMgPSBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU29ja2V0SW9Db25uZWN0b3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTb2NrZXRJb0Nvbm5lY3RvcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpO1xuXG4gICAgICAgIF90aGlzLmNoYW5uZWxzID0ge307XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG5cbiAgICBjcmVhdGVDbGFzcyhTb2NrZXRJb0Nvbm5lY3RvciwgW3tcbiAgICAgICAga2V5OiAnY29ubmVjdCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0KCkge1xuICAgICAgICAgICAgdmFyIGlvID0gdGhpcy5nZXRTb2NrZXRJTygpO1xuICAgICAgICAgICAgdGhpcy5zb2NrZXQgPSBpbyh0aGlzLm9wdGlvbnMuaG9zdCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNvY2tldDtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnZ2V0U29ja2V0SU8nLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U29ja2V0SU8oKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlvICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBpbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2xpZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTb2NrZXQuaW8gY2xpZW50IG5vdCBmb3VuZC4gU2hvdWxkIGJlIGdsb2JhbGx5IGF2YWlsYWJsZSBvciBwYXNzZWQgdmlhIG9wdGlvbnMuY2xpZW50Jyk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4obmFtZSwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsKG5hbWUpLmxpc3RlbihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdjaGFubmVsJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5uZWwobmFtZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1tuYW1lXSA9IG5ldyBTb2NrZXRJb0NoYW5uZWwodGhpcy5zb2NrZXQsIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsc1tuYW1lXTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncHJpdmF0ZUNoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJpdmF0ZUNoYW5uZWwobmFtZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmNoYW5uZWxzWydwcml2YXRlLScgKyBuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdID0gbmV3IFNvY2tldElvUHJpdmF0ZUNoYW5uZWwodGhpcy5zb2NrZXQsICdwcml2YXRlLScgKyBuYW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hhbm5lbHNbJ3ByaXZhdGUtJyArIG5hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcmVzZW5jZUNoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJlc2VuY2VDaGFubmVsKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdID0gbmV3IFNvY2tldElvUHJlc2VuY2VDaGFubmVsKHRoaXMuc29ja2V0LCAncHJlc2VuY2UtJyArIG5hbWUsIHRoaXMub3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGFubmVsc1sncHJlc2VuY2UtJyArIG5hbWVdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdsZWF2ZScsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsZWF2ZShuYW1lKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgICAgdmFyIGNoYW5uZWxzID0gW25hbWUsICdwcml2YXRlLScgKyBuYW1lLCAncHJlc2VuY2UtJyArIG5hbWVdO1xuICAgICAgICAgICAgY2hhbm5lbHMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpczIuY2hhbm5lbHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMyLmNoYW5uZWxzW25hbWVdLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpczIuY2hhbm5lbHNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ3NvY2tldElkJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNvY2tldElkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc29ja2V0LmlkO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkaXNjb25uZWN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICB0aGlzLnNvY2tldC5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIFNvY2tldElvQ29ubmVjdG9yO1xufShDb25uZWN0b3IpO1xuXG52YXIgRWNobyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFY2hvKG9wdGlvbnMpIHtcbiAgICAgICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgRWNobyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKHR5cGVvZiBWdWUgPT09ICdmdW5jdGlvbicgJiYgVnVlLmh0dHApIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJWdWVSZXF1ZXN0SW50ZXJjZXB0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGF4aW9zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQXhpb3NSZXF1ZXN0SW50ZXJjZXB0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlcmpRdWVyeUFqYXhTZXR1cCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYnJvYWRjYXN0ZXIgPT0gJ3B1c2hlcicpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yID0gbmV3IFB1c2hlckNvbm5lY3Rvcih0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5icm9hZGNhc3RlciA9PSAnc29ja2V0LmlvJykge1xuICAgICAgICAgICAgdGhpcy5jb25uZWN0b3IgPSBuZXcgU29ja2V0SW9Db25uZWN0b3IodGhpcy5vcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNsYXNzKEVjaG8sIFt7XG4gICAgICAgIGtleTogJ3JlZ2lzdGVyVnVlUmVxdWVzdEludGVyY2VwdG9yJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlZ2lzdGVyVnVlUmVxdWVzdEludGVyY2VwdG9yKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgVnVlLmh0dHAuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24gKHJlcXVlc3QsIG5leHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuc29ja2V0SWQoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LmhlYWRlcnMuc2V0KCdYLVNvY2tldC1JRCcsIF90aGlzLnNvY2tldElkKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXJBeGlvc1JlcXVlc3RJbnRlcmNlcHRvcicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZWdpc3RlckF4aW9zUmVxdWVzdEludGVyY2VwdG9yKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIGF4aW9zLmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMi5zb2NrZXRJZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzWydYLVNvY2tldC1JZCddID0gX3RoaXMyLnNvY2tldElkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAncmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVnaXN0ZXJqUXVlcnlBamF4U2V0dXAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBqUXVlcnkuYWpheCAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGpRdWVyeS5hamF4U2V0dXAoe1xuICAgICAgICAgICAgICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbiBiZWZvcmVTZW5kKHhocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy5zb2NrZXRJZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ1gtU29ja2V0LUlkJywgX3RoaXMzLnNvY2tldElkKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xpc3RlbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW4oY2hhbm5lbCwgZXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25uZWN0b3IubGlzdGVuKGNoYW5uZWwsIGV2ZW50LCBjYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2NoYW5uZWwnLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2hhbm5lbChfY2hhbm5lbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29ubmVjdG9yLmNoYW5uZWwoX2NoYW5uZWwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdwcml2YXRlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9wcml2YXRlKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5wcml2YXRlQ2hhbm5lbChjaGFubmVsKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiAnam9pbicsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBqb2luKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5wcmVzZW5jZUNoYW5uZWwoY2hhbm5lbCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogJ2xlYXZlJyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxlYXZlKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIHRoaXMuY29ubmVjdG9yLmxlYXZlKGNoYW5uZWwpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdzb2NrZXRJZCcsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzb2NrZXRJZCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3Rvci5zb2NrZXRJZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6ICdkaXNjb25uZWN0JyxcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICB0aGlzLmNvbm5lY3Rvci5kaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XSk7XG4gICAgcmV0dXJuIEVjaG87XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gRWNobztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sYXJhdmVsLWVjaG8vZGlzdC9lY2hvLmpzXG4vLyBtb2R1bGUgaWQgPSBpdXpYXG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIDIgMyA0IDUgNyA4IDkiLCJpbXBvcnQgJy4vLi4vLi4vYm9vdHN0cmFwJ1xuaW1wb3J0IGxvZ2luIGZyb20gJy4vLi4vLi4vY29tcG9uZW50cy9hdXRoL2xvZ2luLnZ1ZSdcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xuICBlbDogJyNhcHAnLFxuICBjb21wb25lbnRzOiB7XG4gICAgbG9naW5cbiAgfVxufSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3Jlc291cmNlcy9hc3NldHMvanMvcGFnZXMvYXV0aC9sb2dpbi5qcyIsInZhciBub3JtYWxpemVDb21wb25lbnQgPSByZXF1aXJlKFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9jb21wb25lbnQtbm9ybWFsaXplclwiKVxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18gPSByZXF1aXJlKFwiISFiYWJlbC1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6dHJ1ZSxcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlLFxcXCJ0YXJnZXRzXFxcIjp7XFxcImJyb3dzZXJzXFxcIjpbXFxcIj4gMiVcXFwiXSxcXFwidWdsaWZ5XFxcIjp0cnVlfX1dLFtcXFwiZW52XFxcIix7XFxcIm1vZHVsZXNcXFwiOmZhbHNlfV1dLFxcXCJwbHVnaW5zXFxcIjpbXFxcInRyYW5zZm9ybS1vYmplY3QtcmVzdC1zcHJlYWRcXFwiLFtcXFwidHJhbnNmb3JtLXJ1bnRpbWVcXFwiLHtcXFwicG9seWZpbGxcXFwiOmZhbHNlLFxcXCJoZWxwZXJzXFxcIjpmYWxzZX1dXSxcXFwiZW52XFxcIjp7XFxcInRlc3RcXFwiOntcXFwicHJlc2V0c1xcXCI6W1tcXFwiZW52XFxcIix7XFxcInRhcmdldHNcXFwiOntcXFwibm9kZVxcXCI6XFxcImN1cnJlbnRcXFwifX1dXX19fSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2xvZ2luLnZ1ZVwiKVxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9fID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3RlbXBsYXRlLWNvbXBpbGVyL2luZGV4P3tcXFwiaWRcXFwiOlxcXCJkYXRhLXYtODU5YzY3NThcXFwiLFxcXCJoYXNTY29wZWRcXFwiOmZhbHNlLFxcXCJidWJsZVxcXCI6e1xcXCJ0cmFuc2Zvcm1zXFxcIjp7fX19IS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXRlbXBsYXRlJmluZGV4PTAhLi9sb2dpbi52dWVcIilcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBudWxsXG4vKiBzY29wZUlkICovXG52YXIgX192dWVfc2NvcGVJZF9fID0gbnVsbFxuLyogbW9kdWxlSWRlbnRpZmllciAoc2VydmVyIG9ubHkpICovXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyA9IG51bGxcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wb25lbnQuZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2NvbXBvbmVudHMvYXV0aC9sb2dpbi52dWVcbi8vIG1vZHVsZSBpZCA9IHl6Q1hcbi8vIG1vZHVsZSBjaHVua3MgPSA4Il0sInNvdXJjZVJvb3QiOiIifQ==