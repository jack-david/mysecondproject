webpackJsonp([5],{"0Zgn":function(e,t,n){var s=n("VU/8")(n("9/Q8"),n("tJDg"),!1,null,null,null);e.exports=s.exports},6:function(e,t,n){e.exports=n("UeMd")},"7EUu":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,notificationShown:!1,unreadNotification:!1}},methods:{toggleNotification:function(e){this.notificationShown?(document.body.removeEventListener("keyup",this.hideNotification),this.hideNotification(e)):(document.body.addEventListener("keyup",this.hideNotification),this.showNotification())},showNotification:function(e){this.profileDropdownShown&&(this.profileDropdownShown=!1),this.notificationShown=!0},hideNotification:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.notificationShown=!1}}}},"8tCw":function(e,t,n){var s=n("VU/8")(n("7EUu"),n("fN9P"),!1,null,null,null);e.exports=s.exports},"9/Q8":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("YGfU"),r=n.n(s),i=n("QI7J"),o=n.n(i),a=n("YIHl"),l=n.n(a);t.default={components:{Account:r.a,Own:o.a,Other:l.a},props:["user","timezones","locales"],data:function(){return{activeTab:"profile",authUser:navbar.user}},methods:{activateTab:function(e){this.activeTab=e}}}},BDRz:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("nav",{staticClass:"bg-white flex flex-row justify-between h-12 pl-4 md:px-4 shadow"},[t("a",{staticClass:"text-teal text-2xl no-underline self-center",attrs:{href:this.url.site}},[this._v("\n      GOODWORK\n  ")]),this._v(" "),t("div",{staticClass:"md:flex"},[t("div",{staticClass:"flex flex-row border-l h-full"},[t("notification-dropdown"),this._v(" "),t("profile-dropdown")],1)])])},staticRenderFns:[]}},FByL:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fixed pin-t bg-white text-lg rounded container mx-auto md:w-1/2 mt-16 py-6 px-8 shadow-lg z-50",class:[this.notificationShown?"":"hidden","success"===this.messageType?"text-teal-light":"text-red"],staticStyle:{left:"0",right:"0","max-width":"640px"}},[this._v("\n    "+this._s(this.message)+" \n    "),t("div",{staticClass:"inline",on:{click:this.closeNotification}},[t("i",{staticClass:"fas fa-times float-right cursor-pointer"})])])},staticRenderFns:[]}},GExr:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 border-l flex items-center cursor-pointer p-4"},[n("div",{staticClass:"flex flex-row items-center",attrs:{id:"profile-dropdown"},on:{click:e.toggleProfileDropdown}},[n("img",{staticClass:"w-10 h-10 rounded-full md:mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),n("span",{staticClass:"text-grey-darker text-base no-underline hidden md:block"},[e._v("\n      "+e._s(e.user.name)+"\n      "),n("i",{staticClass:"fa fa-angle-down",attrs:{"aria-hidden":"true"}})])]),e._v(" "),e.profileDropdownShown?n("div",{staticClass:"absolute bg-white w-48 pin-r mr-2 py-1 shadow-lg rounded z-50",staticStyle:{top:"3.5rem"},attrs:{id:"profile-menu"}},[n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white no-underline text-grey-dark block font-medium",attrs:{href:e.profileUrl}},[e._m(0),e._v("\n      "+e._s(e._f("localize")("Your Profile"))+"\n    ")]),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"/admin"}},[e._m(1),e._v("\n      "+e._s(e._f("localize")("Admin"))+"\n    ")]),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"#"}},[e._m(2),e._v("\n      "+e._s(e._f("localize")("Settings"))+"\n    ")]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:e.url.logout},on:{click:e.logoutUser}},[e._m(3),e._v("\n      "+e._s(e._f("localize")("Logout"))+"\n    ")])]):e._e(),e._v(" "),n("form",{staticStyle:{display:"none"},attrs:{id:"logout-form",action:e.url.logout,method:"POST"}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:e.token}})])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-user"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-shield-alt font-regular"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-cog font-regular"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-sign-out-alt font-regular"})])}]}},IFl9:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("IW2Z"),r=n.n(s);t.default={name:"Own",components:{FileUpload:r.a},props:["user","timezones","locales"],data:function(){return{avatar:null}},methods:{updateImage:function(e){this.avatar=e},updateProfile:function(){axios.put("/users/"+this.user.username+"/profile",{name:this.user.name,bio:this.user.bio,designation:this.user.designation,timezone:this.user.timezone,week_start:this.user.week_start,lang:this.user.lang}).then(function(e){"success"==e.data.status&&EventBus.$emit("notification",e.data.message,e.data.status)}).catch(function(e){EventBus.$emit("notification",e.response.data.message,e.response.data.status)})}},mounted:function(){this.avatar=this.generateUrl(this.user.avatar)}}},IW2Z:function(e,t,n){var s=n("VU/8")(n("nkvb"),n("g3Qr"),!1,null,null,null);e.exports=s.exports},NJT3:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"pt-8 bg-white rounded shadow py-8"},[n("div",{staticClass:"flex flex-col items-center"},[n("img",{staticClass:"w-32 h-32 rounded-full",attrs:{src:"/image/avatar-profile.png",alt:"Default avatar of "+e.user.name}}),e._v(" "),n("div",{staticClass:"text-grey-darker text-2xl font-semibold py-2 px-8"},[e._v("\n            "+e._s(e.user.name)+"\n        ")]),e._v(" "),n("div",{staticClass:"text-grey-dark text-lg py-2 px-8"},[e._v("\n            "+e._s(e.user.designation)+"\n        ")]),e._v(" "),n("div",{staticClass:"text-grey-dark py-2 px-8"},[e._v("\n            "+e._s(e.userLocalTime)+"\n        ")]),e._v(" "),n("div",{staticClass:"text-grey-darker pt-2 pb-4 px-8 leading-normal"},[e._v("\n            "+e._s(e.user.bio)+"\n        ")]),e._v(" "),n("div",{staticClass:"text-grey-darker pt-8 self-start px-8 bg-grey-lighter w-full pb-8"},[n("div",[e._v("\n                Belongs to:\n                "),e._l(e.user.projects,function(t){return n("a",{staticClass:"bg-pink-lighter hover:bg-pink rounded font-medium p-2 mx-2 no-underline text-white",attrs:{href:"/projects/"+t.id}},[e._v("\n                    "+e._s(t.name)+"\n                ")])}),e._v(" "),e._l(e.user.teams,function(t){return n("a",{staticClass:"bg-pink-lighter hover:bg-pink rounded font-medium p-2 mx-2 no-underline text-white",attrs:{href:"/teams/"+t.id}},[e._v("\n                    "+e._s(t.name)+"\n                ")])})],2)])])])},staticRenderFns:[]}},Odtj:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white rounded shadow py-8 mt-8"},[n("div",{staticClass:"flex flex-col py-4"},[n("div",{staticClass:"mb-4 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[e._v("\n        "+e._s(e._f("localize")("Email"))+"\n      ")]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.user.email,expression:"user.email"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"email",type:"email",placeholder:"john@example.com"},domProps:{value:e.user.email},on:{input:function(t){t.target.composing||e.$set(e.user,"email",t.target.value)}}}),e._v(" "),e.errorMessage.email?n("div",{staticClass:"text-red text-base pt-2"},[e._v("\n        "+e._s(e.errorMessage.email)+"\n      ")]):e._e()]),e._v(" "),n("div",{staticClass:"border-half mt-4 mb-8"}),e._v(" "),n("div",{staticClass:"mb-8 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[e._v("\n        "+e._s(e._f("localize")("Current Password"))+"\n      ")]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.currentPassword,expression:"currentPassword"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"current_password",type:"password",placeholder:"******"},domProps:{value:e.currentPassword},on:{input:function(t){t.target.composing||(e.currentPassword=t.target.value)}}}),e._v(" "),e.errorMessage.current_password?n("div",{staticClass:"text-red text-base pt-2"},[e._v("\n        "+e._s(e.errorMessage.current_password)+"\n      ")]):e._e()]),e._v(" "),n("div",{staticClass:"mb-8 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[e._v("\n        "+e._s(e._f("localize")("New Password"))+"\n      ")]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.newPassword,expression:"newPassword"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"new_password",type:"password",placeholder:"******"},domProps:{value:e.newPassword},on:{input:function(t){t.target.composing||(e.newPassword=t.target.value)}}}),e._v(" "),e.errorMessage.new_password?n("div",{staticClass:"text-red text-base pt-2"},[e._v("\n        "+e._s(e.errorMessage.new_password)+"\n      ")]):e._e()]),e._v(" "),n("div",{staticClass:"mb-8 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[e._v("\n        "+e._s(e._f("localize")("Confirm Password"))+"\n      ")]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.newPasswordConfirmation,expression:"newPasswordConfirmation"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"confirm_password",type:"password",placeholder:"******"},domProps:{value:e.newPasswordConfirmation},on:{input:function(t){t.target.composing||(e.newPasswordConfirmation=t.target.value)}}}),e._v(" "),e.errorMessage.new_password_confirmation?n("div",{staticClass:"text-red text-base pt-2"},[e._v("\n        "+e._s(e.errorMessage.new_password_confirmation)+"\n      ")]):e._e()]),e._v(" "),n("div",{staticClass:"my-6 px-8"},[n("a",{staticClass:"font-bold rounded shadow bg-teal-light p-4 text-white hover:shadow-lg hover:font-bold hover:bg-teal-dark no-underline",attrs:{href:"#"},on:{click:e.update}},[e._v("\n        "+e._s(e._f("localize")("Update"))+"\n      ")])]),e._v(" "),n("div",{staticClass:"border-half mt-4 mb-8"}),e._v(" "),n("div",{staticClass:"mt-4 px-8"},[n("a",{staticClass:"rounded p-4 text-red-light border border-grey-light hover:font-bold hover:border-0 hover:shadow-lg hover:bg-red-light hover:text-white no-underline",attrs:{href:"#"}},[e._v("\n        "+e._s(e._f("localize")("Delete account"))+"\n      ")])])])])},staticRenderFns:[]}},QI7J:function(e,t,n){var s=n("VU/8")(n("IFl9"),n("m/K8"),!1,null,null,null);e.exports=s.exports},UeMd:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n("WRGp");var s=n("pQE+"),r=n.n(s),i=n("0Zgn"),o=n.n(i),a=n("Wfqs"),l=n.n(a);new Vue({el:"#app",components:{navbar:r.a,profile:o.a,notificationPopup:l.a}})},"VU/8":function(e,t){e.exports=function(e,t,n,s,r,i){var o,a=e=e||{},l=typeof e.default;"object"!==l&&"function"!==l||(o=e,a=e.default);var c,u="function"==typeof a?a.options:a;if(t&&(u.render=t.render,u.staticRenderFns=t.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),r&&(u._scopeId=r),i?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},u._ssrRegister=c):s&&(c=s),c){var d=u.functional,f=d?u.render:u.beforeCreate;d?(u._injectStyles=c,u.render=function(e,t){return c.call(t),f(e,t)}):u.beforeCreate=f?[].concat(f,c):[c]}return{esModule:o,exports:a,options:u}}},WRGp:function(e,t,n){"use strict";var s=n("iuzX"),r=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new r.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(e){return e?(e=e.toString(),window.location.protocol+"//"+window.location.host+"/"+e):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.Vue.filter("localize",function(e){return e?(e=e.toString(),window.lang[e]?window.lang[e]:e):""}),window.EventBus=new Vue},Wfqs:function(e,t,n){var s=n("VU/8")(n("aWzK"),n("FByL"),!1,null,null,null);e.exports=s.exports},YGfU:function(e,t,n){var s=n("VU/8")(n("eOps"),n("Odtj"),!1,null,null,null);e.exports=s.exports},YIHl:function(e,t,n){var s=n("VU/8")(n("wbWS"),n("NJT3"),!1,null,null,null);e.exports=s.exports},aWzK:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{notificationShown:!1,message:"",messageType:""}},methods:{closeNotification:function(){this.notificationShown=!1},showNotification:function(e,t){var n=this;this.message=e,this.messageType=t,this.notificationShown=!0,setTimeout(function(){n.closeNotification()},3e3)}},created:function(){EventBus.$on("notification",this.showNotification)},beforeDestroy:function(){EventBus.$off("notification",this.showNotification)}}},dBZW:function(e,t,n){var s=n("VU/8")(n("fDZG"),n("GExr"),!1,null,null,null);e.exports=s.exports},eOps:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{user:{required:!0,type:Object}},data:function(){return{email:"",currentPassword:"",newPassword:"",newPasswordConfirmation:"",errorMessage:{email:"",current_password:"",new_password:"",new_password_confirmation:""}}},methods:{update:function(){var e=this,t={};""!==this.email&&(t.email=this.email),""!==this.newPassword&&(t.current_password=this.currentPassword,t.new_password=this.newPassword,t.new_password_confirmation=this.newPasswordConfirmation),axios.put("/users/"+this.user.username+"/account",t).then(function(t){EventBus.$emit("notification",t.data.message,t.data.status),e.email="",e.currentPassword="",e.newPassword="",e.newPasswordConfirmation=""}).catch(function(t){for(var n in t.response.data.errors)t.response.data.errors.hasOwnProperty(n)&&e.$set(e.errorMessage,n,t.response.data.errors[n][0]);setTimeout(function(){e.errorMessage={email:"",current_password:"",new_password:"",new_password_confirmation:""}},2e3)})}}}},fDZG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,avatar:"",profileUrl:navbar.navUrl.site+"/users/"+navbar.user.username,profileDropdownShown:!1}},methods:{logoutUser:function(e){e.preventDefault(),document.getElementById("logout-form").submit()},toggleProfileDropdown:function(e){this.profileDropdownShown?(this.hideProfileDropdown(e),document.body.removeEventListener("keyup",this.hideProfileDropdown)):(this.showProfileDropdown(),document.body.addEventListener("keyup",this.hideProfileDropdown))},showProfileDropdown:function(e){this.notificationShown&&(this.notificationShown=!1),this.profileDropdownShown=!0},hideProfileDropdown:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.profileDropdownShown=!1}}}},fN9P:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 self-center"},[n("div",{staticClass:"text-teal-light text-base no-underline cursor-pointer",attrs:{id:"notification"},on:{click:e.toggleNotification}},[n("i",{staticClass:"far fa-bell font-bold text-xl",attrs:{"aria-hidden":"true"}}),e._v(" "),e.unreadNotification?n("i",{staticClass:"fa fa-circle text-red-light text-sm absolute pin-t mt-3 ml-3",attrs:{"aria-hidden":"true"}}):e._e()]),e._v(" "),e.notificationShown?n("div",{staticClass:"absolute bg-white w-64 mt-5 mr-8 py-4 shadow-lg rounded z-50",staticStyle:{right:"5%"}},[n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(0)]),e._v(" "),n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(1)]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"list-reset px-4 pt-2 text-blue-light text-center no-underline block",attrs:{href:"/notifications"}},[e._v("\n            View All\n        ")])]):e._e()])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])}]}},g3Qr:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("form",{attrs:{method:"post",enctype:"multipart/form-data"}},[t("input",{staticClass:"hidden",attrs:{type:"file",name:"avatar",id:"avatar",accept:"image/*"},on:{change:this.selectFile}}),this._v(" "),t("button",{staticClass:"bg-transparent text-grey-darker hover:text-teal py-2 px-4 border border-grey-light hover:border-teal rounded",attrs:{onclick:"document.getElementById('avatar').click(); return false;"}},[this._v(this._s(this._f("localize")("Change Your Avatar")))])])])},staticRenderFns:[]}},iuzX:function(e,t){!function(){function e(e){this.value=e}function t(t){var n,s;function r(n,s){try{var o=t[n](s),a=o.value;a instanceof e?Promise.resolve(a.value).then(function(e){r("next",e)},function(e){r("throw",e)}):i(o.done?"return":"normal",o.value)}catch(e){i("throw",e)}}function i(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?r(n.key,n.arg):s=null}this._invoke=function(e,t){return new Promise(function(i,o){var a={key:e,arg:t,resolve:i,reject:o,next:null};s?s=s.next=a:(n=s=a,r(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}();var n=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},i=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},a=function(){function e(t){n(this,e),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(t),this.connect()}return s(e,[{key:"setOptions",value:function(e){return this.options=r(this._defaultOptions,e),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),e}},{key:"csrfToken",value:function(){var e=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(e=document.querySelector('meta[name="csrf-token"]'))?e.getAttribute("content"):null}}]),e}(),l=function(){function e(){n(this,e)}return s(e,[{key:"notification",value:function(e){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",e)}},{key:"listenForWhisper",value:function(e,t){return this.listen(".client-"+e,t)}}]),e}(),c=function(){function e(t){n(this,e),this.setNamespace(t)}return s(e,[{key:"format",value:function(e){return"."===e.charAt(0)||"\\"===e.charAt(0)?e.substr(1):(this.namespace&&(e=this.namespace+"."+e),e.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(e){this.namespace=e}}]),e}(),u=function(e){function t(e,s,r){n(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i.name=s,i.pusher=e,i.options=r,i.eventFormatter=new c(i.options.namespace),i.subscribe(),i}return i(t,l),s(t,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"stopListening",value:function(e){return this.subscription.unbind(this.eventFormatter.format(e)),this}},{key:"on",value:function(e,t){return this.subscription.bind(e,t),this}}]),t}(),d=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,u),s(t,[{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),f=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,u),s(t,[{key:"here",value:function(e){return this.on("pusher:subscription_succeeded",function(t){e(Object.keys(t.members).map(function(e){return t.members[e]}))}),this}},{key:"joining",value:function(e){return this.on("pusher:member_added",function(t){e(t.info)}),this}},{key:"leaving",value:function(e){return this.on("pusher:member_removed",function(t){e(t.info)}),this}},{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),p=function(e){function t(e,s,r){n(this,t);var i=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return i.events={},i.name=s,i.socket=e,i.options=r,i.eventFormatter=new c(i.options.namespace),i.subscribe(),i.configureReconnector(),i}return i(t,l),s(t,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"on",value:function(e,t){var n=this,s=function(e,s){n.name==e&&t(s)};this.socket.on(e,s),this.bind(e,s)}},{key:"configureReconnector",value:function(){var e=this,t=function(){e.subscribe()};this.socket.on("reconnect",t),this.bind("reconnect",t)}},{key:"bind",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"unbind",value:function(){var e=this;Object.keys(this.events).forEach(function(t){e.events[t].forEach(function(n){e.socket.removeListener(t,n)}),delete e.events[t]})}}]),t}(),h=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,p),s(t,[{key:"whisper",value:function(e,t){return this.socket.emit("client event",{channel:this.name,event:"client-"+e,data:t}),this}}]),t}(),v=function(e){function t(){return n(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,h),s(t,[{key:"here",value:function(e){return this.on("presence:subscribed",function(t){e(t.map(function(e){return e.user_info}))}),this}},{key:"joining",value:function(e){return this.on("presence:joining",function(t){return e(t.user_info)}),this}},{key:"leaving",value:function(e){return this.on("presence:leaving",function(t){return e(t.user_info)}),this}}]),t}(),m=function(e){function t(){var e;n(this,t);for(var s=arguments.length,r=Array(s),i=0;i<s;i++)r[i]=arguments[i];var a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a.channels={},a}return i(t,a),s(t,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new u(this.pusher,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new d(this.pusher,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new f(this.pusher,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e,n){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),t}(),_=function(e){function t(){var e;n(this,t);for(var s=arguments.length,r=Array(s),i=0;i<s;i++)r[i]=arguments[i];var a=o(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return a.channels={},a}return i(t,a),s(t,[{key:"connect",value:function(){var e=this.getSocketIO();return this.socket=e(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new p(this.socket,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new h(this.socket,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new v(this.socket,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),t}(),w=function(){function e(t){n(this,e),this.options=t,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new m(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new _(this.options))}return s(e,[{key:"registerVueRequestInterceptor",value:function(){var e=this;Vue.http.interceptors.push(function(t,n){e.socketId()&&t.headers.set("X-Socket-ID",e.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var e=this;axios.interceptors.request.use(function(t){return e.socketId()&&(t.headers["X-Socket-Id"]=e.socketId()),t})}},{key:"registerjQueryAjaxSetup",value:function(){var e=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(t){e.socketId()&&t.setRequestHeader("X-Socket-Id",e.socketId())}})}},{key:"listen",value:function(e,t,n){return this.connector.listen(e,t,n)}},{key:"channel",value:function(e){return this.connector.channel(e)}},{key:"private",value:function(e){return this.connector.privateChannel(e)}},{key:"join",value:function(e){return this.connector.presenceChannel(e)}},{key:"leave",value:function(e){this.connector.leave(e)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),e}();e.exports=w},"m/K8":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white rounded shadow py-8 mt-8"},[n("div",{staticClass:"flex flex-col items-center"},[n("img",{staticClass:"w-32 h-32 rounded-full",attrs:{src:e.avatar,alt:"Default avatar of "+e.user.name}}),e._v(" "),n("div",{staticClass:"text-grey-darker text-2xl font-semibold py-4"},[e._v("\n            "+e._s(e.user.name)+"\n        ")]),e._v(" "),n("div",{},[n("file-upload",{attrs:{user:e.user},on:{"image-loaded":e.updateImage}})],1)]),e._v(" "),n("form",{staticClass:"px-8 pt-6"},[n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[e._v("\n                "+e._s(e._f("localize")("Name"))+"\n            ")]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.user.name,expression:"user.name"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"username",type:"text",placeholder:"Nehal Hasnayeen"},domProps:{value:e.user.name},on:{input:function(t){t.target.composing||e.$set(e.user,"name",t.target.value)}}})]),e._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"title"}},[e._v("\n                "+e._s(e._f("localize")("Title at Goodwork"))+"\n            ")]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.user.designation,expression:"user.designation"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"title",type:"text",placeholder:"Developer"},domProps:{value:e.user.designation},on:{input:function(t){t.target.composing||e.$set(e.user,"designation",t.target.value)}}})]),e._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"title"}},[e._v("\n                "+e._s(e._f("localize")("Short Bio"))+"\n            ")]),e._v(" "),n("textarea",{directives:[{name:"model",rawName:"v-model",value:e.user.bio,expression:"user.bio"}],staticClass:"shadow appearance-none resize-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"bio",type:"text",rows:"3",placeholder:"About Yourself"},domProps:{value:e.user.bio},on:{input:function(t){t.target.composing||e.$set(e.user,"bio",t.target.value)}}})]),e._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"timezone"}},[e._v("\n                "+e._s(e._f("localize")("Time Zone"))+"\n            ")]),e._v(" "),n("div",{staticClass:"relative"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.user.timezone,expression:"user.timezone"}],staticClass:"shadow appearance-none border rounded w-full px-3 py-2 text-grey-darker bg-grey-lighter text-grey-darker",attrs:{id:"grid-state"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.$set(e.user,"timezone",t.target.multiple?n:n[0])}}},[e._l(e.timezones,function(t){return[n("option",{domProps:{value:t}},[e._v(e._s(t))])]})],2),e._v(" "),n("div",{staticClass:"pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey-darker"},[n("svg",{staticClass:"fill-current h-4 w-4",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"}},[n("path",{attrs:{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"}})])])])]),e._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"weekstart"}},[e._v("\n                "+e._s(e._f("localize")("First Day of the Week"))+"\n            ")]),e._v(" "),n("div",{staticClass:"relative"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.user.week_start,expression:"user.week_start"}],staticClass:"shadow appearance-none border rounded w-full px-3 py-2 text-grey-darker bg-grey-lighter text-grey-darker",attrs:{id:"weekstart"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.$set(e.user,"week_start",t.target.multiple?n:n[0])}}},[n("option",[e._v("Saturday")]),e._v(" "),n("option",[e._v("Sunday")]),e._v(" "),n("option",[e._v("Monday")]),e._v(" "),n("option",[e._v("Tuesday")]),e._v(" "),n("option",[e._v("Wednesday")]),e._v(" "),n("option",[e._v("Thursday")]),e._v(" "),n("option",[e._v("Friday")])]),e._v(" "),n("div",{staticClass:"pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey-darker"},[n("svg",{staticClass:"fill-current h-4 w-4",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"}},[n("path",{attrs:{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"}})])])])]),e._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"weekstart"}},[e._v("\n                "+e._s(e._f("localize")("Preffered Language"))+"\n            ")]),e._v(" "),n("div",{staticClass:"relative"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.user.lang,expression:"user.lang"}],staticClass:"shadow appearance-none border rounded w-full px-3 py-2 text-grey-darker bg-grey-lighter text-grey-darker",attrs:{id:"weekstart"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.$set(e.user,"lang",t.target.multiple?n:n[0])}}},[e._l(e.locales,function(t,s){return[n("option",{domProps:{value:s}},[e._v(e._s(t))])]})],2),e._v(" "),n("div",{staticClass:"pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey-darker"},[n("svg",{staticClass:"fill-current h-4 w-4",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"}},[n("path",{attrs:{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"}})])])])]),e._v(" "),n("div",{staticClass:"mt-8"},[n("button",{staticClass:"bg-teal hover:bg-teal-dark text-white font-bold p-4 rounded shadow hover:shadow-lg",attrs:{type:"button"},on:{click:e.updateProfile}},[e._v("\n                "+e._s(e._f("localize")("Update"))+"\n            ")]),e._v(" "),n("div")])])])},staticRenderFns:[]}},nkvb:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["user"],methods:{selectFile:function(e){var t=this;if(e.target.files.length){var n=e.target.files[0],s=new FileReader;s.readAsDataURL(n),s.onload=function(e){t.$emit("image-loaded",e.target.result)},this.uploadImage(n)}},uploadImage:function(e){var t=new FormData;t.append("avatar",e),axios.post("/users/"+this.user.username+"/avatar",t).then(function(e){}).catch(function(e){})}}}},"pQE+":function(e,t,n){var s=n("VU/8")(n("qjuG"),n("BDRz"),!1,null,null,null);e.exports=s.exports},qjuG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("8tCw"),r=n.n(s),i=n("dBZW"),o=n.n(i);t.default={components:{notificationDropdown:r.a,profileDropdown:o.a},data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl}}}},tJDg:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"flex flex-col mx-4 md:mx-auto my-8 max-w-md"},[e.user.id===e.authUser.id?[n("div",{staticClass:"bg-white rounded shadow flex flex-row text-center text-grey-darker"},[n("div",{staticClass:"w-1/2 p-4",class:["profile"===e.activeTab?"text-white bg-teal-light":"cursor-pointer"],on:{click:function(t){e.activateTab("profile")}}},[e._v("\n        "+e._s(e._f("localize")("Profile"))+"\n      ")]),e._v(" "),n("div",{staticClass:"w-1/2 p-4",class:["account"===e.activeTab?"text-white bg-teal-light":"cursor-pointer"],on:{click:function(t){e.activateTab("account")}}},[e._v("\n        "+e._s(e._f("localize")("Account"))+"\n      ")])]),e._v(" "),"account"===e.activeTab?n("account",{attrs:{user:e.authUser}}):e._e(),e._v(" "),"profile"===e.activeTab?n("own",{attrs:{user:e.authUser,timezones:e.timezones,locales:e.locales}}):e._e()]:n("other",{attrs:{user:e.user}})],2)},staticRenderFns:[]}},wbWS:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("H9QG");n.n(s);t.default={name:"other",props:["user"],computed:{userLocalTime:function(){return s.DateTime.local().setZone(this.user.timezone).toLocaleString(s.DateTime.TIME_SIMPLE)}}}}},[6]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,