webpackJsonp([4],{"0Zgn":function(t,e,n){var s=n("VU/8")(n("9/Q8"),n("5fgA"),!1,null,null,null);t.exports=s.exports},"22c5":function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bg-white rounded shadow py-8 mt-8"},[n("div",{staticClass:"flex flex-col py-4"},[n("div",{staticClass:"mb-4 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[t._v("\n        Email\n      ")]),t._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:t.email,expression:"email"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"email",type:"email",placeholder:"john@example.com"},domProps:{value:t.email},on:{input:function(e){e.target.composing||(t.email=e.target.value)}}}),t._v(" "),t.errorMessage.email?n("div",{staticClass:"text-red text-base pt-2"},[t._v("\n        "+t._s(t.errorMessage.email)+"\n      ")]):t._e()]),t._v(" "),n("div",{staticClass:"border-half mt-4 mb-8"}),t._v(" "),n("div",{staticClass:"mb-8 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[t._v("\n        Current Password\n      ")]),t._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:t.currentPassword,expression:"currentPassword"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"current_password",type:"password",placeholder:"******"},domProps:{value:t.currentPassword},on:{input:function(e){e.target.composing||(t.currentPassword=e.target.value)}}}),t._v(" "),t.errorMessage.current_password?n("div",{staticClass:"text-red text-base pt-2"},[t._v("\n        "+t._s(t.errorMessage.current_password)+"\n      ")]):t._e()]),t._v(" "),n("div",{staticClass:"mb-8 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[t._v("\n        New Password\n      ")]),t._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:t.newPassword,expression:"newPassword"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"new_password",type:"password",placeholder:"******"},domProps:{value:t.newPassword},on:{input:function(e){e.target.composing||(t.newPassword=e.target.value)}}}),t._v(" "),t.errorMessage.new_password?n("div",{staticClass:"text-red text-base pt-2"},[t._v("\n        "+t._s(t.errorMessage.new_password)+"\n      ")]):t._e()]),t._v(" "),n("div",{staticClass:"mb-8 px-8"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[t._v("\n        Confirm Password\n      ")]),t._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:t.newPasswordConfirmation,expression:"newPasswordConfirmation"}],staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"confirm_password",type:"password",placeholder:"******"},domProps:{value:t.newPasswordConfirmation},on:{input:function(e){e.target.composing||(t.newPasswordConfirmation=e.target.value)}}}),t._v(" "),t.errorMessage.new_password_confirmation?n("div",{staticClass:"text-red text-base pt-2"},[t._v("\n        "+t._s(t.errorMessage.new_password_confirmation)+"\n      ")]):t._e()]),t._v(" "),n("div",{staticClass:"my-6 px-8"},[n("a",{staticClass:"font-bold rounded shadow bg-teal-light p-4 text-white hover:shadow-lg hover:font-bold hover:bg-teal-dark no-underline",attrs:{href:"#"},on:{click:t.update}},[t._v("\n        Update\n      ")])]),t._v(" "),n("div",{staticClass:"border-half mt-4 mb-8"}),t._v(" "),t._m(0)])])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"mt-4 px-8"},[e("a",{staticClass:"rounded p-4 text-red-light border border-grey-light hover:font-bold hover:border-0 hover:shadow-lg hover:bg-red-light hover:text-white no-underline",attrs:{href:"#"}},[this._v("\n        Delete account\n      ")])])}]}},"3IKD":function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bg-white rounded shadow py-8 mt-8"},[n("div",{staticClass:"flex flex-col items-center"},[n("img",{staticClass:"w-32 h-32 rounded-full",attrs:{src:t.avatar,alt:"Default avatar of "+t.user.name}}),t._v(" "),n("div",{staticClass:"text-grey-darker text-2xl font-semibold py-4"},[t._v("\n            "+t._s(t.user.name)+"\n        ")]),t._v(" "),n("div",{},[n("file-upload",{attrs:{user:t.user},on:{"image-loaded":t.updateImage}})],1)]),t._v(" "),n("form",{staticClass:"px-8 pt-6"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"timezone"}},[t._v("\n                Time Zone\n            ")]),t._v(" "),n("div",{staticClass:"relative"},[t._m(3),t._v(" "),n("div",{staticClass:"pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey-darker"},[n("svg",{staticClass:"fill-current h-4 w-4",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"}},[n("path",{attrs:{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"}})])])])]),t._v(" "),n("div",{staticClass:"mb-6"},[n("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"weekstart"}},[t._v("\n                First Day of the Week\n            ")]),t._v(" "),n("div",{staticClass:"relative"},[t._m(4),t._v(" "),n("div",{staticClass:"pointer-events-none absolute pin-y pin-r flex items-center px-2 text-grey-darker"},[n("svg",{staticClass:"fill-current h-4 w-4",attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 20 20"}},[n("path",{attrs:{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"}})])])])]),t._v(" "),t._m(5)])])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"mb-6"},[e("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"username"}},[this._v("\n                Name\n            ")]),this._v(" "),e("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"username",type:"text",placeholder:"Nehal Hasnayeen"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"mb-6"},[e("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"title"}},[this._v("\n                Title at Goodwork\n            ")]),this._v(" "),e("input",{staticClass:"shadow appearance-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"title",type:"text",placeholder:"Developer"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"mb-6"},[e("label",{staticClass:"block text-grey-darker text-sm font-bold mb-2",attrs:{for:"title"}},[this._v("\n                Short Bio\n            ")]),this._v(" "),e("textarea",{staticClass:"shadow appearance-none resize-none border rounded w-full py-2 px-3 text-grey-darker",attrs:{id:"bio",type:"text",rows:"3",placeholder:"About Yourself"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("select",{staticClass:"shadow appearance-none border rounded w-full px-3 py-2 text-grey-darker bg-grey-lighter text-grey-darker",attrs:{id:"grid-state"}},[e("option",[this._v("Asia/Dhaka (+6)")]),this._v(" "),e("option",[this._v("Missouri")]),this._v(" "),e("option",[this._v("Texas")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("select",{staticClass:"shadow appearance-none border rounded w-full px-3 py-2 text-grey-darker bg-grey-lighter text-grey-darker",attrs:{id:"weekstart"}},[e("option",[this._v("Saturday")]),this._v(" "),e("option",[this._v("Sunday")]),this._v(" "),e("option",[this._v("Monday")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"mt-8"},[e("button",{staticClass:"bg-teal hover:bg-teal-dark text-white font-bold p-4 rounded shadow hover:shadow-lg",attrs:{type:"button"}},[this._v("\n                Update\n            ")]),this._v(" "),e("div")])}]}},"5fgA":function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"flex flex-col mx-4 md:mx-auto my-8 max-w-md"},[t.user.id===t.authUser.id?[n("div",{staticClass:"bg-white rounded shadow flex flex-row text-center text-grey-darker"},[n("div",{staticClass:"w-1/2 p-4",class:["profile"===t.activeTab?"text-white bg-teal-light":"cursor-pointer"],on:{click:function(e){t.activateTab("profile")}}},[t._v("\n        Profile\n      ")]),t._v(" "),n("div",{staticClass:"w-1/2 p-4",class:["account"===t.activeTab?"text-white bg-teal-light":"cursor-pointer"],on:{click:function(e){t.activateTab("account")}}},[t._v("\n        Account\n      ")])]),t._v(" "),"account"===t.activeTab?n("account",{attrs:{user:t.authUser}}):t._e(),t._v(" "),"profile"===t.activeTab?n("own",{attrs:{user:t.authUser}}):t._e()]:n("other",{attrs:{user:t.user}})],2)},staticRenderFns:[]}},6:function(t,e,n){t.exports=n("UeMd")},"7EUu":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,notificationShown:!1,unreadNotification:!1}},methods:{toggleNotification:function(t){this.notificationShown?(document.body.removeEventListener("keyup",this.hideNotification),this.hideNotification(t)):(document.body.addEventListener("keyup",this.hideNotification),this.showNotification())},showNotification:function(t){this.profileDropdownShown&&(this.profileDropdownShown=!1),this.notificationShown=!0},hideNotification:function(t){if("keyup"===t.type&&"Escape"!==t.key)return!1;this.notificationShown=!1}}}},"8tCw":function(t,e,n){var s=n("VU/8")(n("7EUu"),n("fN9P"),!1,null,null,null);t.exports=s.exports},"9/Q8":function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=n("YGfU"),r=n.n(s),i=n("QI7J"),o=n.n(i),a=n("YIHl"),c=n.n(a);e.default={components:{Account:r.a,Own:o.a,Other:c.a},props:["user"],data:function(){return{activeTab:"profile",authUser:navbar.user}},methods:{activateTab:function(t){this.activeTab=t}}}},BDRz:function(t,e){t.exports={render:function(){var t=this.$createElement,e=this._self._c||t;return e("nav",{staticClass:"bg-white flex flex-row justify-between h-12 pl-4 md:px-4 shadow"},[e("a",{staticClass:"text-teal text-2xl no-underline self-center",attrs:{href:this.url.site}},[this._v("\n      GOODWORK\n  ")]),this._v(" "),e("div",{staticClass:"md:flex"},[e("div",{staticClass:"flex flex-row border-l h-full"},[e("notification-dropdown"),this._v(" "),e("profile-dropdown")],1)])])},staticRenderFns:[]}},IFl9:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=n("IW2Z"),r=n.n(s);e.default={name:"Own",components:{FileUpload:r.a},props:["user"],data:function(){return{avatar:null}},methods:{updateImage:function(t){this.avatar=t}},mounted:function(){this.avatar=this.generateUrl(this.user.avatar)}}},IW2Z:function(t,e,n){var s=n("VU/8")(n("nkvb"),n("gaqh"),!1,null,null,null);t.exports=s.exports},NJT3:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"pt-8 bg-white rounded shadow py-8"},[n("div",{staticClass:"flex flex-col items-center"},[n("img",{staticClass:"w-32 h-32 rounded-full",attrs:{src:"/image/avatar-profile.png",alt:"Default avatar of "+t.user.name}}),t._v(" "),n("div",{staticClass:"text-grey-darker text-2xl font-semibold py-2 px-8"},[t._v("\n            "+t._s(t.user.name)+"\n        ")]),t._v(" "),n("div",{staticClass:"text-grey-dark text-lg py-2 px-8"},[t._v("\n            "+t._s(t.user.designation)+"\n        ")]),t._v(" "),n("div",{staticClass:"text-grey-dark py-2 px-8"},[t._v("\n            "+t._s(t.userLocalTime)+"\n        ")]),t._v(" "),n("div",{staticClass:"text-grey-darker pt-2 pb-4 px-8 leading-normal"},[t._v("\n            "+t._s(t.user.bio)+"\n        ")]),t._v(" "),n("div",{staticClass:"text-grey-darker pt-8 self-start px-8 bg-grey-lighter w-full pb-8"},[n("div",[t._v("\n                Belongs to:\n                "),t._l(t.user.projects,function(e){return n("a",{staticClass:"bg-pink-lighter hover:bg-pink rounded font-medium p-2 mx-2 no-underline text-white",attrs:{href:"/projects/"+e.id}},[t._v("\n                    "+t._s(e.name)+"\n                ")])}),t._v(" "),t._l(t.user.teams,function(e){return n("a",{staticClass:"bg-pink-lighter hover:bg-pink rounded font-medium p-2 mx-2 no-underline text-white",attrs:{href:"/teams/"+e.id}},[t._v("\n                    "+t._s(e.name)+"\n                ")])})],2)])])])},staticRenderFns:[]}},QI7J:function(t,e,n){var s=n("VU/8")(n("IFl9"),n("3IKD"),!1,null,null,null);t.exports=s.exports},UeMd:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});n("WRGp");var s=n("pQE+"),r=n.n(s),i=n("0Zgn"),o=n.n(i),a=n("Wfqs"),c=n.n(a);new Vue({el:"#app",components:{navbar:r.a,profile:o.a,notificationPopup:c.a}})},"VU/8":function(t,e){t.exports=function(t,e,n,s,r,i){var o,a=t=t||{},c=typeof t.default;"object"!==c&&"function"!==c||(o=t,a=t.default);var l,u="function"==typeof a?a.options:a;if(e&&(u.render=e.render,u.staticRenderFns=e.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),r&&(u._scopeId=r),i?(l=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),s&&s.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(i)},u._ssrRegister=l):s&&(l=s),l){var d=u.functional,h=d?u.render:u.beforeCreate;d?(u._injectStyles=l,u.render=function(t,e){return l.call(e),h(t,e)}):u.beforeCreate=h?[].concat(h,l):[l]}return{esModule:o,exports:a,options:u}}},WRGp:function(t,e,n){"use strict";var s=n("iuzX"),r=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.luxon=n("H9QG"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new r.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(t){return t?(t=t.toString(),window.location.protocol+"//"+window.location.host+"/"+t):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.EventBus=new Vue},Wfqs:function(t,e,n){var s=n("VU/8")(n("aWzK"),n("ZU4r"),!1,null,null,null);t.exports=s.exports},YGfU:function(t,e,n){var s=n("VU/8")(n("eOps"),n("22c5"),!1,null,null,null);t.exports=s.exports},YIHl:function(t,e,n){var s=n("VU/8")(n("wbWS"),n("NJT3"),!1,null,null,null);t.exports=s.exports},ZU4r:function(t,e){t.exports={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"fixed pin-t bg-white text-lg rounded container mx-auto md:w-1/2 mt-16 py-6 px-8 shadow-lg",class:[this.notificationShown?"":"hidden","success"===this.messageType?"text-teal-light":"text-red"],staticStyle:{left:"0",right:"0","max-width":"640px"}},[this._v("\n    "+this._s(this.message)+" \n    "),e("div",{staticClass:"inline",on:{click:this.closeNotification}},[e("i",{staticClass:"fas fa-times float-right cursor-pointer"})])])},staticRenderFns:[]}},aWzK:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{notificationShown:!1,message:"",messageType:""}},methods:{closeNotification:function(){this.notificationShown=!1},showNotification:function(t,e){var n=this;this.message=t,this.messageType=e,this.notificationShown=!0,setTimeout(function(){n.closeNotification()},3e3)}},created:function(){EventBus.$on("notification",this.showNotification)},beforeDestroy:function(){EventBus.$off("notification",this.showNotification)}}},dBZW:function(t,e,n){var s=n("VU/8")(n("fDZG"),n("fRJX"),!1,null,null,null);t.exports=s.exports},eOps:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:{user:{required:!0,type:Object}},data:function(){return{email:"",currentPassword:"",newPassword:"",newPasswordConfirmation:"",errorMessage:{email:"",current_password:"",new_password:"",new_password_confirmation:""}}},methods:{update:function(){var t=this,e={};""!==this.email&&(e.email=this.email),""!==this.newPassword&&(e.current_password=this.currentPassword,e.new_password=this.newPassword,e.new_password_confirmation=this.newPasswordConfirmation),axios.put("/users/"+this.user.username+"/account",e).then(function(e){EventBus.$emit("notification",e.data.message,e.data.status),t.email="",t.currentPassword="",t.newPassword="",t.newPasswordConfirmation=""}).catch(function(e){for(var n in e.response.data.errors)e.response.data.errors.hasOwnProperty(n)&&t.$set(t.errorMessage,n,e.response.data.errors[n][0]);setTimeout(function(){t.errorMessage={email:"",current_password:"",new_password:"",new_password_confirmation:""}},2e3)})}}}},fDZG:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,avatar:"",profileUrl:navbar.navUrl.site+"/users/"+navbar.user.username,profileDropdownShown:!1}},methods:{logoutUser:function(t){t.preventDefault(),document.getElementById("logout-form").submit()},toggleProfileDropdown:function(t){this.profileDropdownShown?(this.hideProfileDropdown(t),document.body.removeEventListener("keyup",this.hideProfileDropdown)):(this.showProfileDropdown(),document.body.addEventListener("keyup",this.hideProfileDropdown))},showProfileDropdown:function(t){this.notificationShown&&(this.notificationShown=!1),this.profileDropdownShown=!0},hideProfileDropdown:function(t){if("keyup"===t.type&&"Escape"!==t.key)return!1;this.profileDropdownShown=!1}}}},fN9P:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"px-4 self-center"},[n("div",{staticClass:"text-teal-light text-base no-underline cursor-pointer",attrs:{id:"notification"},on:{click:t.toggleNotification}},[n("i",{staticClass:"far fa-bell font-bold text-xl",attrs:{"aria-hidden":"true"}}),t._v(" "),t.unreadNotification?n("i",{staticClass:"fa fa-circle text-red-light text-sm absolute pin-t mt-3 ml-3",attrs:{"aria-hidden":"true"}}):t._e()]),t._v(" "),t.notificationShown?n("div",{staticClass:"absolute bg-white w-64 mt-5 mr-8 py-4 shadow-lg rounded z-50",staticStyle:{right:"5%"}},[n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:t.generateUrl(t.user.avatar)}}),t._v(" "),t._m(0)]),t._v(" "),n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:t.generateUrl(t.user.avatar)}}),t._v(" "),t._m(1)]),t._v(" "),n("span",{staticClass:"block border-t"}),t._v(" "),n("a",{staticClass:"list-reset px-4 pt-2 text-blue-light text-center no-underline block",attrs:{href:"/notifications"}},[t._v("\n            View All\n        ")])]):t._e()])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),e("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),e("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])}]}},fRJX:function(t,e){t.exports={render:function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"px-4 border-l flex items-center cursor-pointer p-4"},[n("div",{staticClass:"flex flex-row items-center",attrs:{id:"profile-dropdown"},on:{click:t.toggleProfileDropdown}},[n("img",{staticClass:"w-10 h-10 rounded-full md:mr-2",attrs:{src:t.generateUrl(t.user.avatar)}}),t._v(" "),n("span",{staticClass:"text-grey-darker text-base no-underline hidden md:block"},[t._v("\n      "+t._s(t.user.name)+"\n      "),n("i",{staticClass:"fa fa-angle-down",attrs:{"aria-hidden":"true"}})])]),t._v(" "),t.profileDropdownShown?n("div",{staticClass:"absolute bg-white w-48 pin-r mr-2 py-1 shadow-lg rounded z-50",staticStyle:{top:"3.5rem"},attrs:{id:"profile-menu"}},[n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white no-underline text-grey-dark block font-medium",attrs:{href:t.profileUrl}},[t._m(0),t._v("\n          Your profile\n    ")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),n("span",{staticClass:"block border-t"}),t._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:t.url.logout},on:{click:t.logoutUser}},[t._m(3),t._v("\n      Logout\n    ")])]):t._e(),t._v(" "),n("form",{staticStyle:{display:"none"},attrs:{id:"logout-form",action:t.url.logout,method:"POST"}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:t.token}})])])},staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fa fa-user"})])},function(){var t=this.$createElement,e=this._self._c||t;return e("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"/admin"}},[e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fas fa-shield-alt font-regular"})]),this._v("\n      Admin\n    ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"#"}},[e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fa fa-cog font-regular"})]),this._v("\n      Settings\n    ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("span",{staticClass:"w-6 inline-block"},[e("i",{staticClass:"pr-1 fas fa-sign-out-alt font-regular"})])}]}},gaqh:function(t,e){t.exports={render:function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("form",{attrs:{method:"post",enctype:"multipart/form-data"}},[e("input",{staticClass:"hidden",attrs:{type:"file",name:"avatar",id:"avatar",accept:"image/*"},on:{change:this.selectFile}}),this._v(" "),e("button",{staticClass:"bg-transparent text-grey-darker hover:text-teal py-2 px-4 border border-grey-light hover:border-teal rounded",attrs:{onclick:"document.getElementById('avatar').click(); return false;"}},[this._v("Change Your Avatar")])])])},staticRenderFns:[]}},iuzX:function(t,e){!function(){function t(t){this.value=t}function e(e){var n,s;function r(n,s){try{var o=e[n](s),a=o.value;a instanceof t?Promise.resolve(a.value).then(function(t){r("next",t)},function(t){r("throw",t)}):i(o.done?"return":"normal",o.value)}catch(t){i("throw",t)}}function i(t,e){switch(t){case"return":n.resolve({value:e,done:!0});break;case"throw":n.reject(e);break;default:n.resolve({value:e,done:!1})}(n=n.next)?r(n.key,n.arg):s=null}this._invoke=function(t,e){return new Promise(function(i,o){var a={key:t,arg:e,resolve:i,reject:o,next:null};s?s=s.next=a:(n=s=a,r(t,e))})},"function"!=typeof e.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(e.prototype[Symbol.asyncIterator]=function(){return this}),e.prototype.next=function(t){return this._invoke("next",t)},e.prototype.throw=function(t){return this._invoke("throw",t)},e.prototype.return=function(t){return this._invoke("return",t)}}();var n=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},s=function(){function t(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}return function(e,n,s){return n&&t(e.prototype,n),s&&t(e,s),e}}(),r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(t[s]=n[s])}return t},i=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)},o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e},a=function(){function t(e){n(this,t),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(e),this.connect()}return s(t,[{key:"setOptions",value:function(t){return this.options=r(this._defaultOptions,t),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),t}},{key:"csrfToken",value:function(){var t=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(t=document.querySelector('meta[name="csrf-token"]'))?t.getAttribute("content"):null}}]),t}(),c=function(){function t(){n(this,t)}return s(t,[{key:"notification",value:function(t){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",t)}},{key:"listenForWhisper",value:function(t,e){return this.listen(".client-"+t,e)}}]),t}(),l=function(){function t(e){n(this,t),this.setNamespace(e)}return s(t,[{key:"format",value:function(t){return"."===t.charAt(0)||"\\"===t.charAt(0)?t.substr(1):(this.namespace&&(t=this.namespace+"."+t),t.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(t){this.namespace=t}}]),t}(),u=function(t){function e(t,s,r){n(this,e);var i=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return i.name=s,i.pusher=t,i.options=r,i.eventFormatter=new l(i.options.namespace),i.subscribe(),i}return i(e,c),s(e,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"stopListening",value:function(t){return this.subscription.unbind(this.eventFormatter.format(t)),this}},{key:"on",value:function(t,e){return this.subscription.bind(t,e),this}}]),e}(),d=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,u),s(e,[{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),h=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,u),s(e,[{key:"here",value:function(t){return this.on("pusher:subscription_succeeded",function(e){t(Object.keys(e.members).map(function(t){return e.members[t]}))}),this}},{key:"joining",value:function(t){return this.on("pusher:member_added",function(e){t(e.info)}),this}},{key:"leaving",value:function(t){return this.on("pusher:member_removed",function(e){t(e.info)}),this}},{key:"whisper",value:function(t,e){return this.pusher.channels.channels[this.name].trigger("client-"+t,e),this}}]),e}(),f=function(t){function e(t,s,r){n(this,e);var i=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return i.events={},i.name=s,i.socket=t,i.options=r,i.eventFormatter=new l(i.options.namespace),i.subscribe(),i.configureReconnector(),i}return i(e,c),s(e,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(t,e){return this.on(this.eventFormatter.format(t),e),this}},{key:"on",value:function(t,e){var n=this,s=function(t,s){n.name==t&&e(s)};this.socket.on(t,s),this.bind(t,s)}},{key:"configureReconnector",value:function(){var t=this,e=function(){t.subscribe()};this.socket.on("reconnect",e),this.bind("reconnect",e)}},{key:"bind",value:function(t,e){this.events[t]=this.events[t]||[],this.events[t].push(e)}},{key:"unbind",value:function(){var t=this;Object.keys(this.events).forEach(function(e){t.events[e].forEach(function(n){t.socket.removeListener(e,n)}),delete t.events[e]})}}]),e}(),p=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,f),s(e,[{key:"whisper",value:function(t,e){return this.socket.emit("client event",{channel:this.name,event:"client-"+t,data:e}),this}}]),e}(),v=function(t){function e(){return n(this,e),o(this,(e.__proto__||Object.getPrototypeOf(e)).apply(this,arguments))}return i(e,p),s(e,[{key:"here",value:function(t){return this.on("presence:subscribed",function(e){t(e.map(function(t){return t.user_info}))}),this}},{key:"joining",value:function(t){return this.on("presence:joining",function(e){return t(e.user_info)}),this}},{key:"leaving",value:function(t){return this.on("presence:leaving",function(e){return t(e.user_info)}),this}}]),e}(),m=function(t){function e(){var t;n(this,e);for(var s=arguments.length,r=Array(s),i=0;i<s;i++)r[i]=arguments[i];var a=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(r)));return a.channels={},a}return i(e,a),s(e,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new u(this.pusher,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new d(this.pusher,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new h(this.pusher,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t,n){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),e}(),_=function(t){function e(){var t;n(this,e);for(var s=arguments.length,r=Array(s),i=0;i<s;i++)r[i]=arguments[i];var a=o(this,(t=e.__proto__||Object.getPrototypeOf(e)).call.apply(t,[this].concat(r)));return a.channels={},a}return i(e,a),s(e,[{key:"connect",value:function(){var t=this.getSocketIO();return this.socket=t(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(t,e,n){return this.channel(t).listen(e,n)}},{key:"channel",value:function(t){return this.channels[t]||(this.channels[t]=new f(this.socket,t,this.options)),this.channels[t]}},{key:"privateChannel",value:function(t){return this.channels["private-"+t]||(this.channels["private-"+t]=new p(this.socket,"private-"+t,this.options)),this.channels["private-"+t]}},{key:"presenceChannel",value:function(t){return this.channels["presence-"+t]||(this.channels["presence-"+t]=new v(this.socket,"presence-"+t,this.options)),this.channels["presence-"+t]}},{key:"leave",value:function(t){var e=this;[t,"private-"+t,"presence-"+t].forEach(function(t){e.channels[t]&&(e.channels[t].unsubscribe(),delete e.channels[t])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),e}(),w=function(){function t(e){n(this,t),this.options=e,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new m(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new _(this.options))}return s(t,[{key:"registerVueRequestInterceptor",value:function(){var t=this;Vue.http.interceptors.push(function(e,n){t.socketId()&&e.headers.set("X-Socket-ID",t.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var t=this;axios.interceptors.request.use(function(e){return t.socketId()&&(e.headers["X-Socket-Id"]=t.socketId()),e})}},{key:"registerjQueryAjaxSetup",value:function(){var t=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(e){t.socketId()&&e.setRequestHeader("X-Socket-Id",t.socketId())}})}},{key:"listen",value:function(t,e,n){return this.connector.listen(t,e,n)}},{key:"channel",value:function(t){return this.connector.channel(t)}},{key:"private",value:function(t){return this.connector.privateChannel(t)}},{key:"join",value:function(t){return this.connector.presenceChannel(t)}},{key:"leave",value:function(t){this.connector.leave(t)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),t}();t.exports=w},nkvb:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={props:["user"],methods:{selectFile:function(t){var e=this;if(t.target.files.length){var n=t.target.files[0],s=new FileReader;s.readAsDataURL(n),s.onload=function(t){e.$emit("image-loaded",t.target.result)},this.uploadImage(n)}},uploadImage:function(t){var e=new FormData;e.append("avatar",t),axios.post("/users/"+this.user.username+"/avatar",e).then(function(t){}).catch(function(t){})}}}},"pQE+":function(t,e,n){var s=n("VU/8")(n("qjuG"),n("BDRz"),!1,null,null,null);t.exports=s.exports},qjuG:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=n("8tCw"),r=n.n(s),i=n("dBZW"),o=n.n(i);e.default={components:{notificationDropdown:r.a,profileDropdown:o.a},data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl}}}},wbWS:function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var s=n("H9QG");n.n(s);e.default={name:"other",props:["user"],computed:{userLocalTime:function(){return s.DateTime.local().setZone(this.user.timezone).toLocaleString(s.DateTime.TIME_SIMPLE)}}}}},[6]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,