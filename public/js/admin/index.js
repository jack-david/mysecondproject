webpackJsonp([3],{"/+wo":function(e,t,n){var s=n("VU/8")(n("sAqP"),n("uQIB"),!1,null,null,null);e.exports=s.exports},"1yv/":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["formShown","roleId"],data:function(){return{permissions:[],permission_id:null}},mounted:function(){var e=this;axios.get("admin/permissions").then(function(t){e.permissions=t.data.permissions}).catch(function(e){console.log(e.response.data.message)})},methods:{closeForm:function(){this.$emit("close")},assignPermission:function(){var e=this;axios.post("/admin/roles/"+this.roleId+"/permissions",{permission_id:this.permission_id}).then(function(t){e.permission_id=null,e.$emit("permission-assigned",t.data.permission)}).catch(function(e){console.log(e.message)})}}}},"3vL4":function(e,t,n){var s=n("VU/8")(n("SFZo"),n("M/V+"),!1,null,null,null);e.exports=s.exports},7:function(e,t,n){e.exports=n("lLZ8")},"7EUu":function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,notificationShown:!1,unreadNotification:!1}},methods:{toggleNotification:function(e){this.notificationShown?(document.body.removeEventListener("keyup",this.hideNotification),this.hideNotification(e)):(document.body.addEventListener("keyup",this.hideNotification),this.showNotification())},showNotification:function(e){this.profileDropdownShown&&(this.profileDropdownShown=!1),this.notificationShown=!0},hideNotification:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.notificationShown=!1}}}},"8tCw":function(e,t,n){var s=n("VU/8")(n("7EUu"),n("sCng"),!1,null,null,null);e.exports=s.exports},Aazl:function(e,t,n){var s=n("VU/8")(n("Atvs"),n("Xroo"),!1,null,null,null);e.exports=s.exports},Atvs:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:{activeTab:{required:!0,type:String}},data:function(){return{loading:!1,showUpdateModal:!1,version:0,lastUpdated:"",message:""}},created:function(){this.version=document.querySelector('meta[name="app-version"]').content,this.lastUpdated=document.querySelector('meta[name="last-updated"]').content},methods:{checkForUpdates:function(){var e=this;this.loading=!0,axios.get("/admin/check-for-update").then(function(t){e.loading=!1,e.message=t.data.message,e.showUpdateModal=!0}).catch(function(t){e.loading=!1,e.message=t.response.data.message,e.showUpdateModal=!0})},closeUpdateModal:function(){this.loading=!1,this.showUpdateModal=!1},updateSoftware:function(){var e=this;this.loading=!0,axios.get("/admin/update-software").then(function(t){e.loading=!1,e.message=t.data.message,e.showUpdateModal=!1}).catch(function(t){e.loading=!1,e.message=t.response.data.message,e.showUpdateModal=!1})}}}},BDRz:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("nav",{staticClass:"bg-white flex flex-row justify-between h-12 pl-4 md:px-4 shadow"},[t("a",{staticClass:"text-teal text-2xl no-underline self-center",attrs:{href:this.url.site}},[this._v("\n      GOODWORK\n  ")]),this._v(" "),t("div",{staticClass:"md:flex"},[t("div",{staticClass:"flex flex-row border-l h-full"},[t("notification-dropdown"),this._v(" "),t("profile-dropdown")],1)])])},staticRenderFns:[]}},BU7v:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{showInviteMemberForm:!1,name:"",email:""}},methods:{openModal:function(){this.showInviteMemberForm=!0},closeModal:function(){this.showInviteMemberForm=!1},sendInvitation:function(){var e=this;axios.post("/register/invite",{name:this.name,email:this.email}).then(function(t){"success"==t.data.status&&(EventBus.$emit("notification",t.data.message,t.data.status),e.name="",e.email="",e.showInviteMemberForm=!1)}).catch(function(t){EventBus.$emit("notification",t.response.data.message,t.response.data.status),e.name="",e.email="",e.showInviteMemberForm=!1})}}}},C3H6:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("Aazl"),i=n.n(s),o=n("komk"),r=n.n(o),a=n("3vL4"),l=n.n(a);t.default={components:{aboutBoard:i.a,authBoard:r.a,usersBoard:l.a},props:{users:{required:!0,type:Array}},data:function(){return{active:"users"}},methods:{activateThisTab:function(e){e!=this.active&&(this.active=e)}}}},DK0p:function(e,t,n){var s=n("VU/8")(n("JIAB"),n("hvjl"),!1,null,null,null);e.exports=s.exports},EYNr:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"absolute container mx-auto w-5/6 md:w-3/5 lg:w-2/5 bg-white rounded shadow-lg z-10",class:{hidden:!e.formShown},staticStyle:{top:"20vh",left:"0",right:"0"}},[n("div",{staticClass:"p-4"},[n("div",{staticClass:"p-4"},[n("label",{staticClass:"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2",attrs:{for:"grid-first-name"}},[e._v("\n                  Roles\n              ")]),e._v(" "),n("div",{staticClass:"flex flex-row items-center"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.roleId,expression:"roleId"}],staticClass:"w-5/6 block appearance-none w-full bg-grey-lighter border border-grey-lighter text-grey-darker py-3 px-4 pr-8 rounded",attrs:{id:"user"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.roleId=t.target.multiple?n:n[0]}}},[n("option",{attrs:{selected:"",disabled:"",hidden:""}},[e._v("Select Permission to Add to Role")]),e._v(" "),e._l(e.roles,function(t){return[n("option",{staticClass:"my-2 text-lg",domProps:{value:t.id}},[e._v(e._s(t.name))])]})],2),e._v(" "),n("i",{staticClass:"w-1/6 fa fa-chevron-down pointer-events-none flex items-center text-grey-darker -ml-8"})])])]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between py-4 px-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeForm}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-4 px-8 rounded",on:{click:e.attachPermission}},[e._v("Attach")])])]),e._v(" "),n("div",{staticClass:"h-screen w-screen fixed pin bg-grey-darkest opacity-25",class:{hidden:!e.formShown},on:{click:e.closeForm}})])},staticRenderFns:[]}},I6uN:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"absolute container mx-auto w-5/6 md:w-3/5 lg:w-2/5 bg-white rounded shadow-lg z-10",class:{hidden:!e.formShown},staticStyle:{top:"12vh",left:"0",right:"0"}},[n("div",{staticClass:"p-4"},[n("div",{staticClass:"p-4"},[e._m(0),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"appearance-none block w-full bg-grey-lighter text-grey-darker border border-grey-lighter rounded py-3 px-4",attrs:{id:"grid-last-name",type:"text",placeholder:"New Role",required:""},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}})])]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between py-4 px-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeForm}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-4 px-8 rounded",on:{click:e.createRole}},[e._v("Create")])])]),e._v(" "),n("div",{staticClass:"h-screen w-screen fixed pin bg-grey-darkest opacity-25",class:{hidden:!e.formShown},on:{click:e.closeForm}})])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("label",{staticClass:"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2",attrs:{for:"grid-first-name"}},[this._v("\n                  Name "),t("span",{staticClass:"text-grey capitalize"},[this._v("(required)")])])}]}},JIAB:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("ulRP"),i=n.n(s),o=n("wlaG"),r=n.n(o);t.default={components:{createRoleForm:i.a,assignPermissionForm:r.a},props:{activeColumn:{required:!0,type:String}},data:function(){return{roles:[],createRoleFormShown:!1,assignPermissionFormShown:!1,roleId:0}},beforeUpdate:function(){var e=this;this.roles.length<1&&axios.get("/admin/roles").then(function(t){e.roles=t.data.roles}).catch(function(e){console.log(e)})},methods:{showCreateRoleForm:function(){this.createRoleFormShown=!0},closeCreateRoleForm:function(){this.createRoleFormShown=!1},newRoleCreated:function(e){this.roles.push(e),this.createRoleFormShown=!1},deleteRole:function(e,t){var n=this;axios.delete("/admin/roles/"+e).then(function(e){n.roles.splice(t,1)}).catch(function(e){console.log(e.response.data.message)})},showAssignPermissionForm:function(e){this.roleId=e,this.assignPermissionFormShown=!0},closeAssignPermissionForm:function(){this.assignPermissionFormShown=!1},permissionAssigned:function(e){var t=this;this.roles.filter(function(e){return e.id===t.roleId})[0].permissions.some(function(t){return t.id===e.id})||this.roles.filter(function(e){return e.id===t.roleId})[0].permissions.push(e),this.assignPermissionFormShown=!1},revokePermission:function(e,t,n){var s=this;axios.delete("/admin/roles/"+e+"/permissions",{permission_id:t}).then(function(t){s.roles.filter(function(t){return t.id===e})[0].permissions.splice(n,1)}).catch(function(e){console.log(e.response.data.message)})}}}},KpP3:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"container md:mx-auto md:px-4 md:my-6 w-full md:w-md lg:w-lg xl:w-xl xxl:w-2xl border-t md:border-0"},[n("div",{staticClass:"flex flex-row justify-between md:justify-around md:my-6 py-2 md:py-4 bg-white shadow md:rounded text-grey"},[n("div",{class:["users"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-2 md:pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("users")}}},[n("i",{staticClass:"fas fa-users text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v("Users")])]),e._v(" "),n("div",{class:["auth"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-2 md:pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("auth")}}},[n("i",{staticClass:"fas fa-lock-open text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v("Roles & Permissions")])]),e._v(" "),n("div",{class:["about"===e.active?"text-teal-dark font-semibold border-teal border-b-2 pb-4 -mb-2 md:-mb-4":"cursor-pointer","text-center w-1/2"],on:{click:function(t){e.activateThisTab("about")}}},[n("i",{staticClass:"fas fa-info-circle text-xl md:text-2xl"}),e._v(" "),n("span",{staticClass:"block text-xs font-regular pt-2"},[e._v("About")])])]),e._v(" "),n("div",{staticClass:"flex flex-row flex-wrap justify-start mt-4"},[n("usersBoard",{attrs:{users:e.users,activeTab:e.active}}),e._v(" "),n("authBoard",{attrs:{users:e.users,activeTab:e.active}}),e._v(" "),n("aboutBoard",{attrs:{activeTab:e.active}})],1)])},staticRenderFns:[]}},LU2D:function(e,t,n){var s=n("VU/8")(n("C3H6"),n("KpP3"),!1,null,null,null);e.exports=s.exports},"M/V+":function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full",class:{hidden:"users"!=e.activeTab}},[n("invite-modal"),e._v(" "),n("div",{staticClass:"md:bg-white md:rounded md:shadow text-grey-darkest"},[n("div",{staticClass:"text-center text-3xl md:p-4 text-grey-darker"},[e._v("All Users")]),e._v(" "),e._m(0),e._v(" "),e._l(e.users,function(t){return n("div",{staticClass:"flex flex-row items-center text-left m-4 md:m-0 md:p-4 bg-teal-lighter md:bg-white rounded md:rounded-none shadow md:shadow-none relative"},[e._m(1,!0),e._v(" "),n("div",{staticClass:"w-1/4 md:w-1/6 px-2 md:px-0"},[n("img",{staticClass:"w-12 h-12 rounded-full",attrs:{src:e.generateUrl(t.avatar)}})]),e._v(" "),n("div",{staticClass:"w-3/4 md:w-5/6 flex flex-col md:flex-row md:items-center md:px-0 bg-white"},[n("div",{staticClass:"md:w-1/5 text-left text-xl font-semibold text-grey-darker p-2 md:p-0"},[e._v(e._s(t.name))]),e._v(" "),n("div",{staticClass:"md:w-2/5 flex flex-row text-sm p-2 md:px-0 bg-grey-lightest md:bg-white"},[n("div",{staticClass:"w-1/2 text-left"},[e._v("@"+e._s(t.username))]),e._v(" "),n("div",{staticClass:"w-1/2 text-right md:text-left"},[e._v(e._s(t.role))])]),e._v(" "),n("div",{staticClass:"md:w-2/5 flex flex-row text-sm p-2 md:px-0 bg-grey-lightest md:bg-white"},[n("div",{staticClass:"w-1/2"},[e._v(e._s(t.email))]),e._v(" "),n("div",{staticClass:"w-1/2"},[e._v(e._s(t.timezone))])])])])})],2)],1)},staticRenderFns:[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"hidden md:flex flex-row text-left bg-grey-lighter text-grey-dark p-4"},[n("div",{staticClass:"w-1/6"},[e._v("Avatar")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Name")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Username")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Role")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Email")]),e._v(" "),n("div",{staticClass:"w-1/6"},[e._v("Timezone")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"absolute pin-t pin-r m-2 text-grey-darker h-full md:flex flex-row items-center md:m-0 md:mr-4"},[t("i",{staticClass:"fas fa-ellipsis-h cursor-pointer"})])}]}},Mjfo:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("DK0p"),i=n.n(s),o=n("/+wo"),r=n.n(o);t.default={components:{rolesBoard:i.a,permissionsBoard:r.a},props:{activeTab:{required:!0,type:String}},data:function(){return{activeColumn:""}},beforeUpdate:function(){""===this.activeColumn&&(this.activeColumn="roles")},methods:{activateThisColumn:function(e){e!=this.active&&(this.activeColumn=e)}}}},SFZo:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("dpfw"),i=n.n(s);t.default={props:{activeTab:{required:!0,type:String},users:{required:!0,type:Array}},components:{inviteModal:i.a}}},"VU/8":function(e,t){e.exports=function(e,t,n,s,i,o){var r,a=e=e||{},l=typeof e.default;"object"!==l&&"function"!==l||(r=e,a=e.default);var c,u="function"==typeof a?a.options:a;if(t&&(u.render=t.render,u.staticRenderFns=t.staticRenderFns,u._compiled=!0),n&&(u.functional=!0),i&&(u._scopeId=i),o?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(o)},u._ssrRegister=c):s&&(c=s),c){var d=u.functional,h=d?u.render:u.beforeCreate;d?(u._injectStyles=c,u.render=function(e,t){return c.call(t),h(e,t)}):u.beforeCreate=h?[].concat(h,c):[c]}return{esModule:r,exports:a,options:u}}},WRGp:function(e,t,n){"use strict";var s=n("iuzX"),i=n.n(s);window.Vue=n("I3G/"),window.axios=n("mtWM"),window.axios.defaults.headers.common={"X-CSRF-TOKEN":window.Laravel.csrfToken,"X-Requested-With":"XMLHttpRequest"},"undefined"!=typeof io&&(window.Echo=new i.a({broadcaster:"socket.io",host:window.location.hostname+":6001"})),window.Vue.mixin({methods:{generateUrl:function(e){return e?(e=e.toString(),window.location.protocol+"//"+window.location.host+"/"+e):"http://"+window.location.host+"/image/avatar.jpg"}}}),window.EventBus=new Vue},Wfqs:function(e,t,n){var s=n("VU/8")(n("aWzK"),n("ZU4r"),!1,null,null,null);e.exports=s.exports},Xroo:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mb-8",class:{hidden:"about"!=e.activeTab}},[n("div",{class:{hidden:!e.showUpdateModal}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey",on:{click:e.closeUpdateModal}}),e._v(" "),n("div",{staticClass:"fixed pin-x w-1/3 z-10 bg-grey-lighter mx-auto p-8 rounded"},[n("p",{staticClass:"py-2"},[e._v("\n            "+e._s(e.message)+"\n          ")]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light hover:border-red-light border-red-lighter border px-4 py-3 rounded",on:{click:e.closeUpdateModal}},[e._v("Ok")])])])]),e._v(" "),n("div",{staticClass:"container mx-4 md:mx-auto py-8 bg-white rounded shadow text-center text-grey-darker"},[n("div",{staticClass:"pb-4 text-3xl"},[e._v("\n      Goodwork\n    ")]),e._v(" "),n("div",{staticClass:"p-2"},[e._v("\n      Version: "),n("span",{staticClass:"pl-2 text-xl text-grey-darkest"},[e._v(e._s(e.version))]),e._v(" "),n("button",{staticClass:"no-underline p-4 m-4 mb-0 bg-white text-base text-teal rounded border border-grey-light",on:{click:e.checkForUpdates}},[e._v("\n        Check for Updates\n        "),e.loading?n("div",{staticClass:"inline"},[n("i",{staticClass:"fas fa-spinner fa-spin"})]):e._e()])]),e._v(" "),n("div",{staticClass:"p-2"},[e._v("\n      Last Updated: "),n("span",{staticClass:"pl-2 text-xl text-grey-darkest"},[e._v(e._s(e.lastUpdated))])]),e._v(" "),e._m(0),e._v(" "),e._m(1),e._v(" "),n("div",{staticClass:"pt-8"},[e._v("\n      © "+e._s((new Date).getFullYear())+" "),n("a",{staticClass:"text-xl text-blue-light no-underline",attrs:{href:"https://github.com/iluminar/"}},[e._v("Iluminar")])])])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"p-2"},[this._v("\n      Author: "),t("a",{staticClass:"pl-2 text-xl text-blue-light no-underline",attrs:{href:"https://hasnayeen.github.io/"}},[this._v("Nehal Hasnayeen")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"p-2"},[this._v("\n      Submit issue & feedback at: "),t("a",{staticClass:"pl-2 text-xl text-blue-light no-underline",attrs:{href:"https://github.com/iluminar/goodwork/issues"}},[this._v("Goodwork Issues")])])}]}},ZU4r:function(e,t){e.exports={render:function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"fixed pin-t bg-white text-lg rounded container mx-auto md:w-1/2 mt-16 py-6 px-8 shadow-lg",class:[this.notificationShown?"":"hidden","success"===this.messageType?"text-teal-light":"text-red"],staticStyle:{left:"0",right:"0","max-width":"640px"}},[this._v("\n    "+this._s(this.message)+" \n    "),t("div",{staticClass:"inline",on:{click:this.closeNotification}},[t("i",{staticClass:"fas fa-times float-right cursor-pointer"})])])},staticRenderFns:[]}},aWzK:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{notificationShown:!1,message:"",messageType:""}},methods:{closeNotification:function(){this.notificationShown=!1},showNotification:function(e,t){var n=this;this.message=e,this.messageType=t,this.notificationShown=!0,setTimeout(function(){n.closeNotification()},3e3)}},created:function(){EventBus.$on("notification",this.showNotification)},beforeDestroy:function(){EventBus.$off("notification",this.showNotification)}}},dBZW:function(e,t,n){var s=n("VU/8")(n("fDZG"),n("kz33"),!1,null,null,null);e.exports=s.exports},dh5Q:function(e,t,n){var s=n("VU/8")(n("i5Iv"),n("EYNr"),!1,null,null,null);e.exports=s.exports},dpfw:function(e,t,n){var s=n("VU/8")(n("BU7v"),n("m31y"),!1,null,null,null);e.exports=s.exports},fDZG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl,avatar:"",profileUrl:navbar.navUrl.site+"/users/"+navbar.user.username,profileDropdownShown:!1}},methods:{logoutUser:function(e){e.preventDefault(),document.getElementById("logout-form").submit()},toggleProfileDropdown:function(e){this.profileDropdownShown?(this.hideProfileDropdown(e),document.body.removeEventListener("keyup",this.hideProfileDropdown)):(this.showProfileDropdown(),document.body.addEventListener("keyup",this.hideProfileDropdown))},showProfileDropdown:function(e){this.notificationShown&&(this.notificationShown=!1),this.profileDropdownShown=!0},hideProfileDropdown:function(e){if("keyup"===e.type&&"Escape"!==e.key)return!1;this.profileDropdownShown=!1}}}},hvjl:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white rounded-b",class:{hidden:"roles"!==e.activeColumn}},[n("create-role-form",{attrs:{"form-shown":e.createRoleFormShown},on:{close:e.closeCreateRoleForm,"role-created":e.newRoleCreated}}),e._v(" "),n("assign-permission-form",{attrs:{roleId:e.roleId,"form-shown":e.assignPermissionFormShown},on:{close:e.closeAssignPermissionForm,"permission-assigned":e.permissionAssigned}}),e._v(" "),n("div",{staticClass:"mx-4 text-center"},[n("button",{staticClass:"no-underline p-3 m-8 -mb-4 text-white text-base bg-teal-light rounded shadow-xl",on:{click:e.showCreateRoleForm}},[e._v("Add New Role")])]),e._v(" "),n("div",{staticClass:"px-6 py-8 flex flex-row flex-wrap justify-center text-grey-darker"},e._l(e.roles,function(t,s){return n("div",{staticClass:"bg-white shadow-xl w-80 my-4 md:m-6 rounded-lg"},[n("div",{staticClass:"p-4 text-xl uppercase text-indigo bg-grey-lighter rounded-t-lg flex flex-row"},[e._v("\n        "+e._s(t.name)+"\n          "),n("div",{on:{click:function(n){e.deleteRole(t.id,s)}}},[t.deletable?n("i",{staticClass:"ml-1 pl-1 fas fa-trash-alt cursor-pointer text-base"}):e._e()])]),e._v(" "),n("div",{staticClass:"px-4 pb-2 bg-grey-lighter text-sm flex flex-row"},[n("span",[e._v("\n          Permissions\n        ")]),e._v(" "),n("div",{on:{click:function(n){e.showAssignPermissionForm(t.id)}}},[n("i",{staticClass:"ml-2 fas fa-plus-circle text-indigo cursor-pointer"})])]),e._v(" "),t.permissions.length>0?n("div",{staticClass:"flex flex-row flex-wrap m-2"},e._l(t.permissions,function(s,i){return n("div",{staticClass:"py-1 px-2 m-2 rounded-full font-medium bg-pink text-white text-sm flex flex-row items-center"},[e._v("\n          "+e._s(s.name)+" \n          "),n("div",{on:{click:function(n){e.revokePermission(t.id,s.id,i)}}},[n("i",{staticClass:"ml-1 pl-1 fas fa-trash-alt cursor-pointer"})])])})):n("div",{staticClass:"py-1 px-2 m-2 font-medium text-grey-darker"},[e._v("\n        Don't have any permission yet\n      ")])])}))],1)},staticRenderFns:[]}},i5Iv:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["formShown","permissionId"],data:function(){return{roles:[],roleId:null}},mounted:function(){var e=this;axios.get("admin/roles").then(function(t){e.roles=t.data.roles}).catch(function(e){console.log(e.response.data.message)})},methods:{closeForm:function(){this.$emit("close")},attachPermission:function(){var e=this;axios.post("/admin/roles/"+this.roleId+"/permissions",{permission_id:this.permissionId}).then(function(t){e.roleId=null,e.$emit("permission-attached",t.data.role)}).catch(function(e){console.log(e.message)})}}}},iuzX:function(e,t){!function(){function e(e){this.value=e}function t(t){var n,s;function i(n,s){try{var r=t[n](s),a=r.value;a instanceof e?Promise.resolve(a.value).then(function(e){i("next",e)},function(e){i("throw",e)}):o(r.done?"return":"normal",r.value)}catch(e){o("throw",e)}}function o(e,t){switch(e){case"return":n.resolve({value:t,done:!0});break;case"throw":n.reject(t);break;default:n.resolve({value:t,done:!1})}(n=n.next)?i(n.key,n.arg):s=null}this._invoke=function(e,t){return new Promise(function(o,r){var a={key:e,arg:t,resolve:o,reject:r,next:null};s?s=s.next=a:(n=s=a,i(e,t))})},"function"!=typeof t.return&&(this.return=void 0)}"function"==typeof Symbol&&Symbol.asyncIterator&&(t.prototype[Symbol.asyncIterator]=function(){return this}),t.prototype.next=function(e){return this._invoke("next",e)},t.prototype.throw=function(e){return this._invoke("throw",e)},t.prototype.return=function(e){return this._invoke("return",e)}}();var n=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var s=t[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,n,s){return n&&e(t.prototype,n),s&&e(t,s),t}}(),i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},o=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},a=function(){function e(t){n(this,e),this._defaultOptions={auth:{headers:{}},authEndpoint:"/broadcasting/auth",broadcaster:"pusher",csrfToken:null,host:null,key:null,namespace:"App.Events"},this.setOptions(t),this.connect()}return s(e,[{key:"setOptions",value:function(e){return this.options=i(this._defaultOptions,e),this.csrfToken()&&(this.options.auth.headers["X-CSRF-TOKEN"]=this.csrfToken()),e}},{key:"csrfToken",value:function(){var e=void 0;return"undefined"!=typeof window&&window.Laravel&&window.Laravel.csrfToken?window.Laravel.csrfToken:this.options.csrfToken?this.options.csrfToken:"undefined"!=typeof document&&(e=document.querySelector('meta[name="csrf-token"]'))?e.getAttribute("content"):null}}]),e}(),l=function(){function e(){n(this,e)}return s(e,[{key:"notification",value:function(e){return this.listen(".Illuminate\\Notifications\\Events\\BroadcastNotificationCreated",e)}},{key:"listenForWhisper",value:function(e,t){return this.listen(".client-"+e,t)}}]),e}(),c=function(){function e(t){n(this,e),this.setNamespace(t)}return s(e,[{key:"format",value:function(e){return"."===e.charAt(0)||"\\"===e.charAt(0)?e.substr(1):(this.namespace&&(e=this.namespace+"."+e),e.replace(/\./g,"\\"))}},{key:"setNamespace",value:function(e){this.namespace=e}}]),e}(),u=function(e){function t(e,s,i){n(this,t);var o=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o.name=s,o.pusher=e,o.options=i,o.eventFormatter=new c(o.options.namespace),o.subscribe(),o}return o(t,l),s(t,[{key:"subscribe",value:function(){this.subscription=this.pusher.subscribe(this.name)}},{key:"unsubscribe",value:function(){this.pusher.unsubscribe(this.name)}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"stopListening",value:function(e){return this.subscription.unbind(this.eventFormatter.format(e)),this}},{key:"on",value:function(e,t){return this.subscription.bind(e,t),this}}]),t}(),d=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,u),s(t,[{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),h=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,u),s(t,[{key:"here",value:function(e){return this.on("pusher:subscription_succeeded",function(t){e(Object.keys(t.members).map(function(e){return t.members[e]}))}),this}},{key:"joining",value:function(e){return this.on("pusher:member_added",function(t){e(t.info)}),this}},{key:"leaving",value:function(e){return this.on("pusher:member_removed",function(t){e(t.info)}),this}},{key:"whisper",value:function(e,t){return this.pusher.channels.channels[this.name].trigger("client-"+e,t),this}}]),t}(),f=function(e){function t(e,s,i){n(this,t);var o=r(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return o.events={},o.name=s,o.socket=e,o.options=i,o.eventFormatter=new c(o.options.namespace),o.subscribe(),o.configureReconnector(),o}return o(t,l),s(t,[{key:"subscribe",value:function(){this.socket.emit("subscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"unsubscribe",value:function(){this.unbind(),this.socket.emit("unsubscribe",{channel:this.name,auth:this.options.auth||{}})}},{key:"listen",value:function(e,t){return this.on(this.eventFormatter.format(e),t),this}},{key:"on",value:function(e,t){var n=this,s=function(e,s){n.name==e&&t(s)};this.socket.on(e,s),this.bind(e,s)}},{key:"configureReconnector",value:function(){var e=this,t=function(){e.subscribe()};this.socket.on("reconnect",t),this.bind("reconnect",t)}},{key:"bind",value:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)}},{key:"unbind",value:function(){var e=this;Object.keys(this.events).forEach(function(t){e.events[t].forEach(function(n){e.socket.removeListener(t,n)}),delete e.events[t]})}}]),t}(),p=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,f),s(t,[{key:"whisper",value:function(e,t){return this.socket.emit("client event",{channel:this.name,event:"client-"+e,data:t}),this}}]),t}(),v=function(e){function t(){return n(this,t),r(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return o(t,p),s(t,[{key:"here",value:function(e){return this.on("presence:subscribed",function(t){e(t.map(function(e){return e.user_info}))}),this}},{key:"joining",value:function(e){return this.on("presence:joining",function(t){return e(t.user_info)}),this}},{key:"leaving",value:function(e){return this.on("presence:leaving",function(t){return e(t.user_info)}),this}}]),t}(),m=function(e){function t(){var e;n(this,t);for(var s=arguments.length,i=Array(s),o=0;o<s;o++)i[o]=arguments[o];var a=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return a.channels={},a}return o(t,a),s(t,[{key:"connect",value:function(){this.pusher=new Pusher(this.options.key,this.options)}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new u(this.pusher,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new d(this.pusher,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new h(this.pusher,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e,n){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.pusher.connection.socket_id}},{key:"disconnect",value:function(){this.pusher.disconnect()}}]),t}(),g=function(e){function t(){var e;n(this,t);for(var s=arguments.length,i=Array(s),o=0;o<s;o++)i[o]=arguments[o];var a=r(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(i)));return a.channels={},a}return o(t,a),s(t,[{key:"connect",value:function(){var e=this.getSocketIO();return this.socket=e(this.options.host,this.options),this.socket}},{key:"getSocketIO",value:function(){if("undefined"!=typeof io)return io;if("undefined"!==this.options.client)return this.options.client;throw new Error("Socket.io client not found. Should be globally available or passed via options.client")}},{key:"listen",value:function(e,t,n){return this.channel(e).listen(t,n)}},{key:"channel",value:function(e){return this.channels[e]||(this.channels[e]=new f(this.socket,e,this.options)),this.channels[e]}},{key:"privateChannel",value:function(e){return this.channels["private-"+e]||(this.channels["private-"+e]=new p(this.socket,"private-"+e,this.options)),this.channels["private-"+e]}},{key:"presenceChannel",value:function(e){return this.channels["presence-"+e]||(this.channels["presence-"+e]=new v(this.socket,"presence-"+e,this.options)),this.channels["presence-"+e]}},{key:"leave",value:function(e){var t=this;[e,"private-"+e,"presence-"+e].forEach(function(e){t.channels[e]&&(t.channels[e].unsubscribe(),delete t.channels[e])})}},{key:"socketId",value:function(){return this.socket.id}},{key:"disconnect",value:function(){this.socket.disconnect()}}]),t}(),x=function(){function e(t){n(this,e),this.options=t,"function"==typeof Vue&&Vue.http&&this.registerVueRequestInterceptor(),"function"==typeof axios&&this.registerAxiosRequestInterceptor(),"function"==typeof jQuery&&this.registerjQueryAjaxSetup(),"pusher"==this.options.broadcaster?this.connector=new m(this.options):"socket.io"==this.options.broadcaster&&(this.connector=new g(this.options))}return s(e,[{key:"registerVueRequestInterceptor",value:function(){var e=this;Vue.http.interceptors.push(function(t,n){e.socketId()&&t.headers.set("X-Socket-ID",e.socketId()),n()})}},{key:"registerAxiosRequestInterceptor",value:function(){var e=this;axios.interceptors.request.use(function(t){return e.socketId()&&(t.headers["X-Socket-Id"]=e.socketId()),t})}},{key:"registerjQueryAjaxSetup",value:function(){var e=this;void 0!==jQuery.ajax&&jQuery.ajaxSetup({beforeSend:function(t){e.socketId()&&t.setRequestHeader("X-Socket-Id",e.socketId())}})}},{key:"listen",value:function(e,t,n){return this.connector.listen(e,t,n)}},{key:"channel",value:function(e){return this.connector.channel(e)}},{key:"private",value:function(e){return this.connector.privateChannel(e)}},{key:"join",value:function(e){return this.connector.presenceChannel(e)}},{key:"leave",value:function(e){this.connector.leave(e)}},{key:"socketId",value:function(){return this.connector.socketId()}},{key:"disconnect",value:function(){this.connector.disconnect()}}]),e}();e.exports=x},jK9D:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("div",{staticClass:"absolute container mx-auto w-5/6 md:w-3/5 lg:w-2/5 bg-white rounded shadow-lg z-10",class:{hidden:!e.formShown},staticStyle:{top:"20vh",left:"0",right:"0"}},[n("div",{staticClass:"p-4"},[n("div",{staticClass:"p-4"},[n("label",{staticClass:"block uppercase tracking-wide text-grey-darker text-xs font-bold mb-2",attrs:{for:"grid-first-name"}},[e._v("\n                  Permissions\n              ")]),e._v(" "),n("div",{staticClass:"flex flex-row items-center"},[n("select",{directives:[{name:"model",rawName:"v-model",value:e.permission_id,expression:"permission_id"}],staticClass:"w-5/6 block appearance-none w-full bg-grey-lighter border border-grey-lighter text-grey-darker py-3 px-4 pr-8 rounded",attrs:{id:"user"},on:{change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.permission_id=t.target.multiple?n:n[0]}}},[n("option",{attrs:{selected:"",disabled:"",hidden:""}},[e._v("Select Permission to Add to Role")]),e._v(" "),e._l(e.permissions,function(t){return[n("option",{staticClass:"my-2 text-lg",domProps:{value:t.id}},[e._v(e._s(t.name))])]})],2),e._v(" "),n("i",{staticClass:"w-1/6 fa fa-chevron-down pointer-events-none flex items-center text-grey-darker -ml-8"})])])]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between py-4 px-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-lighter hover:font-bold hover:text-red-light",on:{click:e.closeForm}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-4 px-8 rounded",on:{click:e.assignPermission}},[e._v("Assign")])])]),e._v(" "),n("div",{staticClass:"h-screen w-screen fixed pin bg-grey-darkest opacity-25",class:{hidden:!e.formShown},on:{click:e.closeForm}})])},staticRenderFns:[]}},komk:function(e,t,n){var s=n("VU/8")(n("Mjfo"),n("ykhH"),!1,null,null,null);e.exports=s.exports},kz33:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 border-l flex items-center cursor-pointer p-4"},[n("div",{staticClass:"flex flex-row items-center",attrs:{id:"profile-dropdown"},on:{click:e.toggleProfileDropdown}},[n("img",{staticClass:"w-10 h-10 rounded-full md:mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),n("span",{staticClass:"text-grey-darker text-base no-underline hidden md:block"},[e._v("\n      "+e._s(e.user.name)+"\n      "),n("i",{staticClass:"fa fa-angle-down",attrs:{"aria-hidden":"true"}})])]),e._v(" "),e.profileDropdownShown?n("div",{staticClass:"absolute bg-white w-48 pin-r mr-2 py-1 shadow-lg rounded",staticStyle:{top:"3.5rem"},attrs:{id:"profile-menu"}},[n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white no-underline text-grey-dark block font-medium",attrs:{href:e.profileUrl}},[e._m(0),e._v("\n          Your profile\n    ")]),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:e.url.logout},on:{click:e.logoutUser}},[e._m(3),e._v("\n      Logout\n    ")])]):e._e(),e._v(" "),n("form",{staticStyle:{display:"none"},attrs:{id:"logout-form",action:e.url.logout,method:"POST"}},[n("input",{attrs:{type:"hidden",name:"_token"},domProps:{value:e.token}})])])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-user"})])},function(){var e=this.$createElement,t=this._self._c||e;return t("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"/admin"}},[t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-shield-alt font-regular"})]),this._v("\n      Admin\n    ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("a",{staticClass:"px-4 py-2 hover:bg-teal hover:text-white text-grey-dark font-medium no-underline block",attrs:{href:"#"}},[t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fa fa-cog font-regular"})]),this._v("\n      Settings\n    ")])},function(){var e=this.$createElement,t=this._self._c||e;return t("span",{staticClass:"w-6 inline-block"},[t("i",{staticClass:"pr-1 fas fa-sign-out-alt font-regular"})])}]}},lLZ8:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});n("WRGp");var s=n("LU2D"),i=n.n(s),o=n("pQE+"),r=n.n(o),a=n("Wfqs"),l=n.n(a);new Vue({el:"#app",components:{index:i.a,navbar:r.a,notificationPopup:l.a}})},m31y:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"mb-4 text-center"},[n("button",{staticClass:"no-underline p-2 my-4 mb-0 bg-white text-base text-teal rounded shadow",on:{click:e.openModal}},[e._v("Invite New Member")]),e._v(" "),n("div",{class:{hidden:!e.showInviteMemberForm}},[n("div",{staticClass:"absolute pin opacity-75 bg-grey z-10",on:{click:e.closeModal}}),e._v(" "),n("div",{staticClass:"fixed pin-x md:w-1/3 z-10 bg-grey-lighter mx-2 md:mx-auto p-8 rounded"},[n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.name,expression:"name"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"John Doe"},domProps:{value:e.name},on:{input:function(t){t.target.composing||(e.name=t.target.value)}}})]),e._v(" "),n("p",{staticClass:"py-2"},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.email,expression:"email"}],staticClass:"w-full shadow appearance-none border rounded py-2 px-3 text-grey-darker",attrs:{type:"text",placeholder:"john@example.com"},domProps:{value:e.email},on:{input:function(t){t.target.composing||(e.email=t.target.value)}}})]),e._v(" "),n("div",{staticClass:"flex flex-row justify-between pt-8 bg-grey-lighter rounded"},[n("button",{staticClass:"text-red-light hover:font-bold",on:{click:e.closeModal}},[e._v("Cancel")]),e._v(" "),n("button",{staticClass:"bg-teal-light text-white font-medium hover:bg-teal-dark py-3 px-4 rounded",on:{click:e.sendInvitation}},[e._v("Send Invitation")])])])])])},staticRenderFns:[]}},p2sa:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={props:["formShown"],data:function(){return{name:""}},methods:{closeForm:function(){this.$emit("close")},createRole:function(){var e=this;axios.post("/admin/roles",{name:this.name}).then(function(t){e.name="",e.$emit("role-created",t.data.role)}).catch(function(e){console.log(e.message)})}}}},"pQE+":function(e,t,n){var s=n("VU/8")(n("qjuG"),n("BDRz"),!1,null,null,null);e.exports=s.exports},qjuG:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("8tCw"),i=n.n(s),o=n("dBZW"),r=n.n(o);t.default={components:{notificationDropdown:i.a,profileDropdown:r.a},data:function(){return{user:navbar.user,token:Laravel.csrfToken,url:navbar.navUrl}}}},sAqP:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=n("dh5Q"),i=n.n(s);t.default={components:{attachPermissionForm:i.a},props:{activeColumn:{required:!0,type:String}},data:function(){return{permissions:[],attachPermissionFormShown:!1,permissionId:null}},watch:{activeColumn:"getPermissions"},methods:{getPermissions:function(){var e=this;"permissions"===this.activeColumn&&this.permissions.length<1&&axios.get("/admin/permissions").then(function(t){e.permissions=t.data.permissions}).catch(function(e){console.log(e)})},showAttachPermissionForm:function(e){this.permissionId=e,this.attachPermissionFormShown=!0},closeAttachPermissionForm:function(){this.attachPermissionFormShown=!1},permissionAttachedToRole:function(e){var t=this;this.permissions.filter(function(e){return e.id===t.permissionId})[0].roles.some(function(t){return t.id===e.id})||this.permissions.filter(function(e){return e.id===t.permissionId})[0].roles.push(e),this.attachPermissionFormShown=!1}}}},sCng:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"px-4 self-center"},[n("div",{staticClass:"text-teal-light text-base no-underline cursor-pointer",attrs:{id:"notification"},on:{click:e.toggleNotification}},[n("i",{staticClass:"far fa-bell font-bold text-xl",attrs:{"aria-hidden":"true"}}),e._v(" "),e.unreadNotification?n("i",{staticClass:"fa fa-circle text-red-light text-sm absolute pin-t mt-3 ml-3",attrs:{"aria-hidden":"true"}}):e._e()]),e._v(" "),e.notificationShown?n("div",{staticClass:"absolute bg-white w-64 mt-6 mr-8 py-4 shadow-lg rounded",staticStyle:{right:"5%"}},[n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(0)]),e._v(" "),n("a",{staticClass:"flex flex-row items-center list-reset px-4 py-2 text-grey-dark no-underline block",attrs:{href:"#"}},[n("img",{staticClass:"w-10 h-10 rounded-full mr-2",attrs:{src:e.generateUrl(e.user.avatar)}}),e._v(" "),e._m(1)]),e._v(" "),n("span",{staticClass:"block border-t"}),e._v(" "),n("a",{staticClass:"list-reset px-4 pt-2 text-blue-light text-center no-underline block",attrs:{href:"/notifications"}},[e._v("\n            View All\n        ")])]):e._e()])},staticRenderFns:[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticClass:"py-1 text-sm"},[this._v("\n                    commented on your post\n                ")]),this._v(" "),t("div",{staticClass:"py-1 text-xs"},[this._v("\n                    2 min ago\n                ")])])}]}},uQIB:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"bg-white rounded-b",class:{hidden:"permissions"!==e.activeColumn}},[n("attach-permission-form",{attrs:{permissionId:e.permissionId,"form-shown":e.attachPermissionFormShown},on:{close:e.closeAttachPermissionForm,"permission-attached":e.permissionAttachedToRole}}),e._v(" "),n("div",{staticClass:" px-6 py-8 flex flex-row flex-wrap justify-center text-grey-darker"},e._l(e.permissions,function(t){return n("div",{staticClass:"bg-white shadow-xl w-80 my-4 md:m-6 rounded-lg"},[n("div",{staticClass:"p-4 text-xl uppercase text-indigo bg-grey-lighter rounded-t-lg"},[e._v("\n        "+e._s(t.name)+"\n      ")]),e._v(" "),n("div",{staticClass:"px-4 pb-2 bg-grey-lighter text-sm flex flex-row"},[n("span",[e._v("\n          Roles\n        ")]),e._v(" "),n("div",{on:{click:function(n){e.showAttachPermissionForm(t.id)}}},[n("i",{staticClass:"ml-2 fas fa-plus-circle text-indigo cursor-pointer"})])]),e._v(" "),t.roles.length>0?n("div",{staticClass:"flex flex-row flex-wrap m-2"},e._l(t.roles,function(t){return n("div",{staticClass:"py-1 px-2 m-2 rounded-full font-medium bg-pink text-white text-sm flex flex-row items-center"},[e._v("\n          "+e._s(t.name)+" "),n("i",{staticClass:"ml-1 pl-1 fas fa-trash-alt cursor-pointer"})])})):n("div",{staticClass:"py-1 px-2 m-2 font-medium text-grey-darker"},[e._v("\n        Don't belongs to any role yet\n      ")])])}))],1)},staticRenderFns:[]}},ulRP:function(e,t,n){var s=n("VU/8")(n("p2sa"),n("I6uN"),!1,null,null,null);e.exports=s.exports},wlaG:function(e,t,n){var s=n("VU/8")(n("1yv/"),n("jK9D"),!1,null,null,null);e.exports=s.exports},ykhH:function(e,t){e.exports={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"w-full mb-8",class:{hidden:"auth"!=e.activeTab}},[n("div",{staticClass:"bg-white shadow rounded-t text-grey-darkest mt-4"},[n("div",{staticClass:"flex flex-row text-center text-grey"},[n("div",{staticClass:"w-1/2 font-semibold p-4 rounded-tl",class:["roles"===e.activeColumn?"text-indigo border-indigo border-b-2":"bg-white cursor-pointer"],on:{click:function(t){e.activateThisColumn("roles")}}},[e._v("\n        Roles\n      ")]),e._v(" "),n("div",{staticClass:"w-1/2 font-semibold p-4",class:["permissions"===e.activeColumn?"text-indigo border-indigo border-b-2":"bg-white cursor-pointer"],on:{click:function(t){e.activateThisColumn("permissions")}}},[e._v("\n        Permissions\n      ")])]),e._v(" "),n("roles-board",{attrs:{activeColumn:e.activeColumn}}),e._v(" "),n("permissions-board",{attrs:{activeColumn:e.activeColumn}})],1)])},staticRenderFns:[]}}},[7]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,